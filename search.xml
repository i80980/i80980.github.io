<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaDay10之Git</title>
      <link href="/2022/07/19/040-javaday10-git/"/>
      <url>/2022/07/19/040-javaday10-git/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git介绍"><a href="#1-Git介绍" class="headerlink" title="1.Git介绍"></a>1.Git介绍</h2><h3 id="1-1版本控制-理解"><a href="#1-1版本控制-理解" class="headerlink" title="1.1版本控制(理解)"></a>1.1版本控制(理解)</h3><p>无论是代码编写，还是文档编写，我们都会遇到对文档内容反复修改的情况</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533084.png" alt="01_版本控制介绍"></p><h3 id="1-2开发中存在的问题-理解"><a href="#1-2开发中存在的问题-理解" class="headerlink" title="1.2开发中存在的问题(理解)"></a>1.2开发中存在的问题(理解)</h3><ul><li>程序员小明负责的模块就要完成了，就在即将提交发布之前的一瞬间，电脑突然蓝屏，硬盘光荣下岗！</li></ul><p>几个月来的努力付之东流</p><p>​    <img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533098.png" alt="02_开发中的麻烦"></p><ul><li><p>老王需要在项目中加入一个很复杂的功能，一边尝试，一边修改代码，就这样摸索了一个星期。<br>可是这被改得面目全非的代码已经回不到从前了。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533682.png" alt="03_开发中的麻烦"></p></li><li><p>小明和老王先后从文件服务器上下载了同一个文件</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533770.png" alt="04_开发中的麻烦"></p></li><li><p>因项目中Bug过多，导致项目进度拖延，项目经理老徐因此被骂，但不清楚Bug是手下哪一个程序员写的</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533931.png" alt="05_开发中的麻烦"></p></li><li><p>开发中要解决的问题</p><ul><li>代码备份</li><li>版本控制</li><li>协同工作</li><li>责任追溯</li></ul></li></ul><h3 id="1-3SVN版本控制-理解"><a href="#1-3SVN版本控制-理解" class="headerlink" title="1.3SVN版本控制(理解)"></a>1.3SVN版本控制(理解)</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而开发人员工作的时候，用的都是自己的电脑，<br>所以首先要从中央服务器下载最新的版本，然后开发，开发完后，需要把自己开发的代码提交到中央服务器。</p><ul><li><p>服务器单点故障</p><p>将会导致所有人员无法工作</p></li><li><p>而服务器硬盘损坏</p><p>这意味着，你可能失去了该项目的所有历史记录，这是毁灭性的。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533869.png" alt="06_svn和git的对比"></p></li></ul><h3 id="1-4Git版本控制-理解"><a href="#1-4Git版本控制-理解" class="headerlink" title="1.4Git版本控制(理解)"></a>1.4Git版本控制(理解)</h3><p>Git是在2005年，Linux系统的创建者Linus Torvalds,为了帮助全球的开发者，维护Linux系统内核的开发<br>而开发了自己的开源分布式版本控制工具,分为两种类型的仓库：本地仓库和远程仓库。</p><ul><li><p>每一个客户端都保存了完整的历史记录</p><p>服务器的故障，都可以通过客户端的记录得以恢复。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533195.png" alt="07_svn和git的对比"></p></li></ul><h2 id="2-Git下载和安装"><a href="#2-Git下载和安装" class="headerlink" title="2.Git下载和安装"></a>2.Git下载和安装</h2><h3 id="2-1Git的下载-应用"><a href="#2-1Git的下载-应用" class="headerlink" title="2.1Git的下载(应用)"></a>2.1Git的下载(应用)</h3><p>官网下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533187.png" alt="08_Git的下载"></p><h3 id="2-2Git的安装-应用"><a href="#2-2Git的安装-应用" class="headerlink" title="2.2Git的安装(应用)"></a>2.2Git的安装(应用)</h3><ol><li><p>双击安装包，进入安装向导界面</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533002.png" alt="09_Git的安装01"></p></li><li><p>指定安装目录</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533459.png" alt="10_Git的安装02"></p></li><li><p>一路next下一步</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533067.png" alt="11_Git的安装03"></p></li><li><p>等待安装</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533379.png" alt="12_Git的安装04"></p></li><li><p>安装完成</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533380.png" alt="13_Git的安装05"></p></li><li><p>安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明Git安装成功。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533452.png" alt="14_Git的安装06"></p></li><li><p>运行Git命令客户端，使用git –version 命令，可以查看git版本</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533916.png" alt="15_Git的安装07"></p></li></ol><h3 id="2-3TortoiseGit的安装-应用"><a href="#2-3TortoiseGit的安装-应用" class="headerlink" title="2.3TortoiseGit的安装(应用)"></a>2.3TortoiseGit的安装(应用)</h3><ol><li><p>双击安装包，进入安装向导界面</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533331.png" alt="16_TortiseGit的安装"></p></li><li><p>一路next下一步</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533211.png" alt="17_TortiseGit的安装"></p></li><li><p>指定安装目录<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533917.png" alt="18_TortiseGit的安装"></p></li><li><p>安装</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533948.png" alt="19_TortiseGit的安装"></p></li><li><p>配置</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533899.png" alt="20_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533941.png" alt="21_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533797.png" alt="22_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533356.png" alt="23_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191533605.png" alt="24_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534596.png" alt="25_TortiseGit的安装"></p></li><li><p>安装TortoiseGit中文语言包,一路next即可</p></li></ol><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534701.png" alt="26_TortiseGit的安装"></p><ol start="7"><li><p>配置TortoiseGit中文语言</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534605.png" alt="27_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534733.png" alt="28_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534677.png" alt="29_TortiseGit的安装"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534562.png" alt="30_TortiseGit的安装"></p></li></ol><h2 id="3-Git操作入门"><a href="#3-Git操作入门" class="headerlink" title="3.Git操作入门"></a>3.Git操作入门</h2><h3 id="3-1Git基本工作流程-理解"><a href="#3-1Git基本工作流程-理解" class="headerlink" title="3.1Git基本工作流程(理解)"></a>3.1Git基本工作流程(理解)</h3><p>本地仓库</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534413.png" alt="31_Git基本工作流程"></p><h3 id="3-2Git命令行操作-应用"><a href="#3-2Git命令行操作-应用" class="headerlink" title="3.2Git命令行操作(应用)"></a>3.2Git命令行操作(应用)</h3><ul><li><p>git常用命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>初始化，创建 git 仓库</td></tr><tr><td>git status</td><td>查看 git 状态 （文件是否进行了添加、提交操作）</td></tr><tr><td>git add 文件名</td><td>添加，将指定文件添加到暂存区</td></tr><tr><td>git commit -m ‘提交信息’</td><td>提交，将暂存区文件提交到历史仓库</td></tr><tr><td>git log</td><td>查看日志（ git 提交的历史日志）</td></tr></tbody></table></li><li><p>操作步骤</p><ol><li><p>创建工作目录、初始化本地 git 仓库</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534308.png" alt="32_Git工作流程"></p></li><li><p>新建一个 test.txt 文件（暂不执行添加操作）</p></li><li><p>使用 status 命令，查看状态</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534013.png" alt="33_Git工作流程"></p></li><li><p>使用 add 命令添加，并查看状态</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534634.png" alt="34_Git工作流程"></p></li><li><p>使用 commit 命令，提交到本地历史仓库</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534460.png" alt="35_Git工作流程"></p></li><li><p>使用 log 命令，查看日志</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534912.png" alt="36_Git工作流程"></p></li><li><p>修改 test.txt 文件</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534276.png" alt="37_Git工作流程"></p></li><li><p>添加并提交，查看日志</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534030.png" alt="38_Git工作流程"></p></li></ol></li></ul><h3 id="3-3Git图形化工具操作-理解"><a href="#3-3Git图形化工具操作-理解" class="headerlink" title="3.3Git图形化工具操作(理解)"></a>3.3Git图形化工具操作(理解)</h3><ol><li><p>创建工作目录、初始化本地 git 仓库</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534269.png" alt="39_Git工作流程"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536490.png" alt="40_Git工作流程"></p></li><li><p>新建一个 test.txt 文件（暂不执行添加操作）</p></li><li><p>选中文件右键，选择TortoiseGit，之后选择添加</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534764.png" alt="41_Git工作流程"></p></li><li><p>空白处右键,Git提交,提交到本地历史仓库</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534622.png" alt="42_Git工作流程"></p></li><li><p>空白处右键,TortoiseGit,显示日志,可以产看日志信息</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534382.png" alt="43_Git工作流程"></p></li><li><p>修改 test.txt 文件</p></li><li><p>添加并提交，查看日志</p></li></ol><h2 id="4-Git版本管理"><a href="#4-Git版本管理" class="headerlink" title="4.Git版本管理"></a>4.Git版本管理</h2><h3 id="4-1历史版本切换-理解"><a href="#4-1历史版本切换-理解" class="headerlink" title="4.1历史版本切换(理解)"></a>4.1历史版本切换(理解)</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534829.png" alt="44_历史版本切换"></p><ul><li><p>准备动作</p><ol><li>查看 my_project 的 log 日志<br>git reflog ：可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录的操作）</li><li>增加一次新的修改记录</li></ol></li><li><p>需求: 将代码切换到第二次修改的版本</p><p>指令：git reset –hard 版本唯一索引值</p></li></ul><h3 id="4-2分支管理介绍-理解"><a href="#4-2分支管理介绍-理解" class="headerlink" title="4.2分支管理介绍(理解)"></a>4.2分支管理介绍(理解)</h3><ul><li>分支<ul><li>由每次提交的代码，串成的一条时间线</li><li>使用分支意味着你可以把你的工作从开发主线上分离开来,以免影响开发主线</li></ul></li><li>分支的使用场景<ol><li>周期较长的模块开发<br>假设你准备开发一个新功能，但是需要一个月才能完成<br>第一周写了20%的代码，突然发现原来已经写好的功能出现了一个严重的Bug<br>那现在就需要放下手中的新功能，去修复Bug<br>但这20%的代码不能舍弃，并且也担心丢失，这就需要开启一个新的版本控制。</li><li>尝试性的模块开发<br>业务人员给我们提出了一个需求，经过我们的思考和分析<br>该需求应该可以使用技术手段进行实现。<br>但是我们还不敢确定，我们就可以去创建一个分支基于分支进行尝试性开发。</li></ol></li></ul><ul><li><p>分支工作流程</p><ul><li><p>Master: 指向提交的代码版本</p></li><li><p>Header: 指向当前所使用的的分支</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534165.png" alt="45_分支工作流程介绍"></p></li></ul></li></ul><h3 id="4-3分支管理操作-应用"><a href="#4-3分支管理操作-应用" class="headerlink" title="4.3分支管理操作(应用)"></a>4.3分支管理操作(应用)</h3><ul><li><p>创建和切换</p><p>创建命令：git branch 分支名<br>切换命令：git checkout 分支名</p></li><li><p>新分支添加文件</p><p>查看文件命令：ls</p><p>总结：不同分支之间的关系是平行的关系，不会相互影响</p></li><li><p>合并分支</p><p>合并命令：git merge 分支名</p></li><li><p>删除分支</p><p>删除命令：git branch -d 分支名</p></li><li><p>查看分支列表</p><p>查看命令：git branch</p></li></ul><h2 id="5-远程仓库"><a href="#5-远程仓库" class="headerlink" title="5.远程仓库"></a>5.远程仓库</h2><h3 id="5-1远程仓库工作流程-理解"><a href="#5-1远程仓库工作流程-理解" class="headerlink" title="5.1远程仓库工作流程(理解)"></a>5.1远程仓库工作流程(理解)</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534949.png" alt="46_远程仓库"></p><h3 id="5-2远程仓库平台介绍-理解"><a href="#5-2远程仓库平台介绍-理解" class="headerlink" title="5.2远程仓库平台介绍(理解)"></a>5.2远程仓库平台介绍(理解)</h3><ul><li><p>GitHub</p><p>域名：<a href="https://github.com/">https://github.com</a><br>介绍：GitHub是全球最大的开源项目托管平台，俗称大型程序员社区化交友网站</p><p>​        各类好玩有趣的开源项目，只有想不到，没有找不到。</p></li><li><p>码云</p><p>域名：<a href="https://gitee.com/">https://gitee.com</a><br>介绍：码云是全国最大的开源项目托管平台，良心平台，速度快，提供免费私有库</p></li></ul><h3 id="5-3码云的注册-应用"><a href="#5-3码云的注册-应用" class="headerlink" title="5.3码云的注册(应用)"></a>5.3码云的注册(应用)</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534700.png" alt="47_码云的注册"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534428.png" alt="48_码云的注册"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534716.png" alt="49_码云的注册"></p><h3 id="5-4先有本地项目-远程为空-应用"><a href="#5-4先有本地项目-远程为空-应用" class="headerlink" title="5.4先有本地项目,远程为空(应用)"></a>5.4先有本地项目,远程为空(应用)</h3><ul><li><p>步骤</p><ol><li>创建本地仓库</li><li>创建或修改文件，添加（add）文件到暂存区，提交（commit）到本地仓库</li><li>创建远程仓库</li><li>推送到远程仓库</li></ol></li><li><p>创建远程仓库</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534101.png" alt="50_创建远程仓库"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534646.png" alt="51_创建远程仓库"></p></li><li><p>生成SSH公钥</p><ul><li><p>推送代码之前，需要先配置SSH公钥</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191534093.png" alt="52_配置SSH公钥"></p></li><li><p>生成SSH公钥步骤</p><ol><li><p>设置Git账户</p><ul><li>git config user.name（查看git账户）</li><li>git config user.email（查看git邮箱）</li><li>git config –global user.name “账户名”（设置全局账户名）</li><li>git config –global user.email “邮箱”（设置全局邮箱）</li><li>cd ~/.ssh（查看是否生成过SSH公钥）</li></ul><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535487.png" alt="53_配置SSH公钥"></p></li><li><p>生成SSH公钥</p><ul><li>生成命令: ssh-keygen –t rsa –C “邮箱” ( 注意：这里需要敲3次回车)</li></ul><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535262.png" alt="54_配置SSH公钥"></p><ul><li>查看命令: cat ~/.ssh/id-rsa.pub</li></ul><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535662.png" alt="55_配置SSH公钥"></p></li><li><p>设置账户公钥</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536511.png" alt="56_配置SSH公钥"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535295.png" alt="57_配置SSH公钥"></p></li><li><p>公钥测试</p><ul><li>命令: ssh -T <a href="mailto:git@gitee.com">git@gitee.com</a></li></ul><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535736.png" alt="58_配置SSH公钥"></p></li></ol></li></ul></li><li><p> 推送到远程仓库</p></li><li><p>步骤</p><ol><li>为远程仓库的URL（网址），自定义仓库名称</li><li>推送</li></ol></li><li><p>命令<br>   git remote add 远程名称 远程仓库URL<br>   git push -u 仓库名称 分支名</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535535.png" alt="59_配置SSH公钥"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535257.png" alt="60_配置SSH公钥"></p></li></ul><h3 id="5-5先有远程仓库-本地为空-应用"><a href="#5-5先有远程仓库-本地为空-应用" class="headerlink" title="5.5先有远程仓库,本地为空(应用)"></a>5.5先有远程仓库,本地为空(应用)</h3><ul><li>步骤<ol><li>将远程仓库的代码，克隆到本地仓库<br> 克隆命令：git clone 仓库地址</li><li>创建新文件，添加并提交到本地仓库</li><li>推送至远程仓库</li><li>项目拉取更新<br> 拉取命令：git pull 远程仓库名 分支名</li></ol></li></ul><h3 id="5-6代码冲突-应用"><a href="#5-6代码冲突-应用" class="headerlink" title="5.6代码冲突(应用)"></a>5.6代码冲突(应用)</h3><ul><li><p>产生原因:</p><p>两个程序员操作同一个文件,其中一个程序员在修改文件后,push到远程仓库,另一个程序员应该先pull将最新的代码更新到本地仓库后,在修改代码,之后push到远程仓库,结果他没有先pull将最新的代码更新到本地仓库,而是直接将自己的代码push到远程仓库,这样就可能会导致代码冲突</p></li></ul><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535072.png" alt="61_代码冲突"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535240.png" alt="62_代码冲突"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535335.png" alt="63_代码冲突"></p><ul><li><p>如何解决冲突</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;和&gt;&gt;&gt;&gt;&gt;&gt;&gt;中间的内容,就是冲突部分</p><ol><li>修改冲突行，保存，即可解决冲突。</li><li>重新add冲突文件并commit到本地仓库，重新push到远程</li></ol></li></ul><h2 id="6-IDEA集成Git"><a href="#6-IDEA集成Git" class="headerlink" title="6.IDEA集成Git"></a>6.IDEA集成Git</h2><h3 id="6-1IDEA中配置Git-应用"><a href="#6-1IDEA中配置Git-应用" class="headerlink" title="6.1IDEA中配置Git(应用)"></a>6.1IDEA中配置Git(应用)</h3><ol><li>File -&gt; Settings</li></ol><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535863.png" alt="64_IDEA中配置Git"></p><ol start="2"><li>Version Control -&gt; Git -&gt; 指定git.exe存放目录</li></ol><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535096.png" alt="65_IDEA中配置Git"></p><ol start="3"><li>点击Test测试</li></ol><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535488.png" alt="66_IDEA中配置Git"></p><h3 id="6-2创建本地仓库-应用"><a href="#6-2创建本地仓库-应用" class="headerlink" title="6.2创建本地仓库(应用)"></a>6.2创建本地仓库(应用)</h3><ol><li><p>VCS-&gt;Import into Version Control-&gt;Create Git Repository</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535208.png" alt="67_创建本地仓库"></p></li><li><p>选择工程所在的目录,这样就创建好本地仓库了</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535728.png" alt="68_创建本地仓库"></p></li><li><p>点击git后边的对勾,将当前项目代码提交到本地仓库</p><p>注意: 项目中的配置文件不需要提交到本地仓库中,提交时,忽略掉即可</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535360.png" alt="69_创建本地仓库"></p></li></ol><h3 id="6-3版本切换-应用"><a href="#6-3版本切换-应用" class="headerlink" title="6.3版本切换(应用)"></a>6.3版本切换(应用)</h3><ul><li><p>方式一: 控制台Version Control-&gt;Log-&gt;Reset Current Branch…-&gt;Reset</p><p>这种切换的特点是会抛弃原来的提交记录</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535248.png" alt="70_版本切换"></p></li><li><p>方式二:控制台Version Control-&gt;Log-&gt;Revert Commit-&gt;Merge-&gt;处理代码-&gt;commit</p><p>这种切换的特点是会当成一个新的提交记录,之前的提交记录也都保留</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535168.png" alt="71_版本切换"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535327.png" alt="72_版本切换"></p><p>​        <img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536801.png" alt="73_版本切换"></p></li></ul><h3 id="6-4分支管理-应用"><a href="#6-4分支管理-应用" class="headerlink" title="6.4分支管理(应用)"></a>6.4分支管理(应用)</h3><ul><li><p>创建分支</p><p>VCS-&gt;Git-&gt;Branches-&gt;New Branch-&gt;给分支起名字-&gt;ok</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535416.png" alt="74_创建分支"></p></li><li><p>切换分支</p><p>idea右下角Git-&gt;选择要切换的分支-&gt;checkout</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191535424.png" alt="75_切换分支"></p></li><li><p>合并分支</p><p>VCS-&gt;Git-&gt;Merge changes-&gt;选择要合并的分支-&gt;merge</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536184.png" alt="76_合并分支"></p><p>处理分支中的代码</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536161.png" alt="77_合并分支"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536295.png" alt="78_合并分支"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536583.png" alt="79_合并分支"></p></li><li><p>删除分支</p><p>idea右下角-&gt;选中要删除的分支-&gt;Delete</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536872.png" alt="80_删除分支"></p></li></ul><h3 id="6-5本地仓库推送到远程仓库-应用"><a href="#6-5本地仓库推送到远程仓库-应用" class="headerlink" title="6.5本地仓库推送到远程仓库(应用)"></a>6.5本地仓库推送到远程仓库(应用)</h3><ol><li><p>VCS-&gt;Git-&gt;Push-&gt;点击master Define remote</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536559.png" alt="81_本地仓库推送到远程仓库"></p></li><li><p>将远程仓库的路径复制过来-&gt;Push</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536040.png" alt="82_本地仓库推送到远程仓库"></p></li></ol><h3 id="6-6远程仓库克隆到本地仓库-应用"><a href="#6-6远程仓库克隆到本地仓库-应用" class="headerlink" title="6.6远程仓库克隆到本地仓库(应用)"></a>6.6远程仓库克隆到本地仓库(应用)</h3><p>File-&gt;Close Project-&gt;Checkout from Version Control-&gt;Git-&gt;指定远程仓库的路径-&gt;指定本地存放的路径-&gt;clone</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191536007.png" alt="83_远程仓库克隆到本地仓库"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay09之ArrayList集合&amp;学生管理系统</title>
      <link href="/2022/07/19/039-javaday09-arraylist-ji-he-xue-sheng-guan-li-xi-tong/"/>
      <url>/2022/07/19/039-javaday09-arraylist-ji-he-xue-sheng-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h2><p><strong>集合和数组的区别 :</strong> </p><p>​    共同点：都是存储数据的容器</p><p>​    不同点：数组的容量是固定的，集合的容量是可变的</p><h3 id="1-1-ArrayList的构造方法和添加方法"><a href="#1-1-ArrayList的构造方法和添加方法" class="headerlink" title="1.1 -ArrayList的构造方法和添加方法"></a>1.1 -ArrayList的构造方法和添加方法</h3><table><thead><tr><th>public ArrayList()</th><th>创建一个空的集合对象</th></tr></thead><tbody><tr><td>public boolean add(E e)</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr></tbody></table><p><strong>ArrayList<e> ：</e></strong> </p><p>​    可调整大小的数组实现 </p><p>​    <e> : 是一种特殊的数据类型，泛型。</e></p><p><strong>怎么用呢 ?</strong>    </p><p>​    在出现E的地方我们使用引用数据类型替换即可    </p><p>​    举例：ArrayList<string>, ArrayList<student></student></string></p><h3 id="1-2ArrayList类常用方法【应用】"><a href="#1-2ArrayList类常用方法【应用】" class="headerlink" title="1.2ArrayList类常用方法【应用】"></a>1.2ArrayList类常用方法【应用】</h3><p>**成员方法 : **</p><table><thead><tr><th>public boolean remove(Object o)</th><th>删除指定的元素，返回删除是否成功</th></tr></thead><tbody><tr><td>public E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>public E get(int index)</td><td>返回指定索引处的元素</td></tr><tr><td>public int size()</td><td>返回集合中的元素的个数</td></tr></tbody></table><p><strong>示例代码 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove("world"));</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove("javaee"));</span>        <span class="token comment" spellcheck="true">//public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove(1));</span>        <span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span><span class="token comment" spellcheck="true">//        System.out.println(array.remove(3));</span>        <span class="token comment" spellcheck="true">//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span><span class="token comment" spellcheck="true">//        System.out.println(array.set(1,"javaee"));</span>        <span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span><span class="token comment" spellcheck="true">//        System.out.println(array.set(3,"javaee"));</span>        <span class="token comment" spellcheck="true">//public E get(int index)：返回指定索引处的元素</span><span class="token comment" spellcheck="true">//        System.out.println(array.get(0));</span><span class="token comment" spellcheck="true">//        System.out.println(array.get(1));</span><span class="token comment" spellcheck="true">//        System.out.println(array.get(2));</span>        <span class="token comment" spellcheck="true">//System.out.println(array.get(3)); //？？？？？？ 自己测试</span>        <span class="token comment" spellcheck="true">//public int size()：返回集合中的元素的个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出集合</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array:"</span> <span class="token operator">+</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-ArrayList存储字符串并遍历"><a href="#1-3-ArrayList存储字符串并遍历" class="headerlink" title="1.3 ArrayList存储字符串并遍历"></a>1.3 ArrayList存储字符串并遍历</h3><p><strong>案例需求 :</strong> </p><p>​    创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p><p><strong>实现步骤 :</strong> </p><pre><code> 1:创建集合对象    2:往集合中添加字符串对象    3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现    4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现    5:遍历集合的通用格式</code></pre><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:创建集合对象        2:往集合中添加字符串对象        3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现        4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现        5:遍历集合的通用格式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//往集合中添加字符串对象</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"刘正风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"左冷禅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"风清扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span><span class="token comment" spellcheck="true">//        System.out.println(array.size());</span>        <span class="token comment" spellcheck="true">//遍历集合的通用格式</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-ArrayList存储学生对象并遍历"><a href="#1-4-ArrayList存储学生对象并遍历" class="headerlink" title="1.4 ArrayList存储学生对象并遍历"></a>1.4 ArrayList存储学生对象并遍历</h3><p><strong>案例需求 :</strong> </p><p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><p>**实现步骤 : ** </p><p>​    1:定义学生类    </p><p>​    2:创建集合对象    </p><p>​    3:创建学生对象    </p><p>​    4:添加学生对象到集合中    </p><p>​    5:遍历集合，采用通用遍历格式实现</p><p><strong>代码实现 :</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义学生类        2:创建集合对象        3:创建学生对象        4:添加学生对象到集合中        5:遍历集合，采用通用遍历格式实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学生对象</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"风清扬"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加学生对象到集合中</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合，采用通用遍历格式实现</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-键盘录入学生信息到集合"><a href="#1-5-键盘录入学生信息到集合" class="headerlink" title="1.5 键盘录入学生信息到集合"></a>1.5 键盘录入学生信息到集合</h3><p><strong>案例需求 :</strong> </p><p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><p>​        学生的姓名和年龄来自于键盘录入</p><p><strong>实现步骤 :</strong></p><p>​    1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型    </p><p>​    2:创建集合对象    </p><p>​    3:键盘录入学生对象所需要的数据    </p><p>​    4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量    </p><p>​    5:往集合中添加学生对象    </p><p>​    6:遍历集合，采用通用遍历格式实现</p><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型        2:创建集合对象        3:键盘录入学生对象所需要的数据        4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量        5:往集合中添加学生对象        6:遍历集合，采用通用遍历格式实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为了提高代码的复用性，我们用方法来改进程序</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合，采用通用遍历格式实现</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：void            参数：ArrayList&lt;Student> array     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//键盘录入学生对象所需要的数据</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生年龄:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//往集合中添加学生对象</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-学生管理系统"><a href="#2-学生管理系统" class="headerlink" title="2. 学生管理系统"></a>2. 学生管理系统</h2><h3 id="2-1-学生管理系统实现步骤"><a href="#2-1-学生管理系统实现步骤" class="headerlink" title="2.1 学生管理系统实现步骤"></a>2.1 学生管理系统实现步骤</h3><ul><li><p><strong>案例需求</strong></p><p>​    针对目前我们的所学内容，完成一个综合案例：学生管理系统！该系统主要功能如下：</p><p>​    添加学生：通过键盘录入学生信息，添加到集合中</p><p>​    删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</p><p>​    修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</p><p>​    查看学生：将集合中的学生对象信息进行展示</p><p>​    退出系统：结束程序</p></li><li><p><strong>实现步骤</strong></p><ol><li><p>定义学生类，包含以下成员变量</p><p>学生类：    Student成员变量：    </p><p>​    学号：sid    </p><p>​    姓名：name    </p><p>​    年龄：age    </p><p>​    生日：birthday</p><p>​    构造方法：    </p><p>​        无参构造    </p><p>​        带四个参数的构造成员方法：    </p><p>​    每个成员变量对应给出get/set方法</p></li><li><p>学生管理系统主界面的搭建步骤</p><p>2.1 用输出语句完成主界面的编写</p><p>2.2 用Scanner实现键盘录入数据</p><p>2.3 用switch语句完成操作的选择</p><p>2.4 用循环完成再次回到主界面</p></li><li><p>学生管理系统的添加学生功能实现步骤</p><p>3.1 用键盘录入选择添加学生</p><p>3.2 定义一个方法，用于添加学生</p><p>​    显示提示信息，提示要输入何种信息</p><p>​    键盘录入学生对象所需要的数据</p><p>​    创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</p><p>​    将学生对象添加到集合中（保存）</p><p>​    给出添加成功提示</p><p>3.3 调用方法</p></li><li><p>学生管理系统的查看学生功能实现步骤</p><p>4.1 用键盘录入选择查看所有学生信息</p><p>4.2 定义一个方法，用于查看学生信息</p><p>​    显示表头信息</p><p>​    将集合中数据取出按照对应格式显示学生信息，年龄显示补充“岁”</p><p>4.3 调用方法</p></li><li><p>学生管理系统的删除学生功能实现步骤</p><p>5.1 用键盘录入选择删除学生信息</p><p>5.2 定义一个方法，用于删除学生信息</p><p>​    显示提示信息</p><p>​    键盘录入要删除的学生学号</p><p>​    调用getIndex方法，查找该学号在集合的索引</p><p>​    如果索引为-1，提示信息不存在</p><p>​    如果索引不是-1，调用remove方法删除并提示删除成功</p><p>5.3 调用方法</p></li><li><p>学生管理系统的修改学生功能实现步骤</p><p>6.1 用键盘录入选择修改学生信息</p><p>6.2 定义一个方法，用于修改学生信息</p><p>​    显示提示信息</p><p>​    键盘录入要修改的学生学号</p><p>​    调用getIndex方法，查找该学号在集合的索引</p><p>​    如果索引为-1，提示信息不存在</p><p>​    如果索引不是-1，键盘录入要修改的学生信息</p><p>​    集合修改对应的学生信息</p><p>​    给出修改成功提示</p><p>6.3 调用方法</p></li><li><p>退出系统</p><p>使用System.exit(0);退出JVM</p></li></ol></li></ul><h3 id="2-2-学生类的定义"><a href="#2-2-学生类的定义" class="headerlink" title="2.2 学生类的定义"></a>2.2 学生类的定义</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String sid<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 学号</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 年龄</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生日</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String sid<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSid</span><span class="token punctuation">(</span>String sid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>String birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-测试类的定义"><a href="#2-3-测试类的定义" class="headerlink" title="2.3 测试类的定义"></a>2.3 测试类的定义</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建集合容器对象</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lo<span class="token operator">:</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1. 搭建主界面菜单</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------欢迎来到学生管理系统--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 添加学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2 删除学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3 修改学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4 查看学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5 退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的选择:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String choice <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>                    <span class="token comment" spellcheck="true">//System.out.println("添加学生");</span>                    <span class="token function">addStudent</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>                    <span class="token comment" spellcheck="true">//System.out.println("删除学生");</span>                    <span class="token function">deleteStudent</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>                    <span class="token comment" spellcheck="true">//System.out.println("修改学生");</span>                    <span class="token function">updateStudent</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token operator">:</span>                    <span class="token comment" spellcheck="true">// System.out.println("查看学生");</span>                    <span class="token function">queryStudents</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"5"</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢您的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span> lo<span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 修改学生的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您要修改的学生学号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String updateSid <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 调用getIndex方法, 查找该学号在集合中出现的索引位置</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>updateSid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 根据索引判断, 学号在集合中是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不存在: 给出提示</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查无信息, 请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在: 接收新的学生信息</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入新的学生姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入新的学生年龄:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入新的学生生日:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String birthday <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 封装为新的学生对象</span>            Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>updateSid<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用集合的set方法, 完成修改</span>            list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除学生的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 给出提示信息 (请输入您要删除的学号)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您要删除的学生学号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 键盘接收要删除的学号</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String deleteSid <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 调用getIndex方法, 查找该学号在集合中出现的索引位置</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>deleteSid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 根据索引判断, 学号在集合中是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不存在: 给出提示</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查无信息, 请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在:删除</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查看学生的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">queryStudents</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 判断集合中是否存在数据, 如果不存在直接给出提示</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无信息, 请添加后重新查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2. 存在: 展示表头数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学号\t\t姓名\t年龄\t生日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 遍历集合, 获取每一个学生对象的信息, 打印在控制台</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student stu <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加学生的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 给出录入的提示信息</span>        String sid<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sid <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> sid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// sid不存在, 学号可以使用</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入生日:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String birthday <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 将键盘录入的信息封装为学生对象</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 将封装好的学生对象, 添加到集合容器当中</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 给出添加成功的提示信息</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        getIndex : 接收一个集合对象, 接收一个学生学号        查找这个学号, 在集合中出现的索引位置     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">,</span> String sid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 假设传入的学号, 在集合中不存在</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 遍历集合, 获取每一个学生对象, 准备进行查找</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student stu <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3. 获取每一个学生对象的学号</span>            String id <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4. 使用获取出的学生学号, 和传入的学号(查找的学号)进行比对</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 存在: 让index变量记录正确的索引位置</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay08之常用API</title>
      <link href="/2022/07/19/038-javaday08-chang-yong-api/"/>
      <url>/2022/07/19/038-javaday08-chang-yong-api/</url>
      
        <content type="html"><![CDATA[<h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1-API概述-帮助文档的使用"><a href="#1-1-API概述-帮助文档的使用" class="headerlink" title="1.1 API概述-帮助文档的使用"></a>1.1 API概述-帮助文档的使用</h3><ul><li><p>什么是API</p><p>​    API (Application Programming Interface) ：应用程序编程接口</p></li><li><p>java中的API</p><p>​    指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p></li></ul><p><strong>如何使用API帮助文档 :</strong> </p><ul><li><p>打开帮助文档</p></li><li><p>找到索引选项卡中的输入框</p></li><li><p>在输入框中输入Random</p></li><li><p>看类在哪个包下</p></li><li><p>看类的描述</p></li><li><p>看构造方法</p></li><li><p>看成员方法</p></li></ul><h3 id="1-2-键盘录入字符串"><a href="#1-2-键盘录入字符串" class="headerlink" title="1.2 键盘录入字符串"></a>1.2 键盘录入字符串</h3><p><strong>Scanner类 :</strong></p><p>​    next() : 遇到了空格, 就不再录入数据了 , 结束标记: 空格, tab键</p><p>​    nextLine() : 可以将数据完整的接收过来 , 结束标记: 回车换行符       </p><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>api<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Scanner</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        next() : 遇到了空格, 就不再录入数据了                结束标记: 空格, tab键        nextLine() : 可以将数据完整的接收过来                结束标记: 回车换行符     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 创建Scanner对象</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 调用nextLine方法接收字符串</span>        <span class="token comment" spellcheck="true">// ctrl + alt + v : 快速生成方法的返回值</span>        String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>api<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2Scanner</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        nextInt和nextLine方法配合使用的时候, nextLine方法就没有键盘录入的机会了        建议: 今后键盘录入数据的时候, 如果是字符串和整数一起接受, 建议使用next方法接受字符串.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 + 回车换行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入字符串:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-String类"><a href="#2-String类" class="headerlink" title="2. String类"></a>2. String类</h2><h3 id="2-1-String概述"><a href="#2-1-String概述" class="headerlink" title="2.1 String概述"></a>2.1 String概述</h3><p>​    1 String 类在 java.lang 包下，所以使用的时候不需要导包</p><p>​    2 String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象</p><p>​    3 字符串不可变，它们的值在创建后不能被更改</p><h3 id="2-2-String类的构造方法"><a href="#2-2-String类的构造方法" class="headerlink" title="2.2 String类的构造方法"></a>2.2 String类的构造方法</h3><p><strong>常用的构造方法</strong></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191529749.png" alt="1590939947722"></p><p><strong>示例代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>string<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2StringConstructor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        String类常见构造方法:            public String() : 创建一个空白字符串对象，不含有任何内容            public String(char[] chs) : 根据字符数组的内容，来创建字符串对象            public String(String original) : 根据传入的字符串内容，来创建字符串对象            String s = “abc”;  直接赋值的方式创建字符串对象，内容就是abc         注意:                String这个类比较特殊, 打印其对象名的时候, 不会出现内存地址                而是该对象所记录的真实内容.                面向对象-继承, Object类     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// public String() : 创建一个空白字符串对象，不含有任何内容</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// public String(char[] chs) : 根据字符数组的内容，来创建字符串对象</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// public String(String original) : 根据传入的字符串内容，来创建字符串对象</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-创建字符串对象的区别对比"><a href="#2-4-创建字符串对象的区别对比" class="headerlink" title="2.4 创建字符串对象的区别对比"></a>2.4 创建字符串对象的区别对比</h3><ul><li><p><strong>通过构造方法创建</strong></p><p>​    通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p></li><li><p><strong>直接赋值方式创建</strong></p><p>​    以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p></li></ul><h3 id="2-5-字符串的比较"><a href="#2-5-字符串的比较" class="headerlink" title="2.5 字符串的比较"></a>2.5 字符串的比较</h3><h4 id="2-5-1-字符串的比较"><a href="#2-5-1-字符串的比较" class="headerlink" title="2.5.1 字符串的比较"></a>2.5.1 字符串的比较</h4><ul><li>== 比较基本数据类型：比较的是具体的值</li><li>== 比较引用数据类型：比较的是对象地址值</li></ul><p><strong>String类 :  public boolean equals(String s)     比较两个字符串内容是否相同、区分大小写</strong></p><p><strong>代码 :</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>stringmethod<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Equals</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// equals : 比较字符串内容, 区分大小写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// equalsIgnoreCase : 比较字符串内容, 忽略大小写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-用户登录案例【应用】"><a href="#2-6-用户登录案例【应用】" class="headerlink" title="2.6 用户登录案例【应用】"></a>2.6 用户登录案例【应用】</h3><p><strong>案例需求 :</strong> </p><p>​    已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p><p>**实现步骤 : **</p><ol><li>已知用户名和密码，定义两个字符串表示即可</li><li>键盘录入要登录的用户名和密码，用 Scanner 实现</li><li>拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。</li><li>字符串的内容比较，用equals() 方法实现</li><li>用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：已知用户名和密码，请用程序实现模拟用户登录。              总共给三次机会，登录之后，给出相应的提示        思路：        1. 已知用户名和密码，定义两个字符串表示即可        2. 键盘录入要登录的用户名和密码，用 Scanner 实现        3. 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。            字符串的内容比较，用equals() 方法实现        4. 用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 已知用户名和密码，定义两个字符串表示即可</span>        String username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 键盘录入要登录的用户名和密码，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 用循环实现多次机会，这里的次数明确，采用for循环实现</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String scUsername <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String scPassword <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3. 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>scUsername<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>scPassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的登录次数已达到今日上限, 请明天再来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败,您还剩余"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"次机会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-遍历字符串案例【应用】"><a href="#2-7-遍历字符串案例【应用】" class="headerlink" title="2.7 遍历字符串案例【应用】"></a>2.7 遍历字符串案例【应用】</h3><p><strong>案例需求 :</strong> </p><p>​    键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><p><strong>实现步骤 :</strong> </p><ol><li>键盘录入一个字符串，用 Scanner 实现</li><li>遍历字符串，首先要能够获取到字符串中的每一个字符, public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的</li><li> 遍历字符串，其次要能够获取到字符串的长度,   public int length()：返回此字符串的长度</li><li>遍历打印</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串        思路：        1. 键盘录入一个字符串，用 Scanner 实现        2. 遍历字符串，首先要能够获取到字符串中的每一个字符            public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的        3. 遍历字符串，其次要能够获取到字符串的长度            public int length()：返回此字符串的长度        4. 遍历打印9     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  1. 键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 遍历字符串，首先要能够获取到字符串中的每一个字符</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// i : 字符串的每一个索引</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-8-统计字符次数案例【应用】"><a href="#2-8-统计字符次数案例【应用】" class="headerlink" title="2.8 统计字符次数案例【应用】"></a>2.8 统计字符次数案例【应用】</h3><p><strong>案例需求 :</strong> </p><p>​    键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><p><strong>实现步骤 :</strong> </p><ol><li>键盘录入一个字符串，用 Scanner 实现</li><li>将字符串拆分为字符数组 , public char[] toCharArray( )：将当前字符串拆分为字符数组并返回</li><li>遍历字符数</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*       需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串       思路：       1. 键盘录入一个字符串，用 Scanner 实现       2. 将字符串拆分为字符数组                public char[] toCharArray( )：将当前字符串拆分为字符数组并返回       3. 遍历字符数组    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  1. 键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 将字符串拆分为字符数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 遍历字符数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-9-手机号屏蔽-字符串截取"><a href="#2-9-手机号屏蔽-字符串截取" class="headerlink" title="2.9 手机号屏蔽-字符串截取"></a>2.9 手机号屏蔽-字符串截取</h3><p><strong>案例需求 :</strong> </p><p>​    以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽<br>​        最终效果为：156****1234</p><p><strong>实现步骤 :</strong> </p><ol><li>键盘录入一个字符串，用 Scanner 实现</li><li>截取字符串前三位</li><li>截取字符串后四位</li><li>将截取后的两个字符串，中间加上****进行拼接，输出结果</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test5</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽        最终效果为：156****1234        思路：        1. 键盘录入一个字符串，用 Scanner 实现        2. 截取字符串前三位        3. 截取字符串后四位        4. 将截取后的两个字符串，中间加上****进行拼接，输出结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入手机号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String telString <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 截取字符串前三位</span>        String start <span class="token operator">=</span> telString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 截取字符串后四位</span>        String end <span class="token operator">=</span> telString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 将截取后的两个字符串，中间加上****进行拼接，输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token string">"****"</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-10-敏感词替换-字符串替换"><a href="#2-10-敏感词替换-字符串替换" class="headerlink" title="2.10 敏感词替换-字符串替换"></a>2.10 敏感词替换-字符串替换</h3><p><strong>案例需求 :</strong> </p><p>​    键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换</p><p><strong>实现步骤 :</strong> </p><ol><li>键盘录入一个字符串，用 Scanner 实现</li><li>替换敏感词<pre><code>        String replace(CharSequence target, CharSequence replacement)        将当前字符串中的target内容，使用replacement进行替换，返回新的字符串</code></pre></li><li>输出结果</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换        思路：        1. 键盘录入一个字符串，用 Scanner 实现        2. 替换敏感词                String replace(CharSequence target, CharSequence replacement)                将当前字符串中的target内容，使用replacement进行替换，返回新的字符串        3. 输出结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 替换敏感词</span>        String result <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"TMD"</span><span class="token punctuation">,</span><span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-11-切割字符串"><a href="#2-11-切割字符串" class="headerlink" title="2.11 切割字符串"></a>2.11 切割字符串</h3><p><strong>案例需求 :</strong> </p><p>​    以字符串的形式从键盘录入学生信息，例如：“张三 , 23”</p><p>​    从该字符串中切割出有效数据,封装为Student学生对象</p><p><strong>实现步骤 :</strong> </p><ol><li><p>编写Student类，用于封装数据</p></li><li><p>键盘录入一个字符串，用 Scanner 实现</p></li><li><p>根据逗号切割字符串，得到（张三）（23）</p><p>String[] split(String regex) ：根据传入的字符串作为规则进行切割<br>将切割后的内容存入字符串数组中，并将字符串数组返回</p></li><li><p>从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象</p></li><li><p>调用对象getXxx方法，取出数据并打印。</p></li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*         需求：以字符串的形式从键盘录入学生信息，例如：“张三 , 23”                从该字符串中切割出有效数据,封装为Student学生对象         思路：            1. 编写Student类，用于封装数据            2. 键盘录入一个字符串，用 Scanner 实现            3. 根据逗号切割字符串，得到（张三）（23）                    String[] split(String regex) ：根据传入的字符串作为规则进行切割                    将切割后的内容存入字符串数组中，并将字符串数组返回            4. 从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象            5. 调用对象getXxx方法，取出数据并打印。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 键盘录入一个字符串，用 Scanner 实现</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生信息:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String stuInfo <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// stuInfo = "张三,23";</span>        <span class="token comment" spellcheck="true">// 3. 根据逗号切割字符串，得到（张三）（23）</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> sArr <span class="token operator">=</span> stuInfo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(sArr[0]);</span><span class="token comment" spellcheck="true">//        System.out.println(sArr[1]);</span>        <span class="token comment" spellcheck="true">// 4. 从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>sArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5. 调用对象getXxx方法，取出数据并打印。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-12-String方法小结"><a href="#2-12-String方法小结" class="headerlink" title="2.12 String方法小结"></a>2.12 String方法小结</h3><p><strong>String类的常用方法 :</strong> </p><p>​    public boolean equals(Object anObject)  比较字符串的内容，严格区分大小写</p><p>​    public boolean equalsIgnoreCase(String anotherString)  比较字符串的内容，忽略大小写</p><p>​    public int length()  返回此字符串的长度</p><p>​    public char charAt(int index)  返回指定索引处的 char 值</p><p>​    public char[] toCharArray()  将字符串拆分为字符数组后返回</p><p>​    public String substring(int beginIndex, int endIndex)  根据开始和结束索引进行截取，得到新的字符串（包含头，不包含尾）</p><p>​    public String substring(int beginIndex)  从传入的索引处截取，截取到末尾，得到新的字符串</p><p>​    public String replace(CharSequence target, CharSequence replacement)  使用新值，将字符串中的旧值替换，得到新的字符串</p><p>​    public String[] split(String regex)  根据传入的规则切割字符串，得到字符串数组</p><h2 id="3-StringBuilder类"><a href="#3-StringBuilder类" class="headerlink" title="3 StringBuilder类"></a>3 StringBuilder类</h2><h3 id="3-1-StringBuilder类概述"><a href="#3-1-StringBuilder类概述" class="headerlink" title="3.1 StringBuilder类概述"></a>3.1 StringBuilder类概述</h3><p>​    <strong>概述 :</strong> StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是 StringBuilder 对象中的内容是可变的</p><h3 id="3-2-StringBuilder类和String类的区别"><a href="#3-2-StringBuilder类和String类的区别" class="headerlink" title="3.2 StringBuilder类和String类的区别"></a>3.2 StringBuilder类和String类的区别</h3><ul><li><strong>String类：</strong>内容是不可变的</li><li><strong>StringBuilder类：</strong>内容是可变的</li></ul><h3 id="3-3StringBuilder类的构造方法"><a href="#3-3StringBuilder类的构造方法" class="headerlink" title="3.3StringBuilder类的构造方法"></a>3.3StringBuilder类的构造方法</h3><p><strong>常用的构造方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String   str)</td><td>根据字符串的内容，来创建可变字符串对象</td></tr></tbody></table><p><strong>示例代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//public StringBuilder()：创建一个空白可变字符串对象，不含有任何内容</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb:"</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb.length():"</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder(String str)：根据字符串的内容，来创建可变字符串对象</span>        StringBuilder sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb2:"</span> <span class="token operator">+</span> sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb2.length():"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-StringBuilder常用的成员方法"><a href="#3-4-StringBuilder常用的成员方法" class="headerlink" title="3.4 StringBuilder常用的成员方法"></a>3.4 StringBuilder常用的成员方法</h3><ul><li><p><strong>添加和反转方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder   append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder   reverse()</td><td>返回相反的字符序列</td></tr></tbody></table></li><li><p><strong>示例代码</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder append(任意类型)：添加数据，并返回对象本身</span><span class="token comment" spellcheck="true">//        StringBuilder sb2 = sb.append("hello");</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        System.out.println("sb:" + sb);</span><span class="token comment" spellcheck="true">//        System.out.println("sb2:" + sb2);</span><span class="token comment" spellcheck="true">//        System.out.println(sb == sb2);</span><span class="token comment" spellcheck="true">//        sb.append("hello");</span><span class="token comment" spellcheck="true">//        sb.append("world");</span><span class="token comment" spellcheck="true">//        sb.append("java");</span><span class="token comment" spellcheck="true">//        sb.append(100);</span>        <span class="token comment" spellcheck="true">//链式编程</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb:"</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder reverse()：返回相反的字符序列</span>        sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb:"</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5StringBuilder和String相互转换【应用】"><a href="#3-5StringBuilder和String相互转换【应用】" class="headerlink" title="3.5StringBuilder和String相互转换【应用】"></a>3.5StringBuilder和String相互转换【应用】</h3><ul><li><p><strong>StringBuilder转换为String</strong></p><p>​        public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String</p></li><li><p><strong>String转换为StringBuilder</strong></p><p>​        public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</p></li><li><p><strong>示例代码</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        //StringBuilder 转换为 String        StringBuilder sb = new StringBuilder();        sb.append("hello");        //String s = sb; //这个是错误的做法        //public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String        String s = sb.toString();        System.out.println(s);        */</span>        <span class="token comment" spellcheck="true">//String 转换为 StringBuilder</span>        String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//StringBuilder sb = s; //这个是错误的做法</span>        <span class="token comment" spellcheck="true">//public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-6-StringBuilder拼接字符串案例"><a href="#3-6-StringBuilder拼接字符串案例" class="headerlink" title="3.6 StringBuilder拼接字符串案例"></a>3.6 StringBuilder拼接字符串案例</h3><p><strong>案例需求 :</strong> </p><p>​    定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p><p>​    并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p><p><strong>实现步骤 :</strong> </p><ol><li>定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</li><li>定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。<pre><code>      返回值类型 String，参数列表 int[] arr</code></pre></li><li>在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</li><li>调用方法，用一个变量接收结果</li><li>输出结果</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    思路：        1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化        2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。          返回值类型 String，参数列表 int[] arr        3:在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回        4:调用方法，用一个变量接收结果        5:输出结果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法，用一个变量接收结果</span>        String s <span class="token operator">=</span> <span class="token function">arrayToString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span>    <span class="token comment" spellcheck="true">/*        两个明确：            返回值类型：String            参数：int[] arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">arrayToString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay07之面向对象</title>
      <link href="/2022/07/19/037-javaday07-mian-xiang-dui-xiang/"/>
      <url>/2022/07/19/037-javaday07-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h2><p>**面向对象和面向过程的思想对比 : **</p><p>​    <strong>面向过程 ：</strong>是一种以过程为中心的编程思想，实现功能的每一步，都是自己实现的</p><p>​    <strong>面向对象 ：</strong>是一种以对象为中心的编程思想，通过指挥对象实现具体的功能</p><h3 id="1-1-类和对象的关系"><a href="#1-1-类和对象的关系" class="headerlink" title="1.1 类和对象的关系"></a>1.1 类和对象的关系</h3><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p><ul><li>类<ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li><li>简单理解：类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li>类和对象的关系<ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li></ul></li></ul><h3 id="1-2-类的定义【应用】"><a href="#1-2-类的定义【应用】" class="headerlink" title="1.2 类的定义【应用】"></a>1.2 类的定义【应用】</h3><p>类的组成是由属性和行为两部分组成</p><ul><li><strong>属性：</strong>在类中通过成员变量来体现（类中方法外的变量）</li><li><strong>行为：</strong>在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul><p><strong>类的定义步骤：</strong></p><p>​    ① 定义类</p><p>​    ② 编写类的成员变量</p><p>​    ③ 编写类的成员方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性 : 姓名, 年龄</span>    <span class="token comment" spellcheck="true">// 成员变量: 跟之前定义变量的格式一样, 只不过位置发生了改变, 类中方法外</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 行为 : 学习</span>    <span class="token comment" spellcheck="true">// 成员方法: 跟之前定义方法的格式一样, 只不过去掉了static关键字.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-对象的创建和使用"><a href="#1-3-对象的创建和使用" class="headerlink" title="1.3 对象的创建和使用"></a>1.3 对象的创建和使用</h3><ul><li><strong>创建对象的格式：</strong><ul><li>类名 对象名 = new 类名();</li></ul></li><li><strong>调用成员的格式：</strong><ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li>**示例代码 : **</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>object1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStudent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        创建对象的格式:                类名 对象名 = new 类名();        调用成员变量的格式:                对象名.变量名        调用成员方法的格式:                对象名.方法名();     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 类名 对象名 = new 类名();</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象名.变量名</span>        <span class="token comment" spellcheck="true">// 默认初始化值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// null</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 0</span>        stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 张三</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 23</span>        <span class="token comment" spellcheck="true">// 对象名.方法名();</span>        stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// com.itheima.object1.Student@b4c966a</span>        <span class="token comment" spellcheck="true">// 全类名(包名 + 类名)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-案例-手机类的创建和使用"><a href="#1-4-案例-手机类的创建和使用" class="headerlink" title="1.4 案例-手机类的创建和使用"></a>1.4 案例-手机类的创建和使用</h3><p><strong>需求 ：</strong>首先定义一个手机类，然后定义一个手机测试类，在手机测试类中通过对象完成成员变量和成员方法的使用</p><p><strong>分析 ：</strong></p><ul><li><p>成员变量：品牌, 价格</p></li><li><p>成员方法：打电话, 发短信</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 品牌, 价格</span>    String brand<span class="token punctuation">;</span>    <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打电话, 发短信</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"群发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPhone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 创建对象</span>        Phone p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 给成员变量进行赋值</span>        p<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"大米"</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">2999</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 打印赋值后的成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 调用成员方法</span>        p<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"阿强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-对象内存图"><a href="#2-对象内存图" class="headerlink" title="2. 对象内存图"></a>2. 对象内存图</h2><h3 id="2-1-单个对象内存图【理解】"><a href="#2-1-单个对象内存图【理解】" class="headerlink" title="2.1 单个对象内存图【理解】"></a>2.1 单个对象内存图【理解】</h3><ul><li><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191527952.png" alt="1590938666222"></li></ul><h3 id="2-2-多个对象内存图【理解】"><a href="#2-2-多个对象内存图【理解】" class="headerlink" title="2.2 多个对象内存图【理解】"></a>2.2 多个对象内存图【理解】</h3><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191527958.png" alt="1590938693756"></p></li><li><p><strong>总结：</strong></p><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p></li></ul><h3 id="2-3-多个对象指向相同内存图【理解】"><a href="#2-3-多个对象指向相同内存图【理解】" class="headerlink" title="2.3 多个对象指向相同内存图【理解】"></a>2.3 多个对象指向相同内存图【理解】</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191527414.png" alt="1590938711726"></p><ul><li><p><strong>总结 :</strong> </p><p>当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的）</p><p>只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。</p></li></ul><h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><h3 id="3-1-成员变量和局部变量的区别"><a href="#3-1-成员变量和局部变量的区别" class="headerlink" title="3.1 成员变量和局部变量的区别"></a>3.1 成员变量和局部变量的区别</h3><ul><li><strong>类中位置不同：</strong>成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li><strong>内存中位置不同：</strong>成员变量（堆内存）局部变量（栈内存）</li><li><strong>生命周期不同：</strong>成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li><li><strong>初始化值不同：</strong>成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ul><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><h3 id="4-1-private关键字"><a href="#4-1-private关键字" class="headerlink" title="4.1 private关键字"></a>4.1 private关键字</h3><p>​    <strong>概述 :</strong> private是一个修饰符，可以用来修饰成员（成员变量，成员方法）</p><p>​    <strong>特点 :</strong> 被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，    提供相应的操作</p><p>​        提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</p><p>​        提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</p><p>​    <strong>示例代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    学生类 */</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供get/set方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> a<span class="token operator">></span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你给的年龄有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            age <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    学生测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给成员变量赋值</span>        s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"林青霞"</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用show方法</span>        s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-private关键字的使用"><a href="#4-2-private关键字的使用" class="headerlink" title="4.2 private关键字的使用"></a>4.2 private关键字的使用</h3><ul><li><p><strong>需求：</strong></p><ul><li>定义标准的学生类，要求name和age使用private修饰</li><li>并提供set和get方法以及便于显示数据的show方法</li><li>测试类中创建对象并使用，最终控制台输出&nbsp; 林青霞，30 </li></ul></li><li><p><strong>示例代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    学生类 */</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//get/set方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    学生测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用set方法给成员变量赋值</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用get方法获取成员变量的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="4-3-this关键字【应用】"><a href="#4-3-this关键字【应用】" class="headerlink" title="4.3 this关键字【应用】"></a>4.3 this关键字【应用】</h3><p><strong>概述 :</strong> this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）</p><ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li></ul><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-this内存原理【理解】"><a href="#4-4-this内存原理【理解】" class="headerlink" title="4.4 this内存原理【理解】"></a>4.4 this内存原理【理解】</h3><ul><li><p><strong>注意 :</strong> this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象</p></li><li><p><strong>图解 ：</strong></p></li><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191527390.png" alt="1590938942838"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191527343.png" alt="1590938969305"></p></li></ul><h3 id="4-5-封装思想"><a href="#4-5-封装思想" class="headerlink" title="4.5 封装思想"></a>4.5 封装思想</h3><ol><li><strong>封装概述</strong><br> 是面向对象三大特征之一（封装，继承，多态）<br> 是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</li><li><strong>封装原则</strong><br> 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br> 成员变量private，提供对应的getXxx()/setXxx()方法</li><li><strong>封装好处</strong><br> 通过方法来控制成员变量的操作，提高了代码的安全性<br> 把代码用方法进行封装，提高了代码的复用性</li></ol><h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h2><h3 id="5-1-构造方法的格式和执行时机"><a href="#5-1-构造方法的格式和执行时机" class="headerlink" title="5.1 构造方法的格式和执行时机"></a>5.1 构造方法的格式和执行时机</h3><ul><li><strong>格式注意 :</strong><ul><li> 方法名与类名相同，大小写也要一致</li><li>没有返回值类型，连void都没有</li><li>没有具体的返回值（不能由retrun带回结果数据）</li></ul></li><li><strong>执行时机 ：</strong><ul><li>创建对象的时候调用，每创建一次对象，就会执行一次构造方法</li><li>不能手动调用构造方法</li></ul></li><li><strong>示例代码：</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-构造方法的作用"><a href="#5-2-构造方法的作用" class="headerlink" title="5.2 构造方法的作用"></a>5.2 构造方法的作用</h3><ul><li>用于给对象的数据（属性）进行初始化</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        格式:               1. 方法名需要跟类名相同, 大小写也要一致               2. 没有返回值类型, 连void都没有               3. 没有具体的返回值(不能由return带回具体的结果)     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 如果一个类中没有编写任何构造方法, 系统将会提供一个默认的无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 如果手动编写了构造方法, 系统就不会再提供默认的无参数构造方法了</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是Student类的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStudent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-构造方法的注意事项"><a href="#5-3-构造方法的注意事项" class="headerlink" title="5.3 构造方法的注意事项"></a>5.3 构造方法的注意事项</h3><p><strong>构造方法的创建 :</strong> </p><p>​    如果没有定义构造方法，系统将给出一个默认的无参数构造方法</p><p>​    如果定义了构造方法，系统将不再提供默认的构造方法</p><p><strong>构造方法的创建 :</strong> </p><p>​    如果没有定义构造方法，系统将给出一个默认的无参数构造方法如果定义了构造方法，系统将不再提供默认的构造方法</p><p><strong>推荐的使用方式 :</strong> </p><p>​    无论是否使用，都手动书写无参数构造方法，和带参数构造方法</p><h3 id="5-4-标准类的代码编写和使用"><a href="#5-4-标准类的代码编写和使用" class="headerlink" title="5.4 标准类的代码编写和使用"></a>5.4 标准类的代码编写和使用</h3><p><strong>代码 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    JavaBean类: 封装数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStudent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 无参数构造方法创建对象, 通过setXxx方法给成员变量进行赋值</span>        Student stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 通过带参数构造方法, 直接给属性进行赋值</span>        Student stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay06之Debug&amp;基础练习</title>
      <link href="/2022/07/19/036-javaday06-debug-ji-chu-lian-xi/"/>
      <url>/2022/07/19/036-javaday06-debug-ji-chu-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Debug模式"><a href="#1-Debug模式" class="headerlink" title="1.Debug模式"></a>1.Debug模式</h2><h3 id="1-1-什么是Debug模式"><a href="#1-1-什么是Debug模式" class="headerlink" title="1.1 什么是Debug模式"></a>1.1 什么是Debug模式</h3><p>是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。</p><h3 id="1-2-Debug介绍与操作流程"><a href="#1-2-Debug介绍与操作流程" class="headerlink" title="1.2 Debug介绍与操作流程"></a>1.2 Debug介绍与操作流程</h3><ul><li><p>如何加断点</p><ul><li>选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可</li></ul></li><li><p>如何运行加了断点的程序</p><ul><li>在代码区域右键Debug执行</li></ul></li><li><p>看哪里</p><ul><li><p>看Debugger窗口</p></li><li><p>看Console窗口</p></li></ul></li><li><p>点哪里</p><ul><li>点Step Into (F7)这个箭头，也可以直接按F7</li></ul></li><li><p>如何删除断点</p><ul><li><p>选择要删除的断点，单击鼠标左键即可</p></li><li><p>如果是多个断点，可以每一个再点击一次。也可以一次性全部删除</p></li></ul></li></ul><h2 id="2-进制的介绍与书写格式"><a href="#2-进制的介绍与书写格式" class="headerlink" title="2. 进制的介绍与书写格式"></a>2. 进制的介绍与书写格式</h2><h3 id="2-1-进制的介绍与书写格式"><a href="#2-1-进制的介绍与书写格式" class="headerlink" title="2.1 进制的介绍与书写格式"></a>2.1 进制的介绍与书写格式</h3><p>代码 : </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        十进制：Java中，数值默认都是10进制，不需要加任何修饰。        二进制：数值前面以0b开头，b大小写都可以。        八进制：数值前面以0开头。        十六进制：数值前面以0x开头，x大小写都可以。        注意: 书写的时候, 虽然加入了进制的标识, 但打印在控制台展示的都是十进制数据.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二进制数据0b10的十进制表示为:"</span> <span class="token operator">+</span> <span class="token number">0b10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"八进制数据010的十进制表示为:"</span> <span class="token operator">+</span> <span class="token number">010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"十六进制数据0x10的十进制表示为:"</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-任意进制到十进制的转换"><a href="#2-2-任意进制到十进制的转换" class="headerlink" title="2.2 任意进制到十进制的转换"></a>2.2 任意进制到十进制的转换</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191523576.png" alt="1590937009286"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191523982.png" alt="1590937024104"> </p><h3 id="2-3-进制转换-十进制到任意进制转换"><a href="#2-3-进制转换-十进制到任意进制转换" class="headerlink" title="2.3 进制转换-十进制到任意进制转换"></a>2.3 进制转换-十进制到任意进制转换</h3><p>​    <strong>2.3.1 : 十进制到二进制的转换</strong></p><p>​    公式：除基取余使用源数据，不断的除以基数（几进制，基数就是几）得到余数，直到商为0，再将余数倒着拼起来即可。</p><p>​    需求：将十进制数字11，转换为2进制。</p><p>​    实现方式：源数据为11，使用11不断的除以基数，也就是2，直到商为0。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191523085.png" alt="1590936221838"></p><p>​    <strong>2.3.2 : 十进制到十六进制的转换</strong></p><p>​    公式：除基取余使用源数据，不断的除以基数（几进制，基数就是几）得到余数，直到商为0，再将余数倒着拼起来即可。</p><p>​    需求：将十进制数字60，转换为16进制。</p><p>​    实现方式：源数据为60，使用60不断的除以基数，也就是16，直到商为0。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191523749.png" alt="1590936342865"></p><p>​    结论：十进制到任意进制的转换</p><p>​    公式：除基取余使用源数据，不断的除以基数（几进制，基数就是几）得到余数，直到商为0，再将余数倒着    拼起来即可</p><h3 id="2-4-快速进制转换法"><a href="#2-4-快速进制转换法" class="headerlink" title="2.4  快速进制转换法"></a>2.4  快速进制转换法</h3><p>​    8421码：</p><p>​    8421码又称BCD码，是BCD代码中最常用的一种BCD： (Binary-Coded Decimal‎) 二进制码十进制数在这种编码方式中，每一位二进制值的1都是代表一个固定数值，把每一位的1代表的十进制数加起来得到的结果就是它所代表的十进制数。</p><p>​    <img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191523871.png" alt="1590936493344"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191523543.png" alt="1590936529957"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191523629.png" alt="1590936548060"></p><h3 id="2-5-原码反码补码"><a href="#2-5-原码反码补码" class="headerlink" title="2.5  原码反码补码"></a>2.5  原码反码补码</h3><p>前言 : 计算机中的数据，都是以二进制补码的形式在运算，而补码则是通过反码和原码推算出来的</p><p>**原码 **:（可直观看出数据大小）</p><p>就是二进制定点表示法，即最高位为符号位，【0】表示正，【1】表示负，其余位表示数值的大小。</p><p>通过一个字节表示+7和-7，代码：byte b1 = 7;   byte b2 = -7;一个字节等于8个比特位，也就是8个二进制位    </p><p>0(符号位)    0000111     </p><p>1(符号位)    0000111</p><p><strong>反码 :</strong> 正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。</p><p><strong>补码 :</strong> （数据以该状态进行运算）正数的补码与其原码相同；负数的补码是在其反码的末位加1。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191524999.png" alt="1590936726746"></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191524159.png" alt="1590936745245"></p><h3 id="2-6-位运算-基本位运算符"><a href="#2-6-位运算-基本位运算符" class="headerlink" title="2.6 位运算-基本位运算符"></a>2.6 位运算-基本位运算符</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        位运算:            位运算符指的是二进制位的运算，先将十进制数转成二进制后再进行运算。            在二进制位运算中，1表示true，0表示false。             &amp; 位与 : 遇false则false, 遇0则0                        00000000 00000000 00000000 00000110     // 6的二进制                     &amp;  00000000 00000000 00000000 00000010     // 2的二进制                    -----------------------------------------                        00000000 00000000 00000000 00000010     // 结果: 2             | 位或 : 遇true则true, 遇1则1             ^ 位异或 : 相同为false, 不同为true             ~ 取反 : 全部取反, 0变1, 1变0  (也包括符号位)                    00000000 00000000 00000000 00000110         // 6的二进制补码                  ~ 11111111 11111111 11111111 11111001                  -                                   1         // -1求反码                   ------------------------------------                    11111111 11111111 11111111 11111000         // 反码推原码                    10000000 00000000 00000000 00000111         // -7     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-位运算-位移运算符"><a href="#2-7-位运算-位移运算符" class="headerlink" title="2.7 位运算-位移运算符"></a>2.7 位运算-位移运算符</h3><p><strong>位运算概述 :</strong>  位运算符指的是二进制位的运算，先将十进制数转成二进制后再进行运算。在二进制位运算中，1表示true，0表示false。</p><p><strong>位运算符介绍 :</strong> <img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191524455.png" alt="1590937235620"></p><p><strong>代码 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*       位移运算符:               &lt;&lt; 有符号左移运算，二进制位向左移动, 左边符号位丢弃, 右边补齐0                        运算规律: 向左移动几位, 就是乘以2的几次幂                                12 &lt;&lt; 2                                (0)0000000 00000000 00000000 000011000  // 12的二进制       -----------------------------------------------------------------------------               >> 有符号右移运算，二进制位向右移动, 使用符号位进行补位                        运算规律: 向右移动几位, 就是除以2的几次幂                                000000000 00000000 00000000 0000001(1)  // 3的二进制       -----------------------------------------------------------------------------                >>> 无符号右移运算符,  无论符号位是0还是1，都补0                                010000000 00000000 00000000 00000110  // -6的二进制     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 24</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 48</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        ^ 运算符的特点                一个数, 被另外一个数, 异或两次, 该数本身不变     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">^</span> <span class="token number">5</span> <span class="token operator">^</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-基础练习"><a href="#3-基础练习" class="headerlink" title="3.基础练习"></a>3.基础练习</h2><h3 id="3-1-数据交换"><a href="#3-1-数据交换" class="headerlink" title="3.1 数据交换"></a>3.1 数据交换</h3><p><strong>案例需求</strong></p><p>​    已知两个整数变量a = 10，b = 20，使用程序实现这两个变量的数据交换<br>​        最终输出a = 20，b = 10;</p><p><strong>代码实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：已知两个整数变量a = 10，b = 20，使用程序实现这两个变量的数据交换        最终输出a = 20，b = 10;        思路：        1. 定义一个三方变量temp，将a原本记录的值，交给temp记录 （a的值，不会丢了）        2. 使用 a 变量记录 b 的值，（第一步交换完毕，b的值也丢不了了）        3. 使用 b 变量记录 temp的值，也就是a原本的值 （交换完毕）        4. 输出 a 和 b 变量即可     */</span>    <span class="token comment" spellcheck="true">/*        动态初始化格式：            数据类型[][] 变量名 = new 数据类型[m][n];            m表示这个二维数组，可以存放多少个一维数组            n表示每一个一维数组，可以存放多少个元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将a原本记录的值，交给temp记录 （a的值，不会丢了）</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用 a 变量记录 b 的值，（第一步交换完毕，b的值也丢不了了）</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 b 变量记录 temp的值，也就是a原本的值 （交换完毕）</span>        b <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出 a 和 b 变量即可</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-数组反转【应用】"><a href="#3-2-数组反转【应用】" class="headerlink" title="3.2 数组反转【应用】"></a>3.2 数组反转【应用】</h3><p><strong>案例需求 :</strong> </p><p>​    已知一个数组 arr = {19, 28, 37, 46, 50}; 用程序实现把数组中的元素值交换，</p><p>​    交换后的数组 arr = {50, 46, 37, 28, 19}; 并在控制台输出交换后的数组元素</p><p><strong>实现步骤 :</strong> </p><pre><code> 1. 定义两个变量, start和end来表示开始和结束的指针.          </code></pre><ol start="2"><li>确定交换条件, start &lt; end 允许交换          </li><li>循环中编写交换逻辑代码         </li><li>每一次交换完成, 改变两个指针所指向的索引 start++, end–          </li><li>循环结束后, 遍历数组并打印, 查看反转后的数组</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：已知一个数组 arr = {19, 28, 37, 46, 50}; 用程序实现把数组中的元素值交换，          交换后的数组 arr = {50, 46, 37, 28, 19}; 并在控制台输出交换后的数组元素。        步骤:              1. 定义两个变量, start和end来表示开始和结束的指针.              2. 确定交换条件, start &lt; end 允许交换              3. 循环中编写交换逻辑代码              4. 每一次交换完成, 改变两个指针所指向的索引 start++, end--              5. 循环结束后, 遍历数组并打印, 查看反转后的数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  1. 定义两个变量, start和end来表示开始和结束的指针.</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  2. 确定交换条件, start &lt; end 允许交换</span>        <span class="token comment" spellcheck="true">// 4. 每一次交换完成, 改变两个指针所指向的索引 start++, end--</span>        <span class="token comment" spellcheck="true">// for(int start = 0, end = arr.length -1; start &lt; end; start++, end--)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> start <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">,</span> end<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3. 循环中编写交换逻辑代码</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-二维数组概述"><a href="#3-3-二维数组概述" class="headerlink" title="3.3 二维数组概述"></a>3.3 二维数组概述</h3><p>​    <strong>概述 :</strong>  二维数组也是一种容器，不同于一维数组，该容器存储的都是一维数组容器</p><h3 id="3-4-二维数组动态初始化"><a href="#3-4-二维数组动态初始化" class="headerlink" title="3.4 二维数组动态初始化"></a>3.4 二维数组动态初始化</h3><pre class=" language-java"><code class="language-java">动态初始化格式：数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>m表示这个二维数组，可以存放多少个一维数组n表示每一个一维数组，可以存放多少个元素</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Array</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        动态初始化格式：            数据类型[][] 变量名 = new 数据类型[m][n];            m表示这个二维数组，可以存放多少个一维数组            n表示每一个一维数组，可以存放多少个元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据类型[][] 变量名 = new 数据类型[m][n];</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            [[I@10f87f48            @ : 分隔符            10f87f48 : 十六进制内存地址            I : 数组中存储的数据类型            [[ : 几个中括号就代表的是几维数组         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            二维数组存储一维数组的时候, 存储的是一维数组的内存地址         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向二维数组中存储元素</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从二维数组中取出元素并打印</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-二维数组访问元素的细节问题"><a href="#3-5-二维数组访问元素的细节问题" class="headerlink" title="3.5  二维数组访问元素的细节问题"></a>3.5  二维数组访问元素的细节问题</h3><p>问题 :  二维数组中存储的是一维数组, 那能不能存入 [提前创建好的一维数组] 呢 ?</p><p>答 : 可以的</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2Array</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        问题: 二维数组中存储的是一维数组, 那能不能存入 [提前创建好的一维数组] 呢 ?        答 : 可以的     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr2<span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr3<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-6-二维数组静态初始化"><a href="#3-6-二维数组静态初始化" class="headerlink" title="3.6 二维数组静态初始化"></a>3.6 二维数组静态初始化</h3><pre><code> **完整格式 :** 数据类型[][] 变量名 = new 数据类型[][]{ {元素1, 元素2...} , {元素1, 元素2...}  **简化格式 :**  数据类型[][] 变量名 = { {元素1, 元素2...} , {元素1, 元素2...} ...};</code></pre><p>**代码实现 : **</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3Array</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        完整格式：数据类型[][] 变量名 = new 数据类型[][]{ {元素1, 元素2...} , {元素1, 元素2...} ...};        简化格式: 数据类型[][] 变量名 = { {元素1, 元素2...} , {元素1, 元素2...} ...};     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-7-二维数组遍历"><a href="#3-7-二维数组遍历" class="headerlink" title="3.7 二维数组遍历"></a>3.7 二维数组遍历</h3><p><strong>需求 :</strong>   </p><p>​    已知一个二维数组</p><p>​    遍历该数组，取出所有元素并打印</p><p><strong>步骤 :</strong> </p><pre><code> 1. 遍历二维数组，取出里面每一个一维数组 2. 在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素</code></pre><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求:            已知一个二维数组 arr = {{11, 22, 33}, {33, 44, 55}};            遍历该数组，取出所有元素并打印        步骤:            1. 遍历二维数组，取出里面每一个一维数组            2. 在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 遍历二维数组，取出里面每一个一维数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.println(arr[i]);</span>            <span class="token comment" spellcheck="true">// 2. 在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素</span>            <span class="token comment" spellcheck="true">//int[] temp = arr[i];</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-8-二维数组求和"><a href="#3-8-二维数组求和" class="headerlink" title="3.8 二维数组求和"></a>3.8 二维数组求和</h3><p><strong>需求 :</strong></p><pre><code> 某公司季度和月份统计的数据如下：单位(万元)第一季度：22,66,44第二季度：77,33,88第三季度：25,45,65第四季度：11,66,99</code></pre><p> <strong>步骤 :</strong>    </p><ol><li>定义求和变量，准备记录最终累加结果</li><li>使用二维数组来存储数据，每个季度是一个一维数组，再将4个一维数组装起来</li><li>遍历二维数组，获取所有元素，累加求和</li><li>输出最终结果</li></ol><p><strong>代码实现 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求:            某公司季度和月份统计的数据如下：单位(万元)            第一季度：22,66,44            第二季度：77,33,88            第三季度：25,45,65            第四季度：11,66,99        步骤:            1. 定义求和变量，准备记录最终累加结果            2. 使用二维数组来存储数据，每个季度是一个一维数组，再将4个一维数组装起来            3. 遍历二维数组，获取所有元素，累加求和            4. 输出最终结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 定义求和变量，准备记录最终累加结果</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 使用二维数组来存储数据，每个季度是一个一维数组，再将4个一维数组装起来</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 遍历二维数组，获取所有元素，累加求和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4. 输出最终结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay05之方法</title>
      <link href="/2022/07/19/035-javaday05-fang-fa/"/>
      <url>/2022/07/19/035-javaday05-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-方法概述"><a href="#1-方法概述" class="headerlink" title="1. 方法概述"></a>1. 方法概述</h2><h3 id="1-1-方法的概念"><a href="#1-1-方法的概念" class="headerlink" title="1.1 方法的概念"></a>1.1 方法的概念</h3><p>​    方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p><ul><li>注意：<ul><li>方法必须先创建才可以使用，该过程成为方法定义</li><li>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</li></ul></li></ul><h2 id="2-方法的定义和调用"><a href="#2-方法的定义和调用" class="headerlink" title="2. 方法的定义和调用"></a>2. 方法的定义和调用</h2><h3 id="2-1-无参数方法定义和调用"><a href="#2-1-无参数方法定义和调用" class="headerlink" title="2.1 无参数方法定义和调用"></a>2.1 无参数方法定义和调用</h3><ul><li><p>定义格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名 <span class="token punctuation">(</span>   <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体;</span><span class="token punctuation">}</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span> <span class="token punctuation">(</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体;</span><span class="token punctuation">}</span></code></pre></li><li><p>调用格式：</p><pre class=" language-java"><code class="language-java">方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>注意：</p><p>​    方法必须先定义，后调用，否则程序将报错</p></li></ul><h3 id="2-2-方法的调用过程"><a href="#2-2-方法的调用过程" class="headerlink" title="2.2 方法的调用过程"></a>2.2 方法的调用过程</h3><ul><li>总结：每个方法在被调用执行的时候，都会进入栈内存，并且拥有自己独立的内存空间，方法内部代码调用完毕之后，会从栈内存中弹栈消失。</li></ul><h3 id="2-3-方法练习-奇偶数判断"><a href="#2-3-方法练习-奇偶数判断" class="headerlink" title="2.3 方法练习-奇偶数判断"></a>2.3 方法练习-奇偶数判断</h3><ul><li>需求：判断一个数是奇数还是偶数</li><li>代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Method</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        带参数方法的定义格式:                public static void 方法名  ( 参数 )  { … … }                public static void 方法名  ( 数据类型 变量名 )  { … … }        带参数方法的调用格式:                方法名 ( 参数 ) ;                方法名 ( 变量名/常量值 ) ;        tips: 参数可以是一个, 也可以是多个.        需求: 判断一个数是奇数还是偶数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-带参数方法的定义和调用"><a href="#3-带参数方法的定义和调用" class="headerlink" title="3. 带参数方法的定义和调用"></a>3. 带参数方法的定义和调用</h2><h3 id="3-1-带参数方法定义和调用"><a href="#3-1-带参数方法定义和调用" class="headerlink" title="3.1 带参数方法定义和调用"></a>3.1 带参数方法定义和调用</h3><ul><li><p>定义格式：</p><p>参数：由数据类型和变量名组成 -  数据类型 变量名</p><p>参数范例：int a</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名 <span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名 <span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> 参数<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ul><li><p>注意：</p><pre><code>  方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错  方法定义时，多个参数之间使用逗号( ，)分隔</code></pre></li></ul></li><li><p>调用格式：</p><pre class=" language-java"><code class="language-java">方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>；方法名<span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错 </li></ul></li></ul><h3 id="3-2-形参和实参"><a href="#3-2-形参和实参" class="headerlink" title="3.2 形参和实参"></a>3.2 形参和实参</h3><ol><li>形参：方法定义中的参数</li></ol><p>​          等同于变量定义格式，例如：int number</p><ol start="2"><li>实参：方法调用中的参数</li></ol><p>​          等同于使用变量或常量，例如： 10  number</p><h3 id="3-3-带参数方法的练习-打印n-m之间所有的奇数"><a href="#3-3-带参数方法的练习-打印n-m之间所有的奇数" class="headerlink" title="3.3 带参数方法的练习-打印n-m之间所有的奇数"></a>3.3 带参数方法的练习-打印n-m之间所有的奇数</h3><ul><li><p>需求：设计一个方法（print） 用于打印 n 到 m 之间所有的奇数</p></li><li><p>思路：</p><p>​    1：定义方法，名称为print<br>​        2：为方法添加两个int类型的形参，准备接受调用者传递过来的实参<br>​        3：方法中设计for循环，循环从n开始，到m结束<br>​        4：循环中加入if判断，是奇数，则打印<br>​        5：main方法中调用print方法，传入两个实际参数</p></li><li><p>代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>method2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2Method</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 5：main方法中调用print方法，传入两个实际参数</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1：定义方法，名称为print</span>    <span class="token comment" spellcheck="true">// 2：为方法添加两个int类型的形参，准备接受调用者传递过来的实参</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">"到"</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">"之间的奇数为:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3：方法中设计for循环，循环从n开始，到m结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4：循环中加入if判断，是奇数，则打印</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-带返回值方法的定义和调用"><a href="#4-带返回值方法的定义和调用" class="headerlink" title="4. 带返回值方法的定义和调用"></a>4. 带返回值方法的定义和调用</h2><h3 id="4-1-带返回值方法定义和调用（掌握）"><a href="#4-1-带返回值方法定义和调用（掌握）" class="headerlink" title="4.1 带返回值方法定义和调用（掌握）"></a>4.1 带返回值方法定义和调用（掌握）</h3><ul><li><p>定义格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> 数据类型 方法名 <span class="token punctuation">(</span> 参数 <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> 数据 <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>范例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span> <span class="token keyword">int</span> number <span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token number">100</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>注意：<ul><li>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</li></ul></li></ul></li><li><p>调用格式</p><pre class=" language-java"><code class="language-java">方法名 <span class="token punctuation">(</span> 参数 <span class="token punctuation">)</span> <span class="token punctuation">;</span>数据类型 变量名 <span class="token operator">=</span> 方法名 <span class="token punctuation">(</span> 参数 <span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li><li><p>范例</p><pre class=" language-java"><code class="language-java"><span class="token function">isEvenNumber</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">boolean</span>  flag <span class="token operator">=</span>  <span class="token function">isEvenNumber</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ul><li>注意：<ul><li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li></ul></li></ul></li></ul><h3 id="4-2-带返回值方法的练习-求两个数的最大值-应用"><a href="#4-2-带返回值方法的练习-求两个数的最大值-应用" class="headerlink" title="4.2 带返回值方法的练习-求两个数的最大值(应用)"></a>4.2 带返回值方法的练习-求两个数的最大值(应用)</h3><ul><li><p>需求：设计一个方法可以获取两个数的较大值，数据来自于参数</p></li><li><p>思路：</p><ol><li>定义一个方法，声明两个形参接收计算的数值，求出结果并返回</li><li>使用 if 语句 得出 a 和 b 之间的最大值，根据情况return具体结果</li><li>在main()方法中调用定义好的方法并使用 【 变量保存 】</li></ol></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/*        需求：设计一个方法可以获取两个数的较大值，数据来自于参数        1. 定义一个方法，声明两个形参接收计算的数值，求出结果并返回        2. 使用 if 语句 得出 a 和 b 之间的最大值，根据情况return具体结果        3. 在main()方法中调用定义好的方法并使用 【 变量保存 】     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 3. 在main()方法中调用定义好的方法并使用 【 变量保存 】</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出调用</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> result<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方法可以获取两个数的较大值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="5-方法的注意事项"><a href="#5-方法的注意事项" class="headerlink" title="5. 方法的注意事项"></a>5. 方法的注意事项</h2><h3 id="5-1-方法的通用格式（掌握）"><a href="#5-1-方法的通用格式（掌握）" class="headerlink" title="5.1 方法的通用格式（掌握）"></a>5.1 方法的通用格式（掌握）</h3><ul><li><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> 返回值类型 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>   方法体<span class="token punctuation">;</span>    <span class="token keyword">return</span> 数据 <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>解释：</p><ul><li><p>public static     修饰符，目前先记住这个格式</p><p>返回值类型    方法操作完毕之后返回的数据的数据类型</p><p>​            如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p><p> 方法名        调用方法时候使用的标识</p><p> 参数        由数据类型和变量名组成，多个参数之间用逗号隔开</p><p> 方法体        完成功能的代码块</p><p> return        如果方法操作完毕，有数据返回，用于把数据返回给调用者</p></li></ul></li><li><p>定义方法时，要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意：</p><ul><li>void类型的方法，直接调用即可</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><h3 id="5-2-方法的注意事项"><a href="#5-2-方法的注意事项" class="headerlink" title="5.2 方法的注意事项"></a>5.2 方法的注意事项</h3><ul><li><p>方法不能嵌套定义</p><ul><li><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 这里会引发编译错误!!!</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</p><ul><li><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return 100; 编译错误，因为没有具体返回值类型</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(100); return语句后面不能跟数据或代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="6-方法重载"><a href="#6-方法重载" class="headerlink" title="6. 方法重载"></a>6. 方法重载</h2><h3 id="6-1-方法重载"><a href="#6-1-方法重载" class="headerlink" title="6.1 方法重载"></a>6.1 方法重载</h3><ul><li><p>方法重载概念</p><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同</li></ul></li><li><p>注意：</p><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></li><li><p>正确范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>错误范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*错误原因：重载与返回值无关*/</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*错误原因：这是两个类的两个fn方法*/</span>        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="6-2-方法重载练习"><a href="#6-2-方法重载练习" class="headerlink" title="6.2 方法重载练习"></a>6.2 方法重载练习</h3><ul><li><p>需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） </p></li><li><p>思路：</p><p>​    ①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数</p><p>​    ②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数</p><p>​    ③定义所有的重载方法，两个byte类型与两个short类型参数 </p><p>​    ④完成方法的调用，测试运行结果 </p></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>10L<span class="token punctuation">,</span> 20L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//int</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//byte</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">byte</span> a<span class="token punctuation">,</span> <span class="token keyword">byte</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//short</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">short</span> a<span class="token punctuation">,</span> <span class="token keyword">short</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"short"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//long</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="7-方法的参数传递"><a href="#7-方法的参数传递" class="headerlink" title="7. 方法的参数传递"></a>7. 方法的参数传递</h2><h3 id="7-1-方法参数传递基本类型（理解）"><a href="#7-1-方法参数传递基本类型（理解）" class="headerlink" title="7.1 方法参数传递基本类型（理解）"></a>7.1 方法参数传递基本类型（理解）</h3><ul><li><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>param<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*         方法参数传递为基本数据类型 :                传入方法中的, 是具体的数值.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法前:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">change</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法后:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        number <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>结论：</p><ul><li>基本数据类型的参数，形式参数的改变，不影响实际参数 </li></ul></li><li><p>结论依据：</p><ul><li>每个方法在栈内存中，都会有独立的栈空间，方法运行结束后就会弹栈消失</li></ul></li></ul><h3 id="7-2-方法参数传递引用类型"><a href="#7-2-方法参数传递引用类型" class="headerlink" title="7.2 方法参数传递引用类型"></a>7.2 方法参数传递引用类型</h3><ul><li><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>param<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*         方法参数传递为引用数据类型 :                传入方法中的, 是内存地址.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法前:"</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用change方法后:"</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>结论：</p><ul><li>对于引用类型的参数，形式参数的改变，影响实际参数的值 </li></ul></li><li><p>结论依据：</p><ul><li>引用数据类型的传参，传入的是地址值，内存中会造成两个引用指向同一个内存的效果，所以即使方法弹栈，堆内存中的数据也已经是改变后的结果 </li></ul></li></ul><h3 id="7-3-数组遍历"><a href="#7-3-数组遍历" class="headerlink" title="7.3 数组遍历"></a>7.3 数组遍历</h3><ul><li><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] </p></li><li><p>思路：</p><ul><li><p>因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);</p><p>System.out.println(“内容”); 输出内容并换行</p><p>System.out.print(“内容”); 输出内容不换行</p><p>System.out.println(); 起到换行的作用</p></li><li><p>定义一个数组，用静态初始化完成数组元素初始化</p></li><li><p>定义一个方法，用数组遍历通用格式对数组进行遍历</p></li><li><p>用新的输出语句修改遍历操作</p></li><li><p>调用遍历方法</p></li></ul></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]        思路：            1.定义一个数组，用静态初始化完成数组元素初始化            2.定义一个方法，对数组进行遍历            3.遍历打印的时候，数据不换行            4.调用遍历方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.定义一个数组，用静态初始化完成数组元素初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.调用遍历方法</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"另外一段代码逻辑 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        2.定义一个方法，对数组进行遍历        1, 参数           int[] arr        2, 返回值类型      void     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果满足条件, 说明是最后一个元素, 最后一个元素, 特殊处理</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 3.遍历打印的时候，数据不换行</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="7-4-数组最大值"><a href="#7-4-数组最大值" class="headerlink" title="7.4 数组最大值"></a>7.4 数组最大值</h3><ul><li><p>需求：设计一个方法用于获取数组中元素的最大值 </p></li><li><p>思路：</p><ul><li>①定义一个数组，用静态初始化完成数组元素初始化</li><li>②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了</li><li>③调用获取最大值方法，用变量接收返回结果</li><li>④把结果输出在控制台</li></ul></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：设计一个方法用于获取数组中元素的最大值        思路：            1.定义一个数组，用静态初始化完成数组元素初始化            2.定义一个方法，用来获取数组中的最大值            3.调用获取最大值方法，用变量接收返回结果            4.把结果输出在控制台     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.定义一个数组，用静态初始化完成数组元素初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.调用获取最大值方法，用变量接收返回结果</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  4.把结果输出在控制台</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        2.定义一个方法，用来获取数组中的最大值        1, 参数       int[] arr        2, 返回值类型  int     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="7-5-方法同时获取数组最大值和最小值"><a href="#7-5-方法同时获取数组最大值和最小值" class="headerlink" title="7.5 方法同时获取数组最大值和最小值"></a>7.5 方法同时获取数组最大值和最小值</h3><ul><li><p>需求：设计一个方法，该方法能够同时获取数组的最大值，和最小值</p></li><li><p>注意: return语句, 只能带回一个结果.</p></li><li><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：设计一个方法，该方法能够同时获取数组的最大值，和最小值        注意: return语句, 只能带回一个结果.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maxAndMin <span class="token operator">=</span> <span class="token function">getMaxAndMin</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxAndMin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxAndMin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMaxAndMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maxAndMin <span class="token operator">=</span> <span class="token punctuation">{</span>min<span class="token punctuation">,</span> max<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxAndMin<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay04之IDEA&amp;数组</title>
      <link href="/2022/07/19/034-javaday04-idea-shu-zu/"/>
      <url>/2022/07/19/034-javaday04-idea-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="第一部分-IDEA开发工具"><a href="#第一部分-IDEA开发工具" class="headerlink" title="第一部分 : IDEA开发工具"></a>第一部分 : IDEA开发工具</h2><p><strong>参见 ：IEDA的安装请参考文件夹PPT中的 04_IDEA.ppt</strong></p><h2 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a><strong>IDEA</strong>常用快捷键</h2><table><thead><tr><th align="left"><strong>快捷键</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td align="left">psvm + 回车</td><td>快速生成main方法</td></tr><tr><td align="left">sout + 回车</td><td>快速生成输出语句</td></tr><tr><td align="left">Ctrl  + alt + L</td><td>格式化代码</td></tr><tr><td align="left">Alt + enter</td><td>代码修正提示</td></tr><tr><td align="left">Alt + 1</td><td>打开 \ 隐藏工程目录结构</td></tr><tr><td align="left">Alt +  4</td><td>打开 \ 隐藏控制台</td></tr><tr><td align="left">Ctrl + D</td><td>向下复制一行</td></tr><tr><td align="left">Ctrl  + X</td><td>剪切当前行</td></tr><tr><td align="left">Ctrl  + /</td><td>批量加入单行注释，再按一次就是取消</td></tr><tr><td align="left">Ctrl  + shift + /</td><td>批量加入多行注释，再按一次就是取消</td></tr><tr><td align="left">Alt +  shift + ↑</td><td>上移当前行</td></tr><tr><td align="left">Alt +  shift + ↓</td><td>下移当前行</td></tr></tbody></table><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><h3 id="1-1-数组介绍"><a href="#1-1-数组介绍" class="headerlink" title="1.1 数组介绍"></a>1.1 数组介绍</h3><p>​    数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 </p><h3 id="1-2-数组的定义格式"><a href="#1-2-数组的定义格式" class="headerlink" title="1.2 数组的定义格式"></a>1.2 数组的定义格式</h3><h4 id="1-2-1-第一种格式"><a href="#1-2-1-第一种格式" class="headerlink" title="1.2.1 第一种格式"></a>1.2.1 第一种格式</h4><p>​    数据类型[] 数组名</p><p>​    示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span></code></pre><h4 id="1-2-2-第二种格式"><a href="#1-2-2-第二种格式" class="headerlink" title="1.2.2 第二种格式"></a>1.2.2 第二种格式</h4><p>​    数据类型 数组名[]</p><p>​    示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="1-3-数组的动态初始化"><a href="#1-3-数组的动态初始化" class="headerlink" title="1.3 数组的动态初始化"></a>1.3 数组的动态初始化</h3><h4 id="1-3-1-什么是动态初始化"><a href="#1-3-1-什么是动态初始化" class="headerlink" title="1.3.1 什么是动态初始化"></a>1.3.1 什么是动态初始化</h4><p>​    数组动态初始化就是只给定数组的长度，由系统给出默认初始化值</p><h4 id="1-3-2-动态初始化格式"><a href="#1-3-2-动态初始化格式" class="headerlink" title="1.3.2 动态初始化格式"></a>1.3.2 动态初始化格式</h4><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="1-3-3-动态初始化格式详解"><a href="#1-3-3-动态初始化格式详解" class="headerlink" title="1.3.3 动态初始化格式详解"></a>1.3.3 动态初始化格式详解</h4><ul><li><p>等号左边：</p><ul><li><p> int:数组的数据类型</p></li><li><p> []:代表这是一个数组</p></li><li><p>  arr:代表数组的名称</p></li></ul></li><li><p>等号右边：</p><ul><li>  new:为数组开辟内存空间</li><li>  int:数组的数据类型</li><li>  []:代表这是一个数组</li><li>  5:代表数组的长度</li></ul></li></ul><p><strong>代码 :</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>array<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2Array</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        数组的动态初始化:                        在初始化的时候, 需要手动指定数组的长度, 系统会为数组容器分配初始值.        动态初始化格式:                        数据类型[] 数组名 = new 数据类型[数组的长度];        注意:                        打印数组变量的时候, 会打印出数组的内存地址        [I@10f87f48 :                        @ : 分隔符                        [ : 当前的空间是一个数组类型                        I : 当前数组容器中所存储的数据类型                        10f87f48 : 十六进制内存地址                                0 1 2 3 4 5 6 7 8 9 a b c d e f     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据类型[] 数组名 = new 数据类型[数组的长度];</span>        <span class="token comment" spellcheck="true">// 通过new关键字创建了一个int类型的数组容器, 该容器可以存储5个int类型的整数, 该容器被arr数组变量所记录</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// [I@10f87f48</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// [B@b4c966a</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-数组元素访问"><a href="#1-4-数组元素访问" class="headerlink" title="1.4 数组元素访问"></a>1.4 数组元素访问</h3><h4 id="1-4-1-什么是索引"><a href="#1-4-1-什么是索引" class="headerlink" title="1.4.1 什么是索引"></a>1.4.1 什么是索引</h4><p>​    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。</p><p>​    这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。     </p><h4 id="1-4-2访问数组元素格式"><a href="#1-4-2访问数组元素格式" class="headerlink" title="1.4.2访问数组元素格式"></a>1.4.2访问数组元素格式</h4><pre class=" language-java"><code class="language-java">数组名<span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="1-4-3示例代码"><a href="#1-4-3示例代码" class="headerlink" title="1.4.3示例代码"></a>1.4.3示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>array<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3ArrayIndex</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        数组动态初始化:                初始化的时候, 手动指定数组长度, 系统会为数组容器分配初始值.        数组的元素访问格式:                数组名[索引]                索引: 数组中数据的编号方式, 编号从0开始                作用: 访问数组容器中的空间位置        注意:                数组在创建完毕后, 即使没有赋值, 也可以取出, 但取出的元素都是默认初始化值.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 0 1 2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组的内存地址  [I@10f87f48</span>        <span class="token comment" spellcheck="true">// 数组名[索引]  访问数组容器中的空间位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 0  系统自动分配的默认初始化值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组名[索引]</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-内存分配"><a href="#1-5-内存分配" class="headerlink" title="1.5 内存分配"></a>1.5 内存分配</h3><h4 id="1-5-1-内存概述"><a href="#1-5-1-内存概述" class="headerlink" title="1.5.1 内存概述"></a>1.5.1 内存概述</h4><p>​    内存是计算机中的重要原件，临时存储区域，作用是运行程序。</p><p>​    我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。</p><p>​    必须放进内存中才能运行，运行完毕后会清空内存。 </p><p>​    Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p><h4 id="1-5-2-java中的内存分配"><a href="#1-5-2-java中的内存分配" class="headerlink" title="1.5.2 java中的内存分配"></a>1.5.2 java中的内存分配</h4><ul><li>目前我们只需要记住两个内存，分别是：栈内存和堆内存</li></ul><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，和我们开发无关。</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，和我们开发无关。</td></tr><tr><td>方法区</td><td>存储可以运行的class文件。</td></tr><tr><td>堆内存</td><td>存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td></tr></tbody></table><h3 id="1-6-Java内存分配-一个数组内存图"><a href="#1-6-Java内存分配-一个数组内存图" class="headerlink" title="1.6 Java内存分配-一个数组内存图"></a>1.6 Java内存分配-一个数组内存图</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191518436.png" alt="1591007817165"></p><h3 id="1-7-两个数组内存图"><a href="#1-7-两个数组内存图" class="headerlink" title="1.7 两个数组内存图"></a>1.7 两个数组内存图</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191518164.png" alt="1591007925899"></p><h3 id="1-8-多个数组指向相同内存图"><a href="#1-8-多个数组指向相同内存图" class="headerlink" title="1.8 多个数组指向相同内存图"></a>1.8 多个数组指向相同内存图</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207191518012.png" alt="1591007957052"></p><h3 id="1-9-数组的静态初始化"><a href="#1-9-数组的静态初始化" class="headerlink" title="1.9 数组的静态初始化"></a>1.9 数组的静态初始化</h3><h4 id="1-9-1-什么是静态初始化"><a href="#1-9-1-什么是静态初始化" class="headerlink" title="1.9.1 什么是静态初始化"></a>1.9.1 什么是静态初始化</h4><p>​    在创建数组时，直接将元素确定    </p><h4 id="1-9-2-静态初始化格式"><a href="#1-9-2-静态初始化格式" class="headerlink" title="1.9.2 静态初始化格式"></a>1.9.2 静态初始化格式</h4><ul><li><p>完整版格式</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>简化版格式</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="1-9-3示例代码"><a href="#1-9-3示例代码" class="headerlink" title="1.9.3示例代码"></a>1.9.3示例代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>array2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Array</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        数组静态初始化 : 初始化时指定每个数组元素的初始值，由系统决定数组长度        完整格式:                    数据类型[] 数组名 = new 数据类型[]{数据1,数据2,数据3...};        简化格式:                    数据类型[] 数组名 = {数据1,数据2,数据3...};     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据类型[] 数组名 = new 数据类型[]{数据1,数据2,数据3...};</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据类型[] 数组名 = {数据1,数据2,数据3...};</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-10-数组操作的两个常见问题"><a href="#1-10-数组操作的两个常见问题" class="headerlink" title="1.10 数组操作的两个常见问题"></a>1.10 数组操作的两个常见问题</h3><h4 id="1-10-1-索引越界异常"><a href="#1-10-1-索引越界异常" class="headerlink" title="1.10.1 索引越界异常"></a>1.10.1 索引越界异常</h4><ul><li><p>出现原因</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。</p><p>程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 </p></li><li><p>解决方案</p><p>将错误的索引修改为正确的索引范围即可！</p></li></ul><h4 id="1-10-2-空指针异常"><a href="#1-10-2-空指针异常" class="headerlink" title="1.10.2 空指针异常"></a>1.10.2 空指针异常</h4><ul><li><p>出现原因</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把null赋值给数组</span>        arr <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，空指针异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p></li><li><p>解决方案</p><p>给数组一个真正的堆内存空间引用即可！</p></li></ul><h3 id="1-11-数组遍历"><a href="#1-11-数组遍历" class="headerlink" title="1.11 数组遍历"></a>1.11 数组遍历</h3><ul><li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用通用的遍历格式</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-12-数组获取最大值"><a href="#1-12-数组获取最大值" class="headerlink" title="1.12 数组获取最大值"></a>1.12 数组获取最大值</h3><ul><li><p>最大值获取：从数组的所有元素中找出最大值。</p></li><li><p>实现思路：</p><ul><li>定义变量，保存数组0索引上的元素</li><li>遍历数组，获取出数组中的每个元素</li><li>将遍历到的元素和保存数组0索引上值的变量进行比较</li><li>如果数组元素的值大于了变量的值，变量记录住新的值</li><li>数组循环遍历结束，变量保存的就是数组中的最大值 </li></ul></li><li><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2Array</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求: 从数组中查找最大值                int[] arr = {12,45,98,73,60};        实现步骤:                1. 假设数组中的第一个元素为最大值                2. 遍历数组, 获取每一个元素, 准备进行比较                3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值                4. 循环结束后, 打印最大值.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 假设数组中的第一个元素为最大值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 遍历数组, 获取每一个元素, 准备进行比较</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//  4. 循环结束后, 打印最大值.</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max:"</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-13-数组元素求和"><a href="#1-13-数组元素求和" class="headerlink" title="1.13 数组元素求和"></a>1.13 数组元素求和</h3><ul><li><p>需求：键盘录入5个整数，存储到数组中，并对数组求和</p></li><li><p>思路：</p><pre><code>1.创建键盘录入对象，准备键盘录入2.定义一个求和变量，准备记录累加后的结果3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值4.将键盘录入的数值存储到数组中5.遍历数组，取出每一个元素，并求和6.输出总和</code></pre></li><li><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3Array</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：键盘录入5个整数，存储到数组中，并对数组求和        思路：            1.创建键盘录入对象，准备键盘录入            2.定义一个求和变量，准备记录累加后的结果            3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值            4.将键盘录入的数值存储到数组中            5.遍历数组，取出每一个元素，并求和            6.输出总和     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建键盘录入对象，准备键盘录入</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.定义一个求和变量，准备记录累加后的结果</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.将键盘录入的数值存储到数组中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//arr[i] = 10;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 5.遍历数组，取出每一个元素，并求和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 6.输出总和</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum:"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-14-数组基本查找【应用】"><a href="#1-14-数组基本查找【应用】" class="headerlink" title="1.14 数组基本查找【应用】"></a>1.14 数组基本查找【应用】</h3><ul><li><p>需求：</p><pre><code>        已知一个数组 arr = {19, 28, 37, 46, 50}; 键盘录入一个数据，查找该数据在数组中的索引，并在控        制台输出找到的索引值。</code></pre></li><li><p>思路：</p><pre><code>    1.定义一个数组，用静态初始化完成数组元素的初始化    2.键盘录入要查找的数据，用一个变量接收    3.定义一个索引变量，初始值为-1    4.遍历数组，获取到数组中的每一个元素    5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环    6.输出索引变量</code></pre></li><li><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.定义一个数组，用静态初始化完成数组元素的初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.键盘录入要查找的数据，用一个变量接收</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您要查找的元素:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.定义一个索引变量，初始值为-1</span>        <span class="token comment" spellcheck="true">// 假设要查找的数据, 在数组中就是不存在的</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.遍历数组，获取到数组中的每一个元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果值相同，就把该值对应的索引赋值给索引变量，并结束循环</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//  6.输出索引变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="1-15-评委打分【应用】"><a href="#1-15-评委打分【应用】" class="headerlink" title="1.15 评委打分【应用】"></a>1.15 评委打分【应用】</h3><ul><li><p>需求：在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。</p><pre><code>            选手的最后得分为：去掉一个最高分和一个最低分后 的4个评委平均值 (不考虑小数部分)。</code></pre></li><li><p>思路：</p><pre><code>    1.定义一个数组，用动态初始化完成数组元素的初始化，长度为6    2.键盘录入评委分数    3.由于是6个评委打分，所以，接收评委分数的操作，用循环    4.求出数组最大值    5.求出数组最小值    6.求出数组总和    7.按照计算规则进行计算得到平均分    8.输出平均分</code></pre></li><li><p>代码实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.定义一个数组，用动态初始化完成数组元素的初始化，长度为6</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.键盘录入评委分数</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  3.由于是6个评委打分，所以，接收评委分数的操作，用循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个评委的打分:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 合法的分值</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非法的分值</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的打分输入有误, 请检查是否是0-100之间的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.求出数组最大值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 5.求出数组最小值</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 6.求出数组总和</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 7.按照计算规则进行计算得到平均分</span>        <span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> max <span class="token operator">-</span> min <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8.输出平均分</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay03之switch&amp;循环语句</title>
      <link href="/2022/07/14/033-javaday03-switch-xun-huan-yu-ju/"/>
      <url>/2022/07/14/033-javaday03-switch-xun-huan-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="1-switch语句"><a href="#1-switch语句" class="headerlink" title="1. switch语句"></a>1. switch语句</h2><h3 id="1-1-分支语句switch语句"><a href="#1-1-分支语句switch语句" class="headerlink" title="1.1 分支语句switch语句"></a>1.1 分支语句switch语句</h3><ul><li><p>格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        语句体<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        语句体<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>执行流程：</p><ul><li>首先计算出表达式的值 </li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 </li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 </li></ul></li></ul><h3 id="1-2-switch案例-减肥计划"><a href="#1-2-switch案例-减肥计划" class="headerlink" title="1.2 switch案例-减肥计划"></a>1.2 switch案例-减肥计划</h3><ul><li>需求：键盘录入星期数，显示今天的减肥活动</li></ul><pre><code>周一：跑步  周二：游泳  周三：慢走  周四：动感单车周五：拳击  周六：爬山  周日：好好吃一顿 </code></pre><ul><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 键盘录入星期数据，使用变量接收</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 多情况判断，采用switch语句实现</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>week<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3. 在不同的case中，输出对应的减肥计划</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"慢走"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动感单车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拳击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爬山"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好吃一顿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-switch语句case穿透"><a href="#1-3-switch语句case穿透" class="headerlink" title="1.3 switch语句case穿透"></a>1.3 switch语句case穿透</h3><ul><li>概述 : 如果switch语句中,case省略了break语句, 就会开始case穿透</li><li>需求 : 键盘录入星期数，输出工作日、休息日 (1-5)工作日，(6-7)休息日</li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*case穿透是如何产生的?                如果switch语句中,case省略了break语句, 就会开始case穿透.                现象：            当开始case穿透，后续的case就不会具有匹配效果，内部的语句都会执行            直到看见break，或者将整体switch语句执行完毕，才会结束。*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入星期数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span>week<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工作日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"休息日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h2><h3 id="2-1-循环语句-for循环"><a href="#2-1-循环语句-for循环" class="headerlink" title="2.1 循环语句-for循环"></a>2.1 循环语句-for循环</h3><ul><li><p>循环：</p><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 </p></li><li><p>for循环格式：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化语句<span class="token punctuation">;</span>条件判断语句<span class="token punctuation">;</span>条件控制语句<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>格式解释：</p><ul><li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li><li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul></li><li><p>执行流程：</p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p></li></ul><h3 id="2-2-for循环案例-输出数据1-5和5-1"><a href="#2-2-for循环案例-输出数据1-5和5-1" class="headerlink" title="2.2 for循环案例-输出数据1-5和5-1"></a>2.2 for循环案例-输出数据1-5和5-1</h3><ul><li>需求：在控制台输出1-5和5-1的数据 </li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求：输出数据1-5</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需求：输出数据5-1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-for循环案例-求1-5数据和"><a href="#2-3-for循环案例-求1-5数据和" class="headerlink" title="2.3 for循环案例-求1-5数据和"></a>2.3 for循环案例-求1-5数据和</h3><ul><li>需求：求1-5之间的数据和，并把求和结果在控制台输出 </li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从1开始到5结束的数据，使用循环结构完成</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将反复进行的事情写入循环结构内部</span>             <span class="token comment" spellcheck="true">// 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*                sum += i;    sum = sum + i;                第一次：sum = sum + i = 0 + 1 = 1;                第二次：sum = sum + i = 1 + 2 = 3;                第三次：sum = sum + i = 3 + 3 = 6;                第四次：sum = sum + i = 6 + 4 = 10;                第五次：sum = sum + i = 10 + 5 = 15;            */</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当循环执行完毕时，将最终数据打印出来</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-5之间的数据和是："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>本题要点：<ul><li>今后遇到的需求中，如果带有求和二字，请立即联想到求和变量</li><li>求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的</li></ul></li></ul><h3 id="2-4-for循环案例-求1-100偶数和"><a href="#2-4-for循环案例-求1-100偶数和" class="headerlink" title="2.4 for循环案例-求1-100偶数和"></a>2.4 for循环案例-求1-100偶数和</h3><ul><li>需求：求1-100之间的偶数和，并把求和结果在控制台输出 }</li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当循环执行完毕时，将最终数据打印出来</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和是："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-for循环案例-水仙花数"><a href="#2-5-for循环案例-水仙花数" class="headerlink" title="2.5 for循环案例-水仙花数"></a>2.5 for循环案例-水仙花数</h3><ul><li>需求：在控制台输出所有的“水仙花数” </li><li>解释：什么是水仙花数？<ul><li>水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数<ul><li>例如<code>153  3*3*3 + 5*5*5 + 1*1*1 = 153</code></li></ul></li></ul></li><li>思路：<ol><li>获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取</li><li>获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数</li></ol></li><li>示例代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在计算之前获取三位数中每个位上的值</span>            <span class="token keyword">int</span> ge <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> shi <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bai <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ge<span class="token operator">*</span>ge<span class="token operator">*</span>ge <span class="token operator">+</span> shi<span class="token operator">*</span>shi<span class="token operator">*</span>shi <span class="token operator">+</span> bai<span class="token operator">*</span>bai<span class="token operator">*</span>bai <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//输出满足条件的数字就是水仙花数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-for循环案例-每行打印2个水仙花数-统计"><a href="#2-6-for循环案例-每行打印2个水仙花数-统计" class="headerlink" title="2.6 for循环案例-每行打印2个水仙花数(统计)"></a>2.6 for循环案例-每行打印2个水仙花数(统计)</h3><ul><li>需求：在控制台输出所有的“水仙花数”，要求每行打印2个</li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo6For</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：在控制台输出所有的“水仙花数”，要求每行打印2个        System.out.print (打印内容);    打印后不换行        System.out.println(打印内容);    打印后换行        分析:                        1. 定义变量count，用于保存“打印过”的数量，初始值为0            2. 在判定和打印水仙花数的过程中，拼接空格, 但不换行，并在打印后让count变量+1，记录打印过的数量            3. 在每一次count变量+1后，判断是否到达了2的倍数，是的话，换行。    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 定义变量count，用于保存“打印过”的数量，初始值为0</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> ge <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> shi <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bai <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>ge<span class="token operator">*</span>ge<span class="token operator">*</span>ge <span class="token operator">+</span> shi<span class="token operator">*</span>shi<span class="token operator">*</span>shi <span class="token operator">+</span> bai<span class="token operator">*</span>bai<span class="token operator">*</span>bai<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//  2. 在判定和打印水仙花数的过程中，拼接空格, 但不换行，并在打印后让count变量+1，记录打印过的数量</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 3. 在每一次count变量+1后，判断是否到达了2的倍数，是的话，换行</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>本题要点：<ul><li>今后如果需求带有统计xxx，请先想到计数器变量</li><li>计数器变量定义的位置，必须在循环外部</li></ul></li></ul><h2 id="3-while循环"><a href="#3-while循环" class="headerlink" title="3. while循环"></a>3. while循环</h2><h3 id="3-1-循环语句-while循环"><a href="#3-1-循环语句-while循环" class="headerlink" title="3.1 循环语句-while循环"></a>3.1 循环语句-while循环</h3><ul><li><p>while循环完整格式：</p><pre class=" language-java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>条件判断语句<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>while循环执行流程：</p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求：在控制台输出5次"HelloWorld"</span>        <span class="token comment" spellcheck="true">//for循环实现</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//while循环实现</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-while循环案例-珠穆朗玛峰"><a href="#3-2-while循环案例-珠穆朗玛峰" class="headerlink" title="3.2 while循环案例-珠穆朗玛峰"></a>3.2 while循环案例-珠穆朗玛峰</h3><ul><li>需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?</li><li>示例代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个计数器，初始值为0</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义纸张厚度</span>        <span class="token keyword">double</span> paper <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义珠穆朗玛峰的高度</span>        <span class="token keyword">int</span> zf <span class="token operator">=</span> <span class="token number">8844430</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环</span>        <span class="token comment" spellcheck="true">//折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>paper <span class="token operator">&lt;=</span> zf<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span>            paper <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在循环中执行累加，对应折叠了多少次</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印计数器的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要折叠："</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-循环细节"><a href="#4-循环细节" class="headerlink" title="4. 循环细节"></a>4. 循环细节</h2><h3 id="4-1-循环语句-dowhile循环"><a href="#4-1-循环语句-dowhile循环" class="headerlink" title="4.1 循环语句-dowhile循环"></a>4.1 循环语句-dowhile循环</h3><ul><li><p>完整格式：</p><pre class=" language-java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件判断语句<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>执行流程：</p><p>① 执行初始化语句</p><p>② 执行循环体语句</p><p>③ 执行条件控制语句</p><p>④ 执行条件判断语句，看其结果是true还是false</p><p>如果是false，循环结束</p><p>如果是true，继续执行</p><p>⑤ 回到②继续</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoWhileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求：在控制台输出5次"HelloWorld"</span>        <span class="token comment" spellcheck="true">//for循环实现</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//do...while循环实现</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-三种循环的区别"><a href="#4-2-三种循环的区别" class="headerlink" title="4.2 三种循环的区别"></a>4.2 三种循环的区别</h3><ul><li>三种循环的区别<ul><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li><li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li></ul></li><li>for循环和while的区别<ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul></li><li>死循环（无限循环）的三种格式<ol><li>for(;;){}</li><li>while(true){}</li><li>do {} while(true);</li></ol></li></ul><h3 id="4-3-死循环"><a href="#4-3-死循环" class="headerlink" title="4.3 死循环"></a>4.3 死循环</h3><ul><li><p>死循环格式        </p><pre><code>for死循环格式 :for(;;){}while死循环格式 :while(true){}do..while死循环格式 :do{}while(true);</code></pre></li><li><p>死循环案例</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    问题: 死循环有应用场景吗?                        例如: 键盘录入一个1-100之间的整数                                顾虑: 键盘录入是用户操作的, 用户就可能会出现一些误操作的现象        */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        for(;;){            System.out.println("我停不下来了~");        }        */</span>    <span class="token comment" spellcheck="true">/*        while(true){            System.out.println("我停不下来了~");        }        */</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我停不下来了~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看看我能被执行吗?~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无法访问的语句</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-跳转控制语句"><a href="#4-4-跳转控制语句" class="headerlink" title="4.4 跳转控制语句"></a>4.4 跳转控制语句</h3><ul><li>跳转控制语句（break）<ul><li>跳出循环，结束循环</li></ul></li><li>跳转控制语句（continue）<ul><li>跳过本次循环，继续下次循环</li></ul></li><li>注意： continue只能在循环中进行使用！</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Continue</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        continue : 跳过某次循环体内容的执行                注意：使用是基于条件控制, 在循环内部使用.                需求: 模拟电梯上行的过程 1-24层, 4层不停.    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"层到了~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2Break</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        break : 终止循环体内容的执行        注意：使用是基于条件控制的                break语句只能在循环和switch中进行使用.                        需求: 模拟20岁工作到80岁, 60岁退休.    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束整个循环</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"岁正在上班"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：程序运行后，用户可多次查询星期对应的减肥计划，直到输入0，程序结束                步骤:                        1. 不明确用户操作几次, 使用死循环包裹业务逻辑            2. 匹配到0的时候，使用break结束循环死循环    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                lo<span class="token operator">:</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您要查看的星期数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(如无需继续查看,请输入0退出程序)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 1. 键盘录入星期数据，使用变量接收</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2. 多情况判断，采用switch语句实现</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>week<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 3. 在不同的case中，输出对应的减肥计划</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢您的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span> lo<span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"慢走"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动感单车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拳击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爬山"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好吃一顿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5-Random"><a href="#5-Random" class="headerlink" title="5. Random"></a>5. Random</h2><h3 id="5-1-Random产生随机数（掌握）"><a href="#5-1-Random产生随机数（掌握）" class="headerlink" title="5.1 Random产生随机数（掌握）"></a>5.1 Random产生随机数（掌握）</h3><ul><li><p>概述：</p><ul><li>Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能<ul><li>API后续课程详细讲解，现在可以简单理解为Java已经写好的代码</li></ul></li></ul></li><li><p>使用步骤：</p><ol><li><p>导入包</p><p>import java.util.Random;</p></li><li><p>创建对象</p><p>Random r = new Random();</p></li><li><p>产生随机数</p><p>int num = r.nextInt(10);</p><p>解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19</p></li></ol></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Random</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        Random : 产生随机数                1. 导包    : import java.util.Random;                    导包的动作必须出现在类定义的上面        2. 创建对象 : Random r = new Random();                    上面这个格式里面，r 是变量名，可以变，其他的都不允许变        3. 获取随机数 : int number = r.nextInt(10);    //获取数据的范围：[0,10) 包括0,不包括10                    上面这个格式里面，number是变量名，可以变，数字10可以变。其他的都不允许变                需求: 产生随机数1-10之间的    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 创建对象</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3. 获取随机数</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1-10</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-Random练习-猜数字（应用）"><a href="#5-3-Random练习-猜数字（应用）" class="headerlink" title="5.3 Random练习-猜数字（应用）"></a>5.3 Random练习-猜数字（应用）</h3><ul><li><p>需求：</p><p>程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？</p><p>当猜错的时候根据不同情况给出相应的提示</p><p>A. 如果猜的数字比真实数字大，提示你猜的数据大了</p><p>B. 如果猜的数字比真实数字小，提示你猜的数据小了</p><p>C. 如果猜的数字与真实数字相等，提示恭喜你猜中了</p></li><li><p>示例代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        需求：程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？            当猜错的时候根据不同情况给出相应的提示            如果猜的数字比真实数字大，提示你猜的数据大了            如果猜的数字比真实数字小，提示你猜的数据小了            如果猜的数字与真实数字相等，提示恭喜你猜中了                1. 准备Random和Scanner对象, 分别用于产生随机数和键盘录入        2. 使用Random产生一个1-100之间的数, 作为要猜的数        3. 键盘录入用户猜的的数据        4. 使用录入的数据(用户猜的数据)和随机数(要猜的数据)进行比较, 并给出提示                5. 以上内容需要多次进行, 但无法预估用户输入几次可以猜测正确, 使用while(true)死循环包裹        6. 猜对之后, break结束.    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 准备Random和Scanner对象, 分别用于产生随机数和键盘录入</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 使用Random产生一个1-100之间的数, 作为要猜的数</span>        <span class="token keyword">int</span> randomNum <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 5. 以上内容需要多次进行, 但无法预估用户输入几次可以猜测正确, 使用while(true)死循环包裹</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3. 键盘录入用户猜的的数据</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您猜的数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4. 使用录入的数据(用户猜的数据)和随机数(要猜的数据)进行比较, 并给出提示</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> randomNum<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜大了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> randomNum<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜小了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 6. 猜对之后, break结束.</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜,猜中了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢您的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay02之java基础语法</title>
      <link href="/2022/07/14/032-javaday02-java-ji-chu-yu-fa/"/>
      <url>/2022/07/14/032-javaday02-java-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="day02-Java基础语法"><a href="#day02-Java基础语法" class="headerlink" title="day02 - Java基础语法"></a>day02 - Java基础语法</h1><h2 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1 类型转换"></a>1 类型转换</h2><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。</p><h3 id="1-1-隐式转换-理解"><a href="#1-1-隐式转换-理解" class="headerlink" title="1.1 隐式转换(理解)"></a>1.1 隐式转换(理解)</h3><p>​    把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将int类型的10直接赋值给double类型</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出10.0</span></code></pre><p>​    类型从小到大关系图：</p><p>​    <img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141723898.png"></p><p>说明：</p><ol><li>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span><span class="token comment" spellcheck="true">// 修改为:</span><span class="token keyword">int</span> num <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者：</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b1 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>boolean类型不能与其他基本数据类型相互转换。</li></ol><h3 id="1-2-强制转换-理解"><a href="#1-2-强制转换-理解" class="headerlink" title="1.2 强制转换(理解)"></a>1.2 强制转换(理解)</h3><p>​    把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。</p><p>​    强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p><p>​    例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token number">5.5</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> num1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将double类型的num1强制转换为int类型</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出5（小数位直接舍弃）</span></code></pre><h3 id="1-3-类型转换案例-理解"><a href="#1-3-类型转换案例-理解" class="headerlink" title="1.3 类型转换案例(理解)"></a>1.3 类型转换案例(理解)</h3><p>案例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">byte</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误。因为两个byte变量相加，会先提升为int类型</span><span class="token keyword">byte</span> d <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正确。常量优化机制</span></code></pre><p>常量优化机制：</p><p>​    在编译时，整数常量的计算会直接算出结果，并且会自动判断该结果是否在byte取值范围内，</p><p>​        在：编译通过</p><pre><code>   不在：编译失败</code></pre><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><h3 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h3><p>//////式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。</p><p>​                    不同运算符连接的表达式体现的是不同类型的表达式。</p><p>举例说明：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></code></pre><p>  +：是运算符，并且是算术运算符。</p><p>  a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。</p><h4 id="2-1-2-算术运算符-应用"><a href="#2-1-2-算术运算符-应用" class="headerlink" title="2.1.2 算术运算符(应用)"></a>2.1.2 算术运算符(应用)</h4><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>参看小学一年级</td></tr><tr><td>-</td><td>减</td><td>参看小学一年级</td></tr><tr><td>*</td><td>乘</td><td>参看小学二年级，与“×”相同</td></tr><tr><td>/</td><td>除</td><td>参看小学二年级，与“÷”相同</td></tr><tr><td>%</td><td>取余</td><td>获取的是两个数据做除法的余数</td></tr></tbody></table><p>注意：</p><ol><li><p>/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p></li><li><p>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果1</span></code></pre><h4 id="2-1-3-字符的“-”操作（理解）"><a href="#2-1-3-字符的“-”操作（理解）" class="headerlink" title="2.1.3 字符的“+”操作（理解）"></a>2.1.3 字符的“+”操作（理解）</h4><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p><p>‘a’  –  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p><p>‘A’  –  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p><p>‘0’  –  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span><span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出98，97 + 1 = 98</span><span class="token keyword">char</span> ch2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出66，65 + 1 = 66</span><span class="token keyword">char</span> ch3 <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出49，48 + 1 = 49</span></code></pre><p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</p><p>提升规则：</p><p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p><p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p><p>​       等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度</span><span class="token keyword">int</span> i3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 应该使用int接收</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b1 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者将结果强制转换为byte类型</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span><span class="token keyword">double</span> num3 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用double接收，因为num1会自动提升为double类型</span></code></pre><h4 id="2-1-4-字符串的“-”操作（理解）"><a href="#2-1-4-字符串的“-”操作（理解）" class="headerlink" title="2.1.4 字符串的“+”操作（理解）"></a>2.1.4 字符串的“+”操作（理解）</h4><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"itheima"</span><span class="token operator">+</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：itheima666</span></code></pre><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">+</span> <span class="token string">"年黑马"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 输出：100年黑马</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"itheima"</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 输出：3itheima34</span><span class="token comment" spellcheck="true">// 可以使用小括号改变运算的优先级 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"itheima"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：3itheima7</span></code></pre><h4 id="2-1-5-数值拆分（应用）"><a href="#2-1-5-数值拆分（应用）" class="headerlink" title="2.1.5 数值拆分（应用）"></a>2.1.5 数值拆分（应用）</h4><p>需求：</p><p>​    键盘录入一个三位数，将其拆分为个位，十位，百位，打印在控制台</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1：使用Scanner键盘录入一个三位数</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个三位数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2：个位的计算：数值 % 10</span>        <span class="token keyword">int</span> ge <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 3：十位的计算：数值 / 10 % 10</span>        <span class="token keyword">int</span> shi <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4：百位的计算：数值 / 100</span>        <span class="token keyword">int</span> bai <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5：将个位, 十位, 百位拼接上正确的字符串, 打印即可</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整数"</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"个位为:"</span> <span class="token operator">+</span> ge<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整数"</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"十位为:"</span> <span class="token operator">+</span> shi<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整数"</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"百位为:"</span> <span class="token operator">+</span> bai<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-自增自减运算符（理解）"><a href="#2-2-自增自减运算符（理解）" class="headerlink" title="2.2 自增自减运算符（理解）"></a>2.2 自增自减运算符（理解）</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>–</td><td>自减</td><td>变量的值减1</td></tr></tbody></table><p>注意事项：</p><p>​    ++和– 既可以放在变量的后边，也可以放在变量的前边。</p><p>​    单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。</p><p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。</p><p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。</p><p>​    最常见的用法：单独使用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 单独使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// i:11</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 单独使用</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j:"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// j:11</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x:"</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y:"</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x:11，y:10</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">++</span>m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m:"</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", m:"</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// m:11，m:11</span></code></pre><p>练习：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token operator">++</span> <span class="token operator">+</span> x<span class="token operator">++</span> <span class="token operator">+</span> x<span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// y的值是多少？</span><span class="token comment" spellcheck="true">/*解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。所以整个式子应该是：int y = 10 + 11 + 12;输出结果为33。*/</span>注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！</code></pre><h3 id="2-3-赋值运算符（应用）"><a href="#2-3-赋值运算符（应用）" class="headerlink" title="2.3 赋值运算符（应用）"></a>2.3 赋值运算符（应用）</h3><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=10，将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table><p>注意：</p><p>扩展的赋值运算符隐含了强制类型转换。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度</span>s <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></code></pre><h3 id="2-4-关系运算符（应用）"><a href="#2-4-关系运算符（应用）" class="headerlink" title="2.4 关系运算符（应用）"></a>2.4 关系运算符（应用）</h3><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><p>注意事项：</p><p>​    关系运算符的结果都是boolean类型，要么是true，要么是false。</p><p>​    千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出false</span></code></pre><h3 id="2-5-逻辑运算符（应用）"><a href="#2-5-逻辑运算符（应用）" class="headerlink" title="2.5 逻辑运算符（应用）"></a>2.5 逻辑运算符（应用）</h3><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td>|</td><td>逻辑或</td><td>a|b，a和b都是false，结果为false，否则为true</td></tr><tr><td>^</td><td>逻辑异或</td><td>a^b，a和b结果不同为true，相同为false</td></tr><tr><td>!</td><td>逻辑非</td><td>!a，结果和a的结果正好相反</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义变量</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false &amp; false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true &amp; false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false &amp; true,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true &amp; true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false | false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true | false,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false | true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true | true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//^ “异或”，相同为false，不同为true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false ^ false,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true ^ false,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false ^ true,输出true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true ^ true,输出false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//! “非”，取反</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//!false，,输出true</span></code></pre><h3 id="2-6-短路逻辑运算符（理解）"><a href="#2-6-短路逻辑运算符（理解）" class="headerlink" title="2.6 短路逻辑运算符（理解）"></a>2.6 短路逻辑运算符（理解）</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>作用和|相同，但是有短路效果</td></tr></tbody></table><p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行。</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</p></li><li><p>逻辑或|，无论左边真假，右边都要执行。</p></li><li><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两个表达都会运算</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左边已经可以确定结果为false，右边不参与运算</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span></code></pre><h3 id="2-7-三元运算符（理解）"><a href="#2-7-三元运算符（理解）" class="headerlink" title="2.7 三元运算符（理解）"></a>2.7 三元运算符（理解）</h3><p>三元运算符语法格式：</p><pre class=" language-java"><code class="language-java">关系表达式 <span class="token operator">?</span> 表达式<span class="token number">1</span> <span class="token operator">:</span> 表达式<span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p><p>举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断 a>b 是否为真，如果为真取a的值，如果为假，取b的值</span></code></pre><h3 id="2-8-三元运算符案例-应用"><a href="#2-8-三元运算符案例-应用" class="headerlink" title="2.8 三元运算符案例(应用)"></a>2.8 三元运算符案例(应用)</h3><p>需求：</p><p>​    一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。</span>        <span class="token keyword">int</span> height1 <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height2 <span class="token operator">=</span> <span class="token number">210</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height3 <span class="token operator">=</span> <span class="token number">165</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span>        <span class="token keyword">int</span> tempHeight <span class="token operator">=</span> height1 <span class="token operator">></span> height2 <span class="token operator">?</span> height1 <span class="token operator">:</span> height2<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span>        <span class="token keyword">int</span> maxHeight <span class="token operator">=</span> tempHeight <span class="token operator">></span> height3 <span class="token operator">?</span> tempHeight <span class="token operator">:</span> height3<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4：输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"maxHeight:"</span> <span class="token operator">+</span> maxHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3. 流程控制语句"></a>3. 流程控制语句</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p><h3 id="3-1-流程控制语句分类-了解"><a href="#3-1-流程控制语句分类-了解" class="headerlink" title="3.1 流程控制语句分类(了解)"></a>3.1 流程控制语句分类(了解)</h3><p>​    顺序结构</p><p>​    分支结构(if, switch)</p><p>​    循环结构(for, while, do…while)</p><h3 id="3-2-顺序结构-了解"><a href="#3-2-顺序结构-了解" class="headerlink" title="3.2 顺序结构(了解)"></a>3.2 顺序结构(了解)</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><p>顺序结构执行流程图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141723967.png" alt="1545615769372"></p><h3 id="3-3-分支结构之if语句"><a href="#3-3-分支结构之if语句" class="headerlink" title="3.3 分支结构之if语句"></a>3.3 分支结构之if语句</h3><h4 id="3-3-1-if语句格式1（理解）"><a href="#3-3-1-if语句格式1（理解）" class="headerlink" title="3.3.1 if语句格式1（理解）"></a>3.3.1 if语句格式1（理解）</h4><pre class=" language-java"><code class="language-java">格式：<span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体</p><p>③如果关系表达式的值为false就不执行语句体</p><p>④继续执行后面的语句内容</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141723333.png" alt="1545616039363"></p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果年龄大于18岁, 就可以上网吧</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// int a = 10;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以上网吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-2-if语句格式2（理解）"><a href="#3-3-2-if语句格式2（理解）" class="headerlink" title="3.3.2 if语句格式2（理解）"></a>3.3.2 if语句格式2（理解）</h4><pre class=" language-java"><code class="language-java">格式：<span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体1</p><p>③如果关系表达式的值为false就执行语句体2</p><p>④继续执行后面的语句内容</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141723581.png" alt="1545616221283"></p><p>示例：奇偶数</p><p>​    任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2If</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 程序判断一个数, 是奇数还是偶数</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-3-if语句格式3（理解）"><a href="#3-3-3-if语句格式3（理解）" class="headerlink" title="3.3.3 if语句格式3（理解）"></a>3.3.3 if语句格式3（理解）</h4><pre class=" language-java"><code class="language-java">格式：<span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句体<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> …<span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行流程：</p><p>①首先计算关系表达式1的值</p><p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p><p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p><p>④…</p><p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141724821.png" alt="1545616667104"></p><p>示例：</p><p>​    定义一个在0<del>100之间的变量a, 90</del>100优秀，80<del>89良好，70</del>79中等，60<del>69及格，0</del>59请努力加油！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3If</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">69</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请努力加油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成绩有误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-4-if语句格式3案例（应用）"><a href="#3-3-4-if语句格式3案例（应用）" class="headerlink" title="3.3.4 if语句格式3案例（应用）"></a>3.3.4 if语句格式3案例（应用）</h4><p>需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。</p><p>分析：</p><p>​    ①小明的考试成绩未知，可以使用键盘录入的方式获取值</p><p>​    ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现</p><p>​    ③为每种判断设置对应的条件</p><p>​    ④为每种判断设置对应的奖励</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 使用Scanner录入考试成绩</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的成绩:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 判断成绩是否在合法范围内 0~100</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 合法成绩</span>            <span class="token comment" spellcheck="true">// 3. 在合法的语句块中判断成绩范围符合哪一个奖励</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">95</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自行车一辆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">94</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游乐场一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变形金刚一个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"挨顿揍, 这座城市又多了一个伤心的人~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非法的话, 给出错误提示</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的成绩输入有误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaDay01之java基础语法</title>
      <link href="/2022/07/14/031-javaday01-java-ji-chu-yu-fa/"/>
      <url>/2022/07/14/031-javaday01-java-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1. Java概述"></a>1. Java概述</h2><h3 id="1-1-Java语言背景介绍（了解）"><a href="#1-1-Java语言背景介绍（了解）" class="headerlink" title="1.1 Java语言背景介绍（了解）"></a>1.1 Java语言背景介绍（了解）</h3><p>语言：人与人交流沟通的表达方式</p><p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p><p>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言</p><p>Java之父：詹姆斯·高斯林（James Gosling）</p><p>2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：<a href="https://www.oracle.com/">https://www.oracle.com</a> </p><p>java语言的三个版本：</p><p>​    JavaSE:  Java 语言的（标准版），用于桌面应用的开发，是其他两个版本的基础</p><p>​    JavaME: Java 语言的（小型版），用于嵌入式消费类电子设备</p><p>​    JavaEE: Java 语言的（企业版），用于 Web 方向的网站开发</p><h3 id="1-2-Java语言跨平台原理（理解）"><a href="#1-2-Java语言跨平台原理（理解）" class="headerlink" title="1.2 Java语言跨平台原理（理解）"></a>1.2 Java语言跨平台原理（理解）</h3><p>Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。</p><h3 id="1-3-JRE和JDK（记忆）"><a href="#1-3-JRE和JDK（记忆）" class="headerlink" title="1.3 JRE和JDK（记忆）"></a>1.3 JRE和JDK（记忆）</h3><p>JVM（Java Virtual Machine），Java虚拟机</p><p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p><p>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p><h3 id="1-4-JDK的下载和安装（应用）"><a href="#1-4-JDK的下载和安装（应用）" class="headerlink" title="1.4 JDK的下载和安装（应用）"></a>1.4 JDK的下载和安装（应用）</h3><h4 id="1-4-1-下载"><a href="#1-4-1-下载" class="headerlink" title="1.4.1 下载"></a>1.4.1 下载</h4><p>通过官方网站获取JDK</p><p><a href="http://www.oracle.com/">http://www.oracle.com</a></p><p><strong>注意</strong>：针对不同的操作系统，需要下载对应版本的JDK。</p><h4 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h4><p>傻瓜式安装，下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理建议修改安装路径，将与开发相关的软件都安装到一个目录下，例如：E:\develop。</p><p><strong>注意</strong>：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。</p><h4 id="1-4-3-JDK的安装目录介绍"><a href="#1-4-3-JDK的安装目录介绍" class="headerlink" title="1.4.3 JDK的安装目录介绍"></a>1.4.3 JDK的安装目录介绍</h4><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td>conf</td><td>该路径下存放了JDK的相关配置文件。</td></tr><tr><td>include</td><td>该路径下存放了一些平台特定的头文件。</td></tr><tr><td>jmods</td><td>该路径下存放了JDK的各种模块。</td></tr><tr><td>legal</td><td>该路径下存放了JDK各模块的授权文档。</td></tr><tr><td>lib</td><td>该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table><h2 id="2-第一个演示程序"><a href="#2-第一个演示程序" class="headerlink" title="2. 第一个演示程序"></a>2. 第一个演示程序</h2><h3 id="2-1-常用DOS命令（应用）"><a href="#2-1-常用DOS命令（应用）" class="headerlink" title="2.1 常用DOS命令（应用）"></a>2.1 常用DOS命令（应用）</h3><p>在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。</p><p>1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。</p><p>2、常用命令及其作用</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\目录2...</td><td>进入多级目录。cd itheima\JavaSE</td></tr><tr><td>cd \</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h3 id="2-2-Path环境变量的配置（应用）"><a href="#2-2-Path环境变量的配置（应用）" class="headerlink" title="2.2 Path环境变量的配置（应用）"></a>2.2 Path环境变量的配置（应用）</h3><h4 id="2-2-1-为什么配置环境变量"><a href="#2-2-1-为什么配置环境变量" class="headerlink" title="2.2.1 为什么配置环境变量"></a>2.2.1 为什么配置环境变量</h4><p>开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。    </p><h3 id="2-3-HelloWorld案例（应用）"><a href="#2-3-HelloWorld案例（应用）" class="headerlink" title="2.3 HelloWorld案例（应用）"></a>2.3 HelloWorld案例（应用）</h3><p>HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。</p><p>各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h4 id="2-3-1-Java程序开发运行流程"><a href="#2-3-1-Java程序开发运行流程" class="headerlink" title="2.3.1 Java程序开发运行流程"></a>2.3.1 Java程序开发运行流程</h4><p>开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。</p><h4 id="2-3-2-HelloWorld案例的编写"><a href="#2-3-2-HelloWorld案例的编写" class="headerlink" title="2.3.2 HelloWorld案例的编写"></a>2.3.2 HelloWorld案例的编写</h4><p>1、新建文本文档文件，修改名称为HelloWorld.java。</p><p>2、用记事本打开HelloWorld.java文件，输写程序内容。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-3-HelloWorld案例的编译和运行"><a href="#2-3-3-HelloWorld案例的编译和运行" class="headerlink" title="2.3.3 HelloWorld案例的编译和运行"></a>2.3.3 HelloWorld案例的编译和运行</h4><p>存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。</p><blockquote><p>编译：javac 文件名.java</p><p>范例：javac HelloWorld.java</p><p>执行：java 类名</p><p>范例：java HelloWorld</p></blockquote><h3 id="2-4-HelloWorld案例详解（理解）"><a href="#2-4-HelloWorld案例详解（理解）" class="headerlink" title="2.4 HelloWorld案例详解（理解）"></a>2.4 HelloWorld案例详解（理解）</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141725974.jpg"></p><h3 id="2-5-HelloWorld案例常见问题（理解）"><a href="#2-5-HelloWorld案例常见问题（理解）" class="headerlink" title="2.5 HelloWorld案例常见问题（理解）"></a>2.5 HelloWorld案例常见问题（理解）</h3><h4 id="2-5-1-BUG"><a href="#2-5-1-BUG" class="headerlink" title="2.5.1 BUG"></a>2.5.1 BUG</h4><p>在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。</p><h4 id="2-5-2-BUG的解决"><a href="#2-5-2-BUG的解决" class="headerlink" title="2.5.2 BUG的解决"></a>2.5.2 BUG的解决</h4><p>1、具备识别BUG的能力：多看</p><p>2、具备分析BUG的能力：多思考，多查资料</p><p>3、具备解决BUG的能力：多尝试，多总结</p><h4 id="2-5-3-HelloWorld案例常见问题"><a href="#2-5-3-HelloWorld案例常见问题" class="headerlink" title="2.5.3 HelloWorld案例常见问题"></a>2.5.3 HelloWorld案例常见问题</h4><p>1、非法字符问题。Java中的符号都是英文格式的。</p><p>2、大小写问题。Java语言对大小写敏感（区分大小写）。</p><p>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p><p>4、编译命令后的java文件名需要带文件后缀.java</p><p>5、运行命令后的class文件名（类名）不带文件后缀</p><h3 id="2-6-Notepad-软件的安装和使用（应用）"><a href="#2-6-Notepad-软件的安装和使用（应用）" class="headerlink" title="2.6 Notepad++软件的安装和使用（应用）"></a>2.6 Notepad++软件的安装和使用（应用）</h3><h4 id="2-6-1-什么要使用Notepad-软件"><a href="#2-6-1-什么要使用Notepad-软件" class="headerlink" title="2.6.1 什么要使用Notepad++软件"></a>2.6.1 什么要使用Notepad++软件</h4><p>Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它是免费的。</p><h4 id="2-6-2-Notepad-软件安装"><a href="#2-6-2-Notepad-软件安装" class="headerlink" title="2.6.2 Notepad++软件安装"></a>2.6.2 Notepad++软件安装</h4><p>安装：傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\develop。</p><h4 id="2-6-3Notepad-软件配置"><a href="#2-6-3Notepad-软件配置" class="headerlink" title="2.6.3Notepad++软件配置"></a>2.6.3Notepad++软件配置</h4><p>安装完毕之后，为了使用方便，做一个简单的配置：修改默认语言和编码。</p><h2 id="3-java基础语法"><a href="#3-java基础语法" class="headerlink" title="3. java基础语法"></a>3. java基础语法</h2><h3 id="3-1-注释（理解）"><a href="#3-1-注释（理解）" class="headerlink" title="3.1 注释（理解）"></a>3.1 注释（理解）</h3><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种：</p><p>单行注释。单行注释的格式是使用//，从//开始至本行结尾的文字将作为注释文字。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这是单行注释文字</span></code></pre><p>多行注释。多行注释的格式是使用/* 和 */将一段较长的注释括起来。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*这是多行注释文字这是多行注释文字这是多行注释文字*/</span>注意：多行注释不能嵌套使用。</code></pre><p>文档注释。文档注释以<code>/**</code>开始，以<code>*/</code>结束。（以后讲）</p><h3 id="3-2-关键字（理解）"><a href="#3-2-关键字（理解）" class="headerlink" title="3.2 关键字（理解）"></a>3.2 关键字（理解）</h3><p>关键字是指被java语言赋予了特殊含义的单词。</p><p>关键字的特点：</p><p>​    关键字的字母全部小写。</p><p>​    常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。</p><h3 id="3-3-常量（应用）"><a href="#3-3-常量（应用）" class="headerlink" title="3.3 常量（应用）"></a>3.3 常量（应用）</h3><p>常量：在程序运行过程中，其值不可以发生改变的量。</p><p>Java中的常量分类：</p><p>​    字符串常量  用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等</p><p>​    整数常量  整数，例如：-10、0、88等</p><p>​    小数常量  小数，例如：-5.5、1.0、88.88等</p><p>​    字符常量  用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等</p><p>​    布尔常量  布尔值，表示真假，只有两个值true和false</p><p>​    空常量  一个特殊的值，空值，值为null</p><p>除空常量外，其他常量均可使用输出语句直接输出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出一个整数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出一个小数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出一个字符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出boolean值true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎来到黑马程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出字符串</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-变量的介绍-理解"><a href="#3-4-变量的介绍-理解" class="headerlink" title="3.4 变量的介绍(理解)"></a>3.4 变量的介绍(理解)</h3><p>变量的定义格式：</p><p>​    数据类型 变量名 = 数据值；</p><p>​    数据类型：为空间中存储的数据加入类型限制。整数？小数？</p><p>​    变量名：自己要为空间起的名字，没有难度</p><p>​    数据值： 空间中要存储的数值，没有难度</p><h3 id="3-5-数据类型（应用）"><a href="#3-5-数据类型（应用）" class="headerlink" title="3.5 数据类型（应用）"></a>3.5 数据类型（应用）</h3><h4 id="3-5-1-计算机存储单元"><a href="#3-5-1-计算机存储单元" class="headerlink" title="3.5.1 计算机存储单元"></a>3.5.1 计算机存储单元</h4><p>我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”，</p><p>通常用大写字母”B”表示，字节是由连续的8个位组成。</p><p>除了字节外还有一些常用的存储单位，其换算单位如下：</p><p>1B（字节） = 8bit</p><p>1KB = 1024B</p><p>1MB = 1024KB</p><p>1GB = 1024MB</p><p>1TB = 1024GB</p><h4 id="3-5-2-Java中的数据类型"><a href="#3-5-2-Java中的数据类型" class="headerlink" title="3.5.2 Java中的数据类型"></a>3.5.2 Java中的数据类型</h4><p>Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。</p><p>Java中的基本数据类型：</p><table><thead><tr><th align="left">数据类型</th><th>关键字</th><th>内存占用</th><th align="left">取值范围</th></tr></thead><tbody><tr><td align="left">整数类型</td><td>byte</td><td>1</td><td align="left">-128~127</td></tr><tr><td align="left"></td><td>short</td><td>2</td><td align="left">-32768~32767</td></tr><tr><td align="left"></td><td>int(默认)</td><td>4</td><td align="left">-2的31次方到2的31次方-1</td></tr><tr><td align="left"></td><td>long</td><td>8</td><td align="left">-2的63次方到2的63次方-1</td></tr><tr><td align="left">浮点类型</td><td>float</td><td>4</td><td align="left">负数：-3.402823E+38到-1.401298E-45                                                             正数：   1.401298E-45到3.402823E+38</td></tr><tr><td align="left"></td><td>double(默认)</td><td>8</td><td align="left">负数：-1.797693E+308到-4.9000000E-324                                              正数：4.9000000E-324   到1.797693E+308</td></tr><tr><td align="left">字符类型</td><td>char</td><td>2</td><td align="left">0-65535</td></tr><tr><td align="left">布尔类型</td><td>boolean</td><td>1</td><td align="left">true，false</td></tr></tbody></table><p>说明：</p><p>​    e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>​    在java中整数默认是int类型，浮点数默认是double类型。</p><h3 id="3-6-变量（应用）"><a href="#3-6-变量（应用）" class="headerlink" title="3.6 变量（应用）"></a>3.6 变量（应用）</h3><h4 id="3-6-1-变量的定义"><a href="#3-6-1-变量的定义" class="headerlink" title="3.6.1 变量的定义"></a>3.6.1 变量的定义</h4><p>变量：在程序运行过程中，其值可以发生改变的量。</p><p>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。</p><p>变量的定义格式：</p><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> 初始化值<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明变量并赋值</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者(扩展)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 先声明，后赋值（使用前赋值即可）</span>数据类型 变量名<span class="token punctuation">;</span>变量名 <span class="token operator">=</span> 初始化值<span class="token punctuation">;</span><span class="token keyword">double</span> money<span class="token punctuation">;</span>money <span class="token operator">=</span> <span class="token number">55.5</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以(扩展)</p><p>在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义int类型的变量a和b，中间使用逗号隔开</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明int类型的变量c和d，中间使用逗号隔开</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-6-2-变量的修改"><a href="#3-6-2-变量的修改" class="headerlink" title="3.6.2 变量的修改"></a>3.6.2 变量的修改</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//修改变量的值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>变量前面不加数据类型时，表示修改已存在的变量的值。</p><h3 id="3-7-变量的注意事项-理解"><a href="#3-7-变量的注意事项-理解" class="headerlink" title="3.7 变量的注意事项(理解)"></a>3.7 变量的注意事项(理解)</h3><ol><li>在同一对花括号中，变量名不能重复。</li><li>变量在使用之前，必须初始化（赋值）。</li><li>定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。</li><li>定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。</li></ol><h3 id="3-8-键盘录入（理解）"><a href="#3-8-键盘录入（理解）" class="headerlink" title="3.8 键盘录入（理解）"></a>3.8 键盘录入（理解）</h3><p>我们可以通过 Scanner 类来获取用户的输入。使用步骤如下：</p><p>1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> </code></pre><p>2、创建Scanner对象。</p><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建Scanner对象，sc表示变量名，其他均不可变</span></code></pre><p>3、接收数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示将键盘录入的值作为int数返回。</span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接收数据</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-9-标识符（理解）"><a href="#3-9-标识符（理解）" class="headerlink" title="3.9 标识符（理解）"></a>3.9 标识符（理解）</h3><p>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。</p><p>Java中标识符的组成规则：</p><p>​    由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。</p><p>​    不能使用java中的关键字作为标识符。    </p><p>​    标识符对大小写敏感（区分大小写）。</p><p>Java中标识符的命名约定：</p><p>​    小驼峰式命名：变量名、方法名</p><p>​        首字母小写，从第二个单词开始每个单词的首字母大写。</p><p>​    大驼峰式命名：类名</p><p>​        每个单词的首字母都大写。</p><p>​    另外，标识符的命名最好可以做到见名知意</p><p>​        例如：username、studentNumber等。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux版Pycharm2021.2.3安装教程</title>
      <link href="/2022/04/16/030-linux-ban-pycharm2021.2.3/"/>
      <url>/2022/04/16/030-linux-ban-pycharm2021.2.3/</url>
      
        <content type="html"><![CDATA[<p>1.在官网<a href="https://www.jetbrains.com/pycharm/download/#section=linux">Download PyCharm: Python IDE for Professional Developers by JetBrains</a>下载PyCharm</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141748239.png" alt="img"></p><p> 在这里选择Linux的社区版，这是免费的，即community</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141748277.png" alt="img"></p><p>2.把下载出来的文件放到<a href="https://so.csdn.net/so/search?q=ubuntu&amp;spm=1001.2101.3001.7020">ubuntu</a>的家目录的下载文件夹或者自建的软件文件夹下</p><p>终端切换到该文件夹下进行解压文件</p><pre class=" language-undefined"><code class="language-undefined">tar -zxvf pycharm-community-2021.2.3.tar.gz</code></pre><p>代码按包名的版本号自己改</p><p> 3.破解软件收费</p><p><a href="https://i80980.lanzoul.com/i6w6C07tq9da">linuxjihuo.zip - 蓝奏云</a></p><p>破解脚本是我花15大洋买的，现在免费开放。</p><p>将蓝奏云的所有文件解压后放到刚才Download下pycharm+版本号的文件夹下</p><p>给run.sh脚本添加权限</p><pre class=" language-perl"><code class="language-perl">chmod <span class="token number">777</span> run<span class="token operator">.</span>sh</code></pre><p>然后运行脚本</p><pre class=" language-undefined"><code class="language-undefined">sh run.sh</code></pre><p> <img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141748768.png" alt="img"></p><p> run.sh中画线的20是我加，因为他运行时终端报找不到****micool17/18/19的信息。然后我就自己改了。</p><p>4.下来就修改下配置文件<br>vi /etc/hosts<br>更改hosts文件（ etc/hosts ），添加一行代码：0.0.0.0 account.jetbrains.com</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141748794.png" alt="img"></p><p>5.让终端进入到解压好的文件的/bin目录下</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141748793.png" alt="img"></p><p> 用下面的命令进行安装</p><pre class=" language-undefined"><code class="language-undefined">sh pychram.sh</code></pre><p>6.在当前目录下配置pycharm的<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&amp;spm=1001.2101.3001.7020">环境变量</a><br>这里写图片描述<br>按i 键进入插入模式<br>在vim ~/.bashrc 后面加入以下两条目录路径<br>可用pwd查看路径为：/usr/local/bin/pycharm-2018.1.3<br>export PyCharm=/usr/local/bin/pycharm-2018.1.3 （后面这个部分的要根据自己当时的路径，在配置环境变量之前，可进入解压文件，命令pew查看地址，并copy，以防输错）<br>exportPATH=PATH<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202207141748091.png" alt="img"></p><p>7.刷新配置文件</p><p>source ~/.bashrc</p><p>8.当刷新成功后，可以在当前下的任意位置启动pycharm<br>启动指令： pycharm.sh</p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SketchBook2021安装及破解教程</title>
      <link href="/2022/04/11/028-an-zhuang-sketchbook/"/>
      <url>/2022/04/11/028-an-zhuang-sketchbook/</url>
      
        <content type="html"><![CDATA[<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="1、开始解压"><a href="#1、开始解压" class="headerlink" title="1、开始解压"></a>1、开始解压</h2><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956771.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></p><p>双击运行sketchbook Pro 2021程序，解压并打开下载的安装包，双击运行sketchbook Pro 2021程序，开始解压</p></li></ul><h2 id="2、选择解压路径"><a href="#2、选择解压路径" class="headerlink" title="2、选择解压路径"></a>2、选择解压路径</h2><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956766.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></p><p>根据需要更改解压的路径，默认是解压到C盘，然后点击确定</p></li></ul><h2 id="3、等待解压"><a href="#3、等待解压" class="headerlink" title="3、等待解压"></a>3、等待解压</h2><ul><li><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956212.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></li></ul><h2 id="4、点击安装"><a href="#4、点击安装" class="headerlink" title="4、点击安装"></a>4、点击安装</h2><ul><li><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956807.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></li></ul><h2 id="5、选择我接受，然后点击下一步"><a href="#5、选择我接受，然后点击下一步" class="headerlink" title="5、选择我接受，然后点击下一步"></a>5、选择我接受，然后点击下一步</h2><ul><li><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956531.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></li></ul><h2 id="6、选择安装路径"><a href="#6、选择安装路径" class="headerlink" title="6、选择安装路径"></a>6、选择安装路径</h2><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956613.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></p><p>根据需要修改软件安装路径，默认是安装在C盘，然后点击安装</p></li></ul><h2 id="7、等待安装"><a href="#7、等待安装" class="headerlink" title="7、等待安装"></a>7、等待安装</h2><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956439.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></p><p>等待安装</p></li></ul><h2 id="8、点击右上角的X关闭安装窗口"><a href="#8、点击右上角的X关闭安装窗口" class="headerlink" title="8、点击右上角的X关闭安装窗口"></a>8、点击右上角的X关闭安装窗口</h2><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956102.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></p><p>点击右上角的X关闭安装窗口</p></li></ul><h2 id="9、破解软件"><a href="#9、破解软件" class="headerlink" title="9、破解软件"></a>9、破解软件</h2><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956406.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></p><p>回到安装包文件夹，复制两个破解文件，粘贴到软件安装目录下替换目标文件，默认安装路径是C:\Program Files\Autodesk\Autodesk SketchBook Pro 2021</p></li></ul><h2 id="10回到桌面，双击图标打开软件，至此，软件破解成功"><a href="#10回到桌面，双击图标打开软件，至此，软件破解成功" class="headerlink" title="10回到桌面，双击图标打开软件，至此，软件破解成功"></a>10回到桌面，双击图标打开软件，至此，软件破解成功</h2><ul><li><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204110956659.png" alt="SketchBook Pro2021【SketchBook2021破解版】中文免费版安装图文教程、破解注册方法"></p><p>回到桌面，双击图标打开软件，至此，软件破解成功</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day10（下）之Python综合案例</title>
      <link href="/2022/03/03/026-python-ji-chu-10-xia/"/>
      <url>/2022/03/03/026-python-ji-chu-10-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="一、系统需求分析"><a href="#一、系统需求分析" class="headerlink" title="一、系统需求分析"></a>一、系统需求分析</h1><h2 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h2><p>使用==面向对象编程思想==完成学员管理系统的开发，具体如下：</p><p>① 系统要求：==学员数据存储在文件中==</p><p>② 系统功能：==添加学员、删除学员、修改学员信息、查询学员信息、显示所有学员信息、保存学员信息及退出系统==等功能。</p><h2 id="2、角色分析"><a href="#2、角色分析" class="headerlink" title="2、角色分析"></a>2、角色分析</h2><p>在面向对象编程思想中，必须找到要具体实现操作的实体。</p><p>通过系统实现添加学员操作</p><p>通过系统实现删除学员操作</p><p>….</p><p>最终可以得出一个结论：这个通讯管理系统，其主要的实体就是==通讯录管理系统本身==</p><p>注意事项</p><p>① 为了方便维护代码，一般一个角色一个程序文件</p><p>② 项目要有主程序入口，习惯为<code>main.py</code></p><h2 id="3、创建项目"><a href="#3、创建项目" class="headerlink" title="3、创建项目"></a>3、创建项目</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012111535.png" alt="image-20210319144506905"></p><p>创建类文件 =&gt; studentManager.py</p><p>创建项目入口文件 =&gt; main.py</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012111002.png" alt="image-20210319145119665"></p><h1 id="二、系统的代码开发"><a href="#二、系统的代码开发" class="headerlink" title="二、系统的代码开发"></a>二、系统的代码开发</h1><h2 id="1、学员信息存储代码分析"><a href="#1、学员信息存储代码分析" class="headerlink" title="1、学员信息存储代码分析"></a>1、学员信息存储代码分析</h2><p>students = [{}, {}, {}]</p><p>学员姓名</p><p>学员年龄</p><p>学员电话</p><p>学员信息（姓名、年龄、电话），可以使用字典来表示。但是我们已经学习了面向对象，其学员信息可以完全用对象来进行实现。</p><p>学员（主体） =&gt;  属性（姓名、年龄、电话）</p><h2 id="2、student-py类文件编写"><a href="#2、student-py类文件编写" class="headerlink" title="2、student.py类文件编写"></a>2、student.py类文件编写</h2><p>需求：</p><p>学员信息包含：姓名、年龄、电话</p><p>添加<code>__str__</code>魔法方法，方便查看学员对象信息</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个Student类</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义魔术方法，用于初始化属性信息</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> mobile<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>mobile <span class="token operator">=</span> mobile    <span class="token comment" spellcheck="true"># 定义魔术方法，用于打印输出学员信息</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'{self.name}, {self.age}, {self.mobile}'</span></code></pre><h2 id="3、编写studentManager-py代码"><a href="#3、编写studentManager-py代码" class="headerlink" title="3、编写studentManager.py代码"></a>3、编写studentManager.py代码</h2><p>studentManager.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StudentManager</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义__init__魔术方法，用于初始化操作</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义一个列表，将来用于保存所有学员信息</span>        self<span class="token punctuation">.</span>student_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><p>未来数据的存储格式如下：</p><pre class=" language-python"><code class="language-python">self<span class="token punctuation">.</span>student_list <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><h2 id="4、学员管理系统具体功能说明"><a href="#4、学员管理系统具体功能说明" class="headerlink" title="4、学员管理系统具体功能说明"></a>4、学员管理系统具体功能说明</h2><p>需求：</p><p>存储数据的位置：文件(student.data) </p><ul><li><p>加载文件数据 </p></li><li><p>修改数据后保存到文件</p></li></ul><p>存储数据的形式：列表存储学员对象</p><p>系统功能： </p><p>① 添加学员信息</p><p>② 删除学员信息</p><p>③ 修改学员信息</p><p>④ 查询学员信息</p><p>⑤ 显示所有学员信息</p><p>⑥ 保存学员信息</p><p>⑦ 退出系统</p><p>编写程序代码，用于实现以上的所有功能：</p><h3 id="☆-基础逻辑代码"><a href="#☆-基础逻辑代码" class="headerlink" title="☆ 基础逻辑代码"></a>☆ 基础逻辑代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StudentManager</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义一个__init__魔术方法，用于初始化数据</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化一个student_list属性，用于将来保存所有学员对象信息</span>        self<span class="token punctuation">.</span>student_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 定义load_student()方法</span>    <span class="token keyword">def</span> <span class="token function">load_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 定义静态show_help()方法</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">show_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'传智教育通讯录管理系统V2.0'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1.添加学员信息'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2.删除学员信息'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3.修改学员信息'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4.查询学员信息'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5.显示所有学员信息'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># V2.0新增功能</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'6.保存学员信息'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'7.退出系统'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">del_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">mod_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">show_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">save_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 定义一个run()方法，专门用于实现对管理系统中各个功能调用</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1、调用一个学员加载方法，用于加载文件中的所有学员信息，加载完成后，把得到的所有学员信息保存在student_list属性中</span>        self<span class="token punctuation">.</span>load_student<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2、显示帮助信息，提示用户输入要实现的功能编号</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 显示帮助信息</span>            self<span class="token punctuation">.</span>show_help<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提示用户输入要操作功能编号</span>            user_num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要操作功能的编号：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> user_num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>add_student<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>del_student<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>mod_student<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>show_student<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>show_all<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>save_student<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'感谢您使用传智教育通讯录管理系统V2.0，欢迎下次使用！'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'信息输入错误，请重新输入...'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-main-py入口文件的编写"><a href="#☆-main-py入口文件的编写" class="headerlink" title="☆ main.py入口文件的编写"></a>☆ main.py入口文件的编写</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 从studentManager模块中导入StudentManager类功能</span><span class="token keyword">from</span> studentManager <span class="token keyword">import</span> StudentManager<span class="token comment" spellcheck="true"># 定义入口代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    student_manager <span class="token operator">=</span> StudentManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    student_manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="☆-编写add-student-学员添加方法实现"><a href="#☆-编写add-student-学员添加方法实现" class="headerlink" title="☆ 编写add_student()学员添加方法实现"></a>☆ 编写add_student()学员添加方法实现</h3><p>需求：用户输入学员姓名、年龄、手机号，将学员添加到系统。</p><p>步骤： </p><p>① 用户输入姓名、年龄、手机号</p><p>② 创建该学员对象（真正添加到列表中的是对象）</p><p>③ 将该学员对象添加到列表[] =&gt; append()</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">from</span> student <span class="token keyword">import</span> Student    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">add_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提示用户输入学员信息</span>        name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入学员的姓名：'</span><span class="token punctuation">)</span>        age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入学员的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mobile <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入学员的电话：'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用Student类实例化对象</span>        student <span class="token operator">=</span> Student<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> mobile<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用student_list属性，追加student对象信息</span>        self<span class="token punctuation">.</span>student_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>student<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'学员信息已添加成功'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-编写del-student-学员删除方法实现"><a href="#☆-编写del-student-学员删除方法实现" class="headerlink" title="☆ 编写del_student()学员删除方法实现"></a>☆ 编写del_student()学员删除方法实现</h3><p>需求：用户输入目标学员姓名，如果学员存在则删除该学员。</p><p>步骤： </p><p>① 用户输入目标学员姓名</p><p>② 遍历学员数据列表，如果用户输入的学员姓名存在则删除，否则则提示该学员不存在。</p><pre class=" language-python"><code class="language-python">        <span class="token keyword">def</span> <span class="token function">del_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提示用户输入要删除的学员姓名</span>        name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要删除的学员姓名：'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对student_list属性（本质列表）进行遍历</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>student_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 找到了要删除的学员，删除</span>                self<span class="token punctuation">.</span>student_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'学员{name}信息删除成功'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您要删除的学员不存在...'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-编写mod-student-学员修改方法实现"><a href="#☆-编写mod-student-学员修改方法实现" class="headerlink" title="☆ 编写mod_student()学员修改方法实现"></a>☆ 编写mod_student()学员修改方法实现</h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">mod_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提示用户输入要修改的学员姓名</span>        name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要修改的学员姓名：'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对student_list属性进行遍历，判断要修改的学员姓名是否存在</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>student_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>                i<span class="token punctuation">.</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入修改后的学员姓名：'</span><span class="token punctuation">)</span>                i<span class="token punctuation">.</span>age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入修改后的学员年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                i<span class="token punctuation">.</span>mobile <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入修改后的学员电话：'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'学员信息修改成功，修改后信息如下 => 学员姓名：{i.name}，学员年龄：{i.age}，学员电话：{i.mobile}'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您要修改的学员信息不存在...'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-编写show-student-学员查询方法实现"><a href="#☆-编写show-student-学员查询方法实现" class="headerlink" title="☆ 编写show_student()学员查询方法实现"></a>☆ 编写show_student()学员查询方法实现</h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">show_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提示用户输入要查询的学员姓名</span>        name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要查询的学员姓名：'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对student_list属性进行遍历</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>student_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您要查找的学员信息不存在...'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-编写show-all-方法查询所有学员实现"><a href="#☆-编写show-all-方法查询所有学员实现" class="headerlink" title="☆ 编写show_all()方法查询所有学员实现"></a>☆ 编写show_all()方法查询所有学员实现</h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 直接对列表进行遍历</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>student_list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h3 id="☆-编写save-student-方法学员信息保存功能实现"><a href="#☆-编写save-student-方法学员信息保存功能实现" class="headerlink" title="☆ 编写save_student()方法学员信息保存功能实现"></a>☆ 编写save_student()方法学员信息保存功能实现</h3><p>需求：将所有学员信息都保存到存储数据的文件。</p><p>步骤： </p><p>① 打开文件 ② 读写文件 ③ 关闭文件</p><p>思考：</p><p>① 文件写入的数据是学员对象的内存地址吗？</p><p>答：一定不能是对象的内存地址，因为随着系统的运行，内存地址可能会随时改变。</p><p>② 文件内数据要求的数据类型是什么？答：必须是字符串，可以使用str()转换</p><h3 id="扩展：把对象转换为dict字典格式-gt-dict"><a href="#扩展：把对象转换为dict字典格式-gt-dict" class="headerlink" title="扩展：把对象转换为dict字典格式 => __dict__"></a>扩展：把对象转换为dict字典格式 =&gt; <code>__dict__</code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">1</span>aa <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回实例属性和值组成的字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></code></pre><p>案例：demo.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> student <span class="token keyword">import</span> Studentstudent_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>student <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'10086'</span><span class="token punctuation">)</span>student_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'name': 'Tom', 'age': 23, 'mobile': '10086'}</span></code></pre><p>案例：把[对象1, 对象2, 对象3]中的所有对象都转换为字典</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> student <span class="token keyword">import</span> Studentstudent_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>student <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'10086'</span><span class="token punctuation">)</span>student_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>student<span class="token punctuation">)</span>student <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Harry'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'10010'</span><span class="token punctuation">)</span>student_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [student1, student2, student3, ...]</span><span class="token comment" spellcheck="true"># list1 = []</span><span class="token comment" spellcheck="true"># for i in student_list:</span><span class="token comment" spellcheck="true">#     list1.append(i.__dict__)</span><span class="token comment" spellcheck="true"># print(list1)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>__dict__ <span class="token keyword">for</span> i <span class="token keyword">in</span> student_list<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><p>最终代码：</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 把self.student_list转换为字符串保存到student.data文件中</span>    <span class="token keyword">def</span> <span class="token function">save_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打开文件</span>        f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'student.data'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 把列表中的对象转换为字典</span>        new_list <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>__dict__ <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>student_list<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 文件读写（写入）</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>new_list<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭文件</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 提示用户数据已经保存成功了</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'学员信息保存成功'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-编写load-student-方法学员加载功能实现"><a href="#☆-编写load-student-方法学员加载功能实现" class="headerlink" title="☆ 编写load_student()方法学员加载功能实现"></a>☆ 编写load_student()方法学员加载功能实现</h3><p>load_student()方法的作用：在系统启动以后，运行run()方法以后，把student.data文件中保存好的学员信息 =&gt; 加载 =&gt; self.student_list列表中</p><p>student.data =&gt; 张三、李四、王五</p><p>下次重新运行系统</p><p>self.student_list = [张三, 李四, 王五]</p><p>添加赵六</p><p>self.student_list = [张三, 李四, 王五, 赵六]</p><p>需求：每次进入系统后，修改的数据是文件里面的数据</p><p>步骤： </p><p>☆ 尝试以<code>"r"</code>模式打开学员数据文件，如果文件不存在则以<code>"w"</code>模式打开文件</p><ul><li><p>如果文件存在则读取数据</p></li><li><p>读取数据 =&gt; str字符串类型 [{}, {}, {}]</p></li><li><p>转换数据类型为列表并转换列表内的字典i[‘name’]为对象i.name</p></li><li><p>存储学员数据到学员列表self.student_list</p></li></ul><p>☆ 关闭文件</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 定义load_student()方法</span>    <span class="token keyword">def</span> <span class="token function">load_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 捕获异常</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'student.data'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'student.data'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果文件存在，没有异常，则执行else语句</span>            content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 把字符串转换为原数据类型[{}, {}, {}]</span>            data <span class="token operator">=</span> eval<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 把列表中的所有字典 => 转换为对象</span>            self<span class="token punctuation">.</span>student_list <span class="token operator">=</span> <span class="token punctuation">[</span>Student<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token string">'mobile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">]</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day10（上）之Python模块、包与面向对象综合案例</title>
      <link href="/2022/03/03/025-python-ji-chu-10-shang/"/>
      <url>/2022/03/03/025-python-ji-chu-10-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python内置模块"><a href="#一、Python内置模块" class="headerlink" title="一、Python内置模块"></a>一、Python内置模块</h1><h2 id="1、什么是Python模块"><a href="#1、什么是Python模块" class="headerlink" title="1、什么是Python模块"></a>1、什么是Python模块</h2><p>Python 模块(Module)，是一个==Python 文件==，以 .py 结尾，包含了 Python 对象定义和Python语句。模块能定义==函数，类和变量==，模块里也能包含可执行的代码。</p><h2 id="2、模块的分类"><a href="#2、模块的分类" class="headerlink" title="2、模块的分类"></a>2、模块的分类</h2><p>在Python中，模块通常可以分为两大类：==内置模块(目前使用的)== 和 ==自定义模块==</p><h2 id="3、模块的导入方式"><a href="#3、模块的导入方式" class="headerlink" title="3、模块的导入方式"></a>3、模块的导入方式</h2><p>☆ import 模块名</p><p>☆ from 模块名 import 功能名</p><p>☆ from 模块名 import *</p><p>☆ import 模块名 as 别名</p><p>☆ from 模块名 import 功能名 as 别名</p><h2 id="4、使用import导入模块"><a href="#4、使用import导入模块" class="headerlink" title="4、使用import导入模块"></a>4、使用import导入模块</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> 模块名称或<span class="token keyword">import</span> 模块名称<span class="token number">1</span><span class="token punctuation">,</span> 模块名称<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>使用模块中封装好的方法：</p><pre class=" language-python"><code class="language-python">模块名称<span class="token punctuation">.</span>方法<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>案例：使用import导入math模块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token comment" spellcheck="true"># 求数字9的平方根 = 3</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例：使用import导入math与random模块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token punctuation">,</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><a href="https://fanyi.caiyunapp.com/#/web%E5%BD%A9%E4%BA%91%E5%B0%8F%E8%AF%91%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6">https://fanyi.caiyunapp.com/#/web彩云小译翻译插件</a></p></blockquote><h2 id="5、使用from-模块名-import-功能名"><a href="#5、使用from-模块名-import-功能名" class="headerlink" title="5、使用from 模块名 import 功能名"></a>5、使用from 模块名 import 功能名</h2><p>提问：已经有了import导入模块，为什么还需要使用from 模块名 import 功能名这样的导入方式？</p><p>答：import代表导入某个或多个模块中的所有功能，但是有些情况下，我们只希望使用这个模块下的某些方法，而不需要全部导入。这个时候就建议采用from 模块名 import 功能名</p><h3 id="☆-from-模块名-import"><a href="#☆-from-模块名-import" class="headerlink" title="☆ from 模块名 import *"></a>☆ from 模块名 import *</h3><p>这个导入方式代表导入这个模块的所有功能（等价于import 模块名）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><h3 id="☆-from-模块名-import-功能名（推荐）"><a href="#☆-from-模块名-import-功能名（推荐）" class="headerlink" title="☆ from 模块名 import 功能名（推荐）"></a>☆ from 模块名 import 功能名（推荐）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token punctuation">,</span> floor</code></pre><p>注意：以上两种方式都可以用于导入某个模块中的某些方法，但是在调用具体的方法时，我们只需要<code>功能名()</code>即可</p><pre class=" language-python"><code class="language-python">功能名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># from math import *</span><span class="token comment" spellcheck="true"># 或</span><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token punctuation">,</span> floor<span class="token comment" spellcheck="true"># 调用方式</span><span class="token keyword">print</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>floor<span class="token punctuation">(</span><span class="token number">10.88</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="6、使用as关键字为导入模块定义别名"><a href="#6、使用as关键字为导入模块定义别名" class="headerlink" title="6、使用as关键字为导入模块定义别名"></a>6、使用as关键字为导入模块定义别名</h2><p>在有些情况下，如导入的模块名称过长，建议使用as关键字对其重命名操作，以后在调用这个模块时，我们就可以使用别名进行操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">as</span> t<span class="token comment" spellcheck="true"># 调用方式</span>t<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><blockquote><p>在Python中，如果给模块定义别名，命名规则建议使用大驼峰。</p></blockquote><h2 id="7、使用as关键字为导入功能定义别名"><a href="#7、使用as关键字为导入功能定义别名" class="headerlink" title="7、使用as关键字为导入功能定义别名"></a>7、使用as关键字为导入功能定义别名</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> 模块 <span class="token keyword">import</span> 功能名 <span class="token keyword">as</span> 功能名别名</code></pre><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep <span class="token keyword">as</span> sl<span class="token punctuation">,</span> time <span class="token keyword">as</span> t<span class="token comment" spellcheck="true"># 调用方式</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello python'</span><span class="token punctuation">)</span></code></pre><h2 id="8、扩展：time模块中的time-方法"><a href="#8、扩展：time模块中的time-方法" class="headerlink" title="8、扩展：time模块中的time()方法"></a>8、扩展：time模块中的time()方法</h2><p>在Python中，time模块除了sleep方法以外，还有一个方法叫做time()方法</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>主要功能：就是返回格林制时间到当前时间的秒数（时间戳）</p><p>案例：求运行递归代码的执行时间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 返回：格林制时间到当前时间的秒数</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 编写递归函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>func<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'以上代码共执行了{end - start}s'</span><span class="token punctuation">)</span></code></pre><h1 id="二、Python中的自定义模块"><a href="#二、Python中的自定义模块" class="headerlink" title="二、Python中的自定义模块"></a>二、Python中的自定义模块</h1><h2 id="1、什么是自定义模块"><a href="#1、什么是自定义模块" class="headerlink" title="1、什么是自定义模块"></a>1、什么是自定义模块</h2><p>在Python中，模块一共可以分为两大类：内置系统模块  和  自定义模块</p><p>模块的本质：在Python中，模块的本质就是一个Python的独立文件（后缀名.py），里面可以包含==全局变量、函数以及类==。</p><blockquote><p>注：在Python中，每个Python文件都可以作为一个模块，模块的名字就是==文件的名字==。也就是说自定义模块名必须要符合标识符命名规则。</p></blockquote><h2 id="2、定义一个自定义模块"><a href="#2、定义一个自定义模块" class="headerlink" title="2、定义一个自定义模块"></a>2、定义一个自定义模块</h2><p>案例：在Python项目中创建一个自定义文件，如my_module1.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_num</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2</code></pre><h2 id="3、导入自定义模块"><a href="#3、导入自定义模块" class="headerlink" title="3、导入自定义模块"></a>3、导入自定义模块</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> 模块名称或<span class="token keyword">from</span> 模块名称 <span class="token keyword">import</span> 功能名</code></pre><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> my_module1<span class="token comment" spellcheck="true"># 调用my_module1模块中自定义的sum_num方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_module1<span class="token punctuation">.</span>sum_num<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="4、自定义模块中功能测试"><a href="#4、自定义模块中功能测试" class="headerlink" title="4、自定义模块中功能测试"></a>4、自定义模块中功能测试</h2><p>在我们编写完自定义模块以后，最好在模块中对代码进行提前测试，以防止有任何异常。</p><p>引入一个魔方方法：<code>__name__</code>，其保存的内存就是一个字符串类型的数据。</p><p>随着运行页面的不同，其返回结果也是不同的：</p><p>① 如果<code>__name__</code>是在当前页面运行时，其返回结果为<code>__main__</code></p><p>② 如果<code>__name__</code>在第三方页面导入运行时，其返回结果为模块名称</p><p>基于以上特性，我们可以把<code>__name__</code>编写在自定义模块中，其语法如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 执行测试代码</span></code></pre><p><code>__name__</code>魔术方法除了可以在自定义模块中测试使用，还可以用于编写程序的入口：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个main方法（入口文件）</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 执行我们要执行的功能</span>    <span class="token comment" spellcheck="true"># ① 打印选择菜单</span>    <span class="token comment" spellcheck="true"># ② 添加学员信息</span>    <span class="token comment" spellcheck="true"># ③ 删除学员信息</span>    <span class="token comment" spellcheck="true"># ...</span>    <span class="token comment" spellcheck="true"># 调用执行入口</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="5、多模块中功能命名冲突问题"><a href="#5、多模块中功能命名冲突问题" class="headerlink" title="5、多模块中功能命名冲突问题"></a>5、多模块中功能命名冲突问题</h2><h3 id="☆-命名冲突"><a href="#☆-命名冲突" class="headerlink" title="☆ 命名冲突"></a>☆ 命名冲突</h3><p>当我们编写了多个模块时，可能在导入到其他页面时，会产生一个问题：全局变量、函数、类出现重名情况，我们把这个情况就称之为“命名冲突”。</p><p>如导入my_module2和my_module3，里面都封装了一个func()方法，其在导入以后，my_module3中的func()方法就会覆盖my_module2中的func()方法。</p><p>my_module2.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'my_module2中的func方法'</span><span class="token punctuation">)</span></code></pre><p>my_module3.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'my_module3中的func方法'</span><span class="token punctuation">)</span></code></pre><p>导入到其他Python文件中，测试效果：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> my_module2 <span class="token keyword">import</span> func<span class="token keyword">from</span> my_module3 <span class="token keyword">import</span> funcfunc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="☆-解决方案"><a href="#☆-解决方案" class="headerlink" title="☆ 解决方案"></a>☆ 解决方案</h3><p>① 把所有模块的导入方式都写入文件的最上面，如果发现命名冲突了，马上和模块的开发人员进行功能核对</p><p>② 给重名的方法进行as重命名</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> my_module2 <span class="token keyword">import</span> func <span class="token keyword">as</span> my_module2_func<span class="token keyword">from</span> my_module3 <span class="token keyword">import</span> func <span class="token keyword">as</span> my_module3_func</code></pre><h2 id="6、模块命名的注意事项"><a href="#6、模块命名的注意事项" class="headerlink" title="6、模块命名的注意事项"></a>6、模块命名的注意事项</h2><p>在实际项目开发中，一定要特别注意：我们自定义的模块名称一定不能和系统内置的模块名称相同，否则会导致代码无法正常执行。</p><p>举个栗子：定义一个与系统内置模块同名的模块</p><p>random.py</p><pre class=" language-python"><code class="language-python"></code></pre><p>08-Python中引入与系统模块同名的自定义模块.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>以上代码运行结果：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012111294.png" alt="image-20210319113537997"></p><p>randint属于random模块的内置方法，不可能存在找不到的情况。之所以出现以上问题的主要原因在于：我们的项目中存在了一个与系统模块同名的模块文件。所以其在引用random模块式，其执行顺序：</p><p><code>引入某个模块 =&gt; 当前项目中寻找是否有同名的文件 =&gt; 如果找到则直接使用，未找到 =&gt; 继续向上寻找 =&gt; Python解析器中</code></p><p>如何证明：模块的引用一定是按照你说的这个顺序呢？</p><p>答：使用<code>__file__</code>魔术方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span></code></pre><h2 id="7、-all-魔术方法"><a href="#7、-all-魔术方法" class="headerlink" title="7、__all__魔术方法"></a>7、__all__魔术方法</h2><p>如果一个模块文件中有<code>__all__</code>变量，当使用<code>from xxx import *</code>导入时，只能导入这个列表中的元素。</p><p>主要功能：限制使用模块中的某些功能，也就是说你导入后可以使用的方法只能是<code>__all__</code>中封装好的方法。</p><p>案例：</p><p>my_module.py</p><pre class=" language-python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'func1'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'func1方法'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'func2方法'</span><span class="token punctuation">)</span></code></pre><p>09-Python中限制引用模块中的方法.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> my_module <span class="token keyword">import</span> <span class="token operator">*</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 报错</span></code></pre><h1 id="三、Python中的Package包"><a href="#三、Python中的Package包" class="headerlink" title="三、Python中的Package包"></a>三、Python中的Package包</h1><h2 id="1、什么是包"><a href="#1、什么是包" class="headerlink" title="1、什么是包"></a>1、什么是包</h2><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为包。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012111143.png" alt="image-20210319120310830"></p><h2 id="2、包的制作"><a href="#2、包的制作" class="headerlink" title="2、包的制作"></a>2、包的制作</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012111006.png" alt="image-20210319120405292"></p><p>新建报名如mypackage：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012111119.png" alt="image-20210319120453514"></p><h2 id="3、在包中创建多个模块"><a href="#3、在包中创建多个模块" class="headerlink" title="3、在包中创建多个模块"></a>3、在包中创建多个模块</h2><p>在mypackage包中创建多个模块：my_module1和my_module2</p><p>my_module1.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'my_module1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mypackage包中的my_module1模块的func1方法'</span><span class="token punctuation">)</span></code></pre><p>my_module2.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'my_module2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mypackage包中的my_module2模块的func2方法'</span><span class="token punctuation">)</span></code></pre><h2 id="4、在项目代码中导入包Package"><a href="#4、在项目代码中导入包Package" class="headerlink" title="4、在项目代码中导入包Package"></a>4、在项目代码中导入包Package</h2><p>方法一：使用import导入包</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> 包名<span class="token punctuation">.</span>模块名<span class="token comment" spellcheck="true"># 调用模块中的方法</span>包名<span class="token punctuation">.</span>模块名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>方法二：使用from导入包</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> 包名 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 调用模块方法</span>模块名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：必须在<code>__init__.py</code>文件中添加<code>__all__ = []</code>，控制允许导入的模块列表。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day09之Python面向对象高级与Python的异常、模块以及包管理</title>
      <link href="/2022/03/03/024-python-ji-chu-09/"/>
      <url>/2022/03/03/024-python-ji-chu-09/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python中的继承"><a href="#一、Python中的继承" class="headerlink" title="一、Python中的继承"></a>一、Python中的继承</h1><h2 id="1、什么是继承"><a href="#1、什么是继承" class="headerlink" title="1、什么是继承"></a>1、什么是继承</h2><p>我们接下来来聊聊Python代码中的“继承”：类是用来描述现实世界中同一组事务的共有特性的抽象模型，但是类也有上下级和范围之分，比如：生物 =&gt; 动物 =&gt; 哺乳动物 =&gt; 灵长型动物 =&gt; 人类 =&gt; 黄种人</p><p>从哲学上说，就是共性与个性之间的关系，比如：白马和马！所以，我们在OOP代码中，也一样要体现出类与类之间的共性与个性关系，这里就需要通过类的继承来体现。简单来说，如果一个类A使用了另一个类B的成员（属性和方法），我们就可以说A类继承了B类，同时这也体现了OOP中==代码重用的特性==！</p><h2 id="2、继承的基本语法"><a href="#2、继承的基本语法" class="headerlink" title="2、继承的基本语法"></a>2、继承的基本语法</h2><p>假设A类要继承B类中的所有属性和方法（私有属性和私有方法除外）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>clss A<span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>B中的所有公共属性a<span class="token punctuation">.</span>B中的所有公共方法</code></pre><p>案例：Person类与Teacher、Student类之间的继承关系</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can eat food!'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can speak!'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>teacher <span class="token operator">=</span> Teacher<span class="token punctuation">(</span><span class="token punctuation">)</span>teacher<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>teacher<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>student <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>studnet<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="3、与继承相关的几个概念"><a href="#3、与继承相关的几个概念" class="headerlink" title="3、与继承相关的几个概念"></a>3、与继承相关的几个概念</h2><p>继承：一个类从另一个已有的类获得其成员的相关特性，就叫作继承！</p><p>派生：从一个已有的类产生一个新的类，称为派生！</p><p>很显然，继承和派生其实就是从不同的方向来描述的相同的概念而已，本质上是一样的！</p><p>父类：也叫作基类，就是指已有被继承的类！</p><p>子类：也叫作派生类或扩展类</p><p>扩展：在子类中增加一些自己特有的特性，就叫作扩展，没有扩展，继承也就没有意义了！</p><p>单继承：一个类只能继承自一个其他的类，不能继承多个类，单继承也是大多数面向对象语言的特性！</p><p>多继承：一个类同时继承了多个父类， （C++、Python等语言都支持多继承）</p><h2 id="4、单继承"><a href="#4、单继承" class="headerlink" title="4、单继承"></a>4、单继承</h2><p>单继承：一个类只能继承自一个其他的类，不能继承多个类。这个类会有具有父类的属性和方法。</p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个共性类（父类）</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 2、定义一个个性类（子类）</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>案例：比如汽车可以分为两种类型（汽油车、电动车）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个共性类（车类）</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can run'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、定义汽油车</span><span class="token keyword">class</span> <span class="token class-name">GasolineCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 3、定义电动车</span><span class="token keyword">class</span> <span class="token class-name">EletricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>bwm <span class="token operator">=</span> GasolineCar<span class="token punctuation">(</span><span class="token punctuation">)</span>bwm<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="5、单继承特性：传递性"><a href="#5、单继承特性：传递性" class="headerlink" title="5、单继承特性：传递性"></a>5、单继承特性：传递性</h2><p>在Python继承中，如A类继承了B类，B类又继承了C类。则根据继承的传递性，则A类也会自动继承C类中所有属性和方法（公共）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是C类中的相关方法func'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="6、编写面向对象代码中的常见问题"><a href="#6、编写面向对象代码中的常见问题" class="headerlink" title="6、编写面向对象代码中的常见问题"></a>6、编写面向对象代码中的常见问题</h2><p>问题1：在定义类时，其没有遵循类的命名规则</p><p>答：在Python中，类理论上是不区分大小写的。但是要遵循一定的命名规范：首字母必须是字母或下划线，其中可以包含字母、数字和下划线，而且要求其命名方式采用大驼峰。</p><p>电动汽车：EletricCar</p><p>父类：Father</p><p>子类：Son</p><p>问题2：父类一定要继承object么？Car(object)</p><p>答：在Python面向对象代码中，建议在编写父类时，让其自动继承object类。但是其实不写也可以，因为默认情况下，Python中的所有类都继承自object。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012110462.png" alt="image-20210318104228654"></p><p>问题3：打印属性和方法时，都喜欢用print</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name            <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can speak'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建对象，打印属性和方法</span>p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>p<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="7、多继承"><a href="#7、多继承" class="headerlink" title="7、多继承"></a>7、多继承</h2><p>什么是多继承？</p><p>Python语言是少数支持多继承的一门编程语言，所谓的多继承就是允许一个类同时继承自多个类的特性。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012110920.png" alt="image-20210318105709652"></p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>B中的所有属性和方法a<span class="token punctuation">.</span>C中的所有属性和方法</code></pre><p>案例：汽油车、电动车 =&gt; 混合动力汽车（汽车 + 电动）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GasolineCar</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run_with_gasoline</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can run with gasoline'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">EletricCar</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run_with_eletric</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can run with eletric'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">HybridCar</span><span class="token punctuation">(</span>GasolineCar<span class="token punctuation">,</span> EletricCar<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>tesla <span class="token operator">=</span> HybridCar<span class="token punctuation">(</span><span class="token punctuation">)</span>tesla<span class="token punctuation">.</span>run_with_gasoline<span class="token punctuation">(</span><span class="token punctuation">)</span>tesla<span class="token punctuation">.</span>run_with_eletric<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：虽然多继承允许我们同时继承自多个类，但是实际开发中，应尽量避免使用多继承，因为如果两个类中出现了相同的属性和方法就会产生命名冲突。</p></blockquote><h2 id="8、子类扩展：重写父类属性和方法"><a href="#8、子类扩展：重写父类属性和方法" class="headerlink" title="8、子类扩展：重写父类属性和方法"></a>8、子类扩展：重写父类属性和方法</h2><p>扩展特性：继承让子类继承父类的所有公共属性和方法，但是如果仅仅是为了继承公共属性和方法，继承就没有实际的意义了，应该是在继承以后，子类应该有一些自己的属性和方法。</p><p>什么是重写？</p><p>重写也叫作覆盖，就是当子类成员与父类成员名字相同的时候，从父类继承下来的成员会重新定义！</p><p>此时，通过子类实例化出来的对象访问相关成员的时候，真正其作用的是子类中定义的成员！</p><p>上面单继承例子中 Animal 的子类 Cat和Dog 继承了父类的属性和方法，但是我们狗类Dog 有自己的叫声’汪汪叫’，猫类 Cat 有自己的叫声 ‘喵喵叫’ ，这时我们需要对父类的 call() 方法进行重构。如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can eat'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can call'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>miaomiao <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>miaomiao<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>miaomiao<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Dog、Cat子类重写父类Animal中的call方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can eat'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 公共方法</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can call'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 重写父类的call方法</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can wang wang wang'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 重写父类的call方法</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can miao miao miao'</span><span class="token punctuation">)</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>miaomiao <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>miaomiao<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>miaomiao<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>思考：重写父类中的call方法以后，此时父类中的call方法还在不在？</p><p>答：还在，只不过是在其子类中找不到了。类方法的调用顺序，当我们在子类中重构父类的方法后，Cat子类的实例先会在自己的类 Cat 中查找该方法，当找不到该方法时才会去父类 Animal 中查找对应的方法。</p><h2 id="9、super-调用父类属性和方法"><a href="#9、super-调用父类属性和方法" class="headerlink" title="9、super()调用父类属性和方法"></a>9、super()调用父类属性和方法</h2><p>super()：调用父类属性或方法，完整写法：<code>super(当前类名, self).属性或方法()</code>，在Python3以后版本中，调用父类的属性和方法我们只需要使用<code>super().属性或super().方法名()</code>就可以完成调用了。</p><p>案例：Car汽车类、GasolineCar汽油车、ElectricCar电动车</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>brand <span class="token operator">=</span> brand        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color     <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can run'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">GasolineCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can run with gasoline'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 电池属性</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> <span class="token number">70</span>            <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'i can run with electric，remain:{self.battery}'</span><span class="token punctuation">)</span>        bwm <span class="token operator">=</span> GasolineCar<span class="token punctuation">(</span><span class="token string">'宝马'</span><span class="token punctuation">,</span> <span class="token string">'X5'</span><span class="token punctuation">,</span> <span class="token string">'白色'</span><span class="token punctuation">)</span>bwm<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'特斯拉'</span><span class="token punctuation">,</span> <span class="token string">'Model S'</span><span class="token punctuation">,</span> <span class="token string">'红色'</span><span class="token punctuation">)</span>tesla<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="10、MRO属性或MRO方法：方法解析顺序"><a href="#10、MRO属性或MRO方法：方法解析顺序" class="headerlink" title="10、MRO属性或MRO方法：方法解析顺序"></a>10、MRO属性或MRO方法：方法解析顺序</h2><p>MRO(Method Resolution Order)：方法解析顺序，我们可以通过<code>类名.__mro__</code>或<code>类名.mro()</code>获得“类的层次结构”，方法解析顺序也是按照这个“类的层次结构”寻找到。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>brand <span class="token operator">=</span> brand        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color     <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can run'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">GasolineCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can run with gasoline'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 电池属性</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> <span class="token number">70</span>            <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'i can run with electric，remain:{self.battery}'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ElectricCar<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ElectricCar<span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012110333.png" alt="image-20210318121130667"></p><p>说明：有MRO方法解析顺序可知，在类的继承中，当某个类创建了一个对象时，调用属性或方法，首先在自身类中去寻找，如找到，则直接使用，停止后续的查找。如果未找到，继续向上一级继承的类中去寻找，如找到，则直接使用，没有找到则继续向上寻找…直到object类，这就是Python类继承中，其方法解析顺序。</p><blockquote><p>综上：object类还是所有类的基类（因为这个查找关系到object才终止）</p></blockquote><h1 id="二、Python中多态"><a href="#二、Python中多态" class="headerlink" title="二、Python中多态"></a>二、Python中多态</h1><h2 id="1、什么是多态"><a href="#1、什么是多态" class="headerlink" title="1、什么是多态"></a>1、什么是多态</h2><p>多态指的是一类事物有多种形态。</p><p>定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果。</p><p>① 多态依赖继承</p><p>② 子类方法必须要重写父类方法</p><blockquote><p>首先定义一个父类，其可能拥有多个子类对象。当我们调用一个公共方法时，传递的对象不同，则返回的结果不同。</p></blockquote><p>好处：调用灵活，有了多态，更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化！</p><h2 id="2、多态原理图"><a href="#2、多态原理图" class="headerlink" title="2、多态原理图"></a>2、多态原理图</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012110902.png" alt="image-20210318122417602"></p><p>公共接口service就是多态的体现，随着传入水果对象的不同，能返回不同的结果。</p><h2 id="3、多态代码实现"><a href="#3、多态代码实现" class="headerlink" title="3、多态代码实现"></a>3、多态代码实现</h2><p>多态：可以基于继承也可以不基于继承</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 公共方法</span>    <span class="token keyword">def</span> <span class="token function">makejuice</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can make juice'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span>Fruit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makejuice</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can make apple juice'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Banana</span><span class="token punctuation">(</span>Fruit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makejuice</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can make banana juice'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span>Fruit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makejuice</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can make orange juice'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Peach</span><span class="token punctuation">(</span>Fruit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makejuice</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i can make peach juice'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义公共方法如service</span><span class="token keyword">def</span> <span class="token function">service</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj<span class="token punctuation">.</span>makejuice<span class="token punctuation">(</span><span class="token punctuation">)</span>apple <span class="token operator">=</span> Apple<span class="token punctuation">(</span><span class="token punctuation">)</span>banana <span class="token operator">=</span> Banana<span class="token punctuation">(</span><span class="token punctuation">)</span>orange <span class="token operator">=</span> Orange<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>apple<span class="token punctuation">,</span> banana<span class="token punctuation">,</span> orange<span class="token punctuation">)</span><span class="token punctuation">:</span>    service<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h1 id="三、面向对象其他特性"><a href="#三、面向对象其他特性" class="headerlink" title="三、面向对象其他特性"></a>三、面向对象其他特性</h1><h2 id="1、类属性"><a href="#1、类属性" class="headerlink" title="1、类属性"></a>1、类属性</h2><p>Python中，属性可以分为实例属性和类属性。</p><p>类属性就是 类对象中定义的属性，它被该类的所有实例对象所共有。通常用来记录 与这类相关 的特征，类属性 不会用于记录 具体对象的特征。</p><blockquote><p>在Python中，一切皆对象。类也是一个特殊的对象，我们可以单独为类定义属性。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类属性</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Harry'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span></code></pre><h2 id="2、类属性代码实现"><a href="#2、类属性代码实现" class="headerlink" title="2、类属性代码实现"></a>2、类属性代码实现</h2><p>定义count类属性，用于记录实例化Person类，产生对象的数量。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类属性count</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 定义一个__init__魔术方法，用于进行初始化操作</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token comment" spellcheck="true"># 对count类属性进行+1操作，用于记录这个Person类一共生成了多少个对象</span>        Person<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 1、实例化对象p1</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Harry'</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Jennifer'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、在类外部输出类属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我们共使用Person类生成了{Person.count}个实例对象'</span><span class="token punctuation">)</span></code></pre><h2 id="3、类方法"><a href="#3、类方法" class="headerlink" title="3、类方法"></a>3、类方法</h2><p>为什么需要类方法，在面向对象中，特别强调数据封装性。所以不建议直接在类的外部对属性进行直接设置和获取。所以我们如果想操作类属性，建议使用类方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tool</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义一个类属性count</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 定义一个__init__初始化方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        Tool<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 封装一个类方法：专门实现对Tool.count类属性进行操作</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">get_count</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我们使用Tool类共实例化了{cls.count}个工具'</span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'斧头'</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'榔头'</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'铁锹'</span><span class="token punctuation">)</span>Tool<span class="token punctuation">.</span>get_count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>类方法主要用于操作类属性或类中的其他方法。</p></blockquote><h2 id="4、静态方法"><a href="#4、静态方法" class="headerlink" title="4、静态方法"></a>4、静态方法</h2><p>在开发时，如果需要在类中封装一个方法，这个方法：  </p><p>==① 既 不需要访问实例属性或者调用实例方法==</p><p>==② 也 不需要访问类属性或者调用类方法==</p><p>这个时候，可以把这个方法封装成一个静态方法</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 开发一款游戏</span><span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 开始游戏，打印游戏功能菜单</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1、开始游戏'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2、游戏暂停'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3、退出游戏'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始游戏、打印菜单</span>Game<span class="token punctuation">.</span>menu<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="四、综合案例"><a href="#四、综合案例" class="headerlink" title="四、综合案例"></a>四、综合案例</h1><h2 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h2><p>设计一个<code>Game</code>类</p><p>属性：</p><p>定义一个类属性<code>top_score</code>记录游戏的历史最高分</p><p>定义一个实例属性<code>player_name</code>记录当前游戏的玩家姓名</p><p>方法：</p><p>静态方法<code>show_help</code>显示游戏帮助信息</p><p>类方法<code>show_top_score</code>显示历史最高分</p><p>实例方法<code>start_game</code>开始当前玩家的游戏</p><h2 id="2、实例代码"><a href="#2、实例代码" class="headerlink" title="2、实例代码"></a>2、实例代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1、定义类属性top_score</span>    top_score <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 2、定义初始化方法__init__</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> player_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player_name <span class="token operator">=</span> player_name    <span class="token comment" spellcheck="true"># 3、定义静态方法，用于输出帮助信息</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">show_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'游戏帮助信息'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、定义类方法</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">show_top_score</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'本游戏历史最高分：{cls.top_score}'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5、定义实例方法，start_game()</span>    <span class="token keyword">def</span> <span class="token function">start_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.player_name}，游戏开始了，你准备好了么？'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化类生成实例对象</span>mario <span class="token operator">=</span> Game<span class="token punctuation">(</span><span class="token string">'itheima'</span><span class="token punctuation">)</span>mario<span class="token punctuation">.</span>start_game<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示历史最高分</span>Game<span class="token punctuation">.</span>show_top_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 弹出游戏帮助信息</span>Game<span class="token punctuation">.</span>show_help<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="五、面向对象中的单例模式"><a href="#五、面向对象中的单例模式" class="headerlink" title="五、面向对象中的单例模式"></a>五、面向对象中的单例模式</h1><h2 id="1、什么是设计模式"><a href="#1、什么是设计模式" class="headerlink" title="1、什么是设计模式"></a>1、什么是设计模式</h2><p>设计模式就是前人根据实际的问题提出的问题解决方案，我们把这种就称之为设计模式。</p><h2 id="2、单例模式"><a href="#2、单例模式" class="headerlink" title="2、单例模式"></a>2、单例模式</h2><p>单例模式是一种常见的设计模式！</p><p>所谓的设计模式，不是一种新的语法，而是人们在实际的应用中，面对某种特定的情形而设计出来的某种常见的有效的解决方案，所以，设计模式只是经验的总结！</p><p>什么又是单例模式？单例，就是单一实例！</p><p>==在实际的运用中，存在一些类，只需要实例化一个对象，就可以完成其所有的功能操作。所以，如果我们能够通过某些技巧，使得一个类只能开辟一个对象空间的话，这样就可以节省相应的对象资源，这种模式就叫作单例模式！==</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012110197.png" alt="image-20210318162425553"></p><p>应用场景：音乐播放器对象、回收站对象、打印机对象</p><h2 id="3、-new-方法"><a href="#3、-new-方法" class="headerlink" title="3、_new_()方法"></a>3、_<em>new</em>_()方法</h2><p>在Python中，我们目前已经学了3个魔术方法了，分别是<code>__init__()</code>、<code>__str__()</code>、<code>__del__()</code>，接下来介绍一下<code>__new__()</code>方法。</p><p>使用类名()创建对象时，Python的解释器首先会调用<code>__new__方法</code>为对象分配空间。</p><p>__new__是一个由object积累提供的内置的静态方法，主要作用有两个：</p><p>○ ==在内存中为对象分配空间==</p><p>○ ==返回对象的引用==</p><p>Python解析器获得对象的引用后，将引用作为第一个参数，传递给<code>__init__方法</code>重写<code>__new__方法</code>的代码非常固定，一定要使用<code>return super(). __new__(cls)</code>，否则Python解释器得不到分配了空间的对象引用，就不会调用对象的初始化方法。</p><blockquote><p><code>__new__方法</code>是一个静态方法，在调用时，要求将自身类信息cls作为参数传递到这个方法中，这个方法属于object类中的一个静态方法。</p></blockquote><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个播放器类</span><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 重写__new__()魔术方法</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1、开辟内存空间'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2、返回实例化对象引用地址'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token comment" spellcheck="true"># 1、实例mp1对象</span>mp1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'红色的高跟鞋'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mp1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、实例化mp2对象</span>mp2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'春夏秋冬'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mp2<span class="token punctuation">)</span></code></pre><h2 id="4、单例模式的代码实现"><a href="#4、单例模式的代码实现" class="headerlink" title="4、单例模式的代码实现"></a>4、单例模式的代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个播放器类</span><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义一个类属性，如instance，用于记录之前实例化对象返回的内存引用</span>    instance <span class="token operator">=</span> None    <span class="token comment" spellcheck="true"># 重写__new__()魔术方法</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 判断实例化时有没有分配过内存空间</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token comment" spellcheck="true"># 1、实例mp1对象</span>mp1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'红色的高跟鞋'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mp1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、实例化mp2对象</span>mp2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'春夏秋冬'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mp2<span class="token punctuation">)</span></code></pre><blockquote><p>注：类属性在内存中是一个特殊的存在，其不用于以前讲过的局部变量（局部变量当函数执行完毕后，其会被内存所销毁）。但是类属性一旦定义，除非对象以及这个类在内存中被销毁了，否则其不会自动销毁。</p></blockquote><h1 id="六、Python异常"><a href="#六、Python异常" class="headerlink" title="六、Python异常"></a>六、Python异常</h1><h2 id="1、什么是异常"><a href="#1、什么是异常" class="headerlink" title="1、什么是异常"></a>1、什么是异常</h2><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。</p><h2 id="2、异常演示"><a href="#2、异常演示" class="headerlink" title="2、异常演示"></a>2、异常演示</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 运算符</span><span class="token comment" spellcheck="true"># print(10/0)</span><span class="token comment" spellcheck="true"># 文件异常</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></code></pre><h2 id="3、异常捕获"><a href="#3、异常捕获" class="headerlink" title="3、异常捕获"></a>3、异常捕获</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能发生错误的代码<span class="token keyword">except</span><span class="token punctuation">(</span>捕获<span class="token punctuation">)</span><span class="token punctuation">:</span>    如果出现异常执行的代码</code></pre><blockquote><p>try…except主要用于捕获代码运行时异常</p></blockquote><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'发生异常，执行except语句中的代码'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4、捕获指定异常"><a href="#4、捕获指定异常" class="headerlink" title="4、捕获指定异常"></a>4、捕获指定异常</h2><p>在以上案例代码中，except相当于捕获了所有异常，无论遇到什么错误都会自动执行except中封装的代码。但是有些情况下，我们向针对性的捕获异常，并执行相应的代码。</p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能遇到异常的代码<span class="token keyword">except</span> 异常类型<span class="token punctuation">:</span>    捕获到对应的错误以后，执行的代码</code></pre><blockquote><p>① 如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</p><p>② 一般try下方只放一行尝试执行的代码。</p></blockquote><p>案例：捕获FileNotFoundError异常</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h2 id="5、同时捕获多个异常"><a href="#5、同时捕获多个异常" class="headerlink" title="5、同时捕获多个异常"></a>5、同时捕获多个异常</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(10/0)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>NameError<span class="token punctuation">,</span> ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h2 id="6、捕获所有未知异常"><a href="#6、捕获所有未知异常" class="headerlink" title="6、捕获所有未知异常"></a>6、捕获所有未知异常</h2><p>无论我们在except后面定义多少个异常类型，实际应用中，也可能会出现无法捕获的未知异常。这个时候，我们考虑使用Exception异常类型捕获可能遇到的所有未知异常：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能遇到的错误代码<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>案例：打印一个未定义变量，使用Exception异常类进行捕获</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h2 id="7、异常捕获中else语句"><a href="#7、异常捕获中else语句" class="headerlink" title="7、异常捕获中else语句"></a>7、异常捕获中else语句</h2><p>else语句：表示的是如果没有异常要执行的代码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'哈哈，真开森，没有遇到任何异常'</span><span class="token punctuation">)</span></code></pre><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="8、异常捕获中的finally语句"><a href="#8、异常捕获中的finally语句" class="headerlink" title="8、异常捕获中的finally语句"></a>8、异常捕获中的finally语句</h2><p>finally表示的是无论是否异常都要执行的代码，例如关闭文件、关闭数据库连接。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'哈哈，真开森，没有遇到任何异常'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'关闭文件'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="9、异常的综合案例"><a href="#9、异常的综合案例" class="headerlink" title="9、异常的综合案例"></a>9、异常的综合案例</h2><h3 id="☆-异常的传递"><a href="#☆-异常的传递" class="headerlink" title="☆ 异常的传递"></a>☆ 异常的传递</h3><p>需求：</p><p>① 尝试只读方式打开python.txt文件，如果文件存在则读取文件内容，文件不存在则提示用户即可。</p><p>② 读取内容要求：尝试循环读取内容，读取过程中如果检测到用户意外终止程序，则<code>except</code>捕获</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">try</span><span class="token punctuation">:</span>   f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>   <span class="token keyword">try</span><span class="token punctuation">:</span>       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>           content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>   <span class="token keyword">except</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># Ctrl + C（终端里面，其代表终止程序的继续执行）</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'python.txt未全部读取完成，中断了...'</span><span class="token punctuation">)</span>   <span class="token keyword">finally</span><span class="token punctuation">:</span>       f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'python.txt文件未找到...'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-raise抛出自定义异常"><a href="#☆-raise抛出自定义异常" class="headerlink" title="☆ raise抛出自定义异常"></a>☆ raise抛出自定义异常</h3><p>在Python中，抛出自定义异常的语法为<code>raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（用户输入密码，如果输入的长度不足6位，则报错，即抛出自定义异常，并捕获该异常）。</p><p>原生方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">input_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的密码，不少于6位：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 抛出异常</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'您的密码长度少于6位'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># 如果密码长度正常，则直接显示密码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>        input_password<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012110141.png" alt="image-20210318184036155"></p><p>面向对象抛出自定义异常：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ShortInputError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># length代表输入密码长度，min_length代表ShortInputError最小长度</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">,</span> min_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>min_length <span class="token operator">=</span> min_length    <span class="token comment" spellcheck="true"># 定义一个__str__方法，用于输出字符串信息</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'您输入的密码长度为{self.length}，不能少于{self.min_length}个字符'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的密码，不少于6位：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ShortInputError<span class="token punctuation">(</span>len<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'密码输入完成，您的密码是：{password}'</span><span class="token punctuation">)</span></code></pre><h1 id="异常类型："><a href="#异常类型：" class="headerlink" title="异常类型："></a>异常类型：</h1><table><thead><tr><th>异常名称</th><th>描述</th></tr></thead><tbody><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>SystemExit</td><td>Python 解释器请求退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF 标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsError</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块/对象失败</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError</td><td>Python 语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab 和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode 编码时错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告</td></tr><tr><td>FileNotFoundError</td><td>文件未找到错误</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day08之Python文件操作与面向对象</title>
      <link href="/2022/03/03/023-python-ji-chu-08/"/>
      <url>/2022/03/03/023-python-ji-chu-08/</url>
      
        <content type="html"><![CDATA[<h1 id="一、文件备份案例"><a href="#一、文件备份案例" class="headerlink" title="一、文件备份案例"></a>一、文件备份案例</h1><h2 id="1、实例代码"><a href="#1、实例代码" class="headerlink" title="1、实例代码"></a>1、实例代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、接收用户输入的文件名（要备份的文件名）</span>oldname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要备份的文件名称：'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># python.txt</span><span class="token comment" spellcheck="true"># 2、规划备份文件名（python[备份].txt）</span><span class="token comment" spellcheck="true"># 搜索点号</span>index <span class="token operator">=</span> oldname<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回文件名和文件后缀</span>name <span class="token operator">=</span> oldname<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>postfix <span class="token operator">=</span> oldname<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span>newname <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> postfix<span class="token comment" spellcheck="true"># 3、对文件进行备份操作</span>old_f <span class="token operator">=</span> open<span class="token punctuation">(</span>oldname<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>new_f <span class="token operator">=</span> open<span class="token punctuation">(</span>newname<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取源文件内容写入新文件</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、关闭文件</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="2、查漏补缺"><a href="#2、查漏补缺" class="headerlink" title="2、查漏补缺"></a>2、查漏补缺</h2><p>遗留问题：我们要备份的文件名称都是由用户通过input方法输入而来的，但是一定要记住，只要在程序中有人为输入，强烈建议对用户输入的数据进行校检。</p><blockquote><p>所有用户的输入都是不靠谱的！</p></blockquote><p>解决用户输入文件名称异常问题：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、接收用户输入的文件名（要备份的文件名）</span>oldname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要备份的文件名称：'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># python.txt</span><span class="token comment" spellcheck="true"># 2、规划备份文件名（python[备份].txt）</span><span class="token comment" spellcheck="true"># 搜索点号</span>index <span class="token operator">=</span> oldname<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对index进行判断，判断是否合理（index > 0)</span><span class="token keyword">if</span> index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 返回文件名和文件后缀</span>    name <span class="token operator">=</span> oldname<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>    postfix <span class="token operator">=</span> oldname<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span>    newname <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> postfix    <span class="token comment" spellcheck="true"># 3、对文件进行备份操作</span>    old_f <span class="token operator">=</span> open<span class="token punctuation">(</span>oldname<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>    new_f <span class="token operator">=</span> open<span class="token punctuation">(</span>newname<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取源文件内容写入新文件</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、关闭文件</span>    old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入正确的文件名称，否则无法进行备份操作...'</span><span class="token punctuation">)</span></code></pre><h1 id="二、文件和文件夹操作"><a href="#二、文件和文件夹操作" class="headerlink" title="二、文件和文件夹操作"></a>二、文件和文件夹操作</h1><h2 id="1、os模块"><a href="#1、os模块" class="headerlink" title="1、os模块"></a>1、os模块</h2><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><p>第一步：导入os模块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os</code></pre><p>第二步：调用os模块中的相关方法</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="2、与文件操作相关方法"><a href="#2、与文件操作相关方法" class="headerlink" title="2、与文件操作相关方法"></a>2、与文件操作相关方法</h2><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>1</td><td>os.rename(目标文件名称，新文件名称)</td><td>对文件进行重命名操作</td></tr><tr><td>2</td><td>os.remove(要删除文件名称)</td><td>对文件进行删除操作</td></tr></tbody></table><p>案例：把Python项目目录下的python.txt文件，更名为linux.txt，休眠20s，刷新后，查看效果，然后对这个文件进行删除操作。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：导入os模块</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 第三步：引入time模块</span><span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 第二步：使用os.rename方法对python.txt进行重命名</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'linux.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第四步：休眠20s</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第五步：删除文件（linux.txt)</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'linux.txt'</span><span class="token punctuation">)</span></code></pre><h2 id="3、与文件夹操作相关操作"><a href="#3、与文件夹操作相关操作" class="headerlink" title="3、与文件夹操作相关操作"></a>3、与文件夹操作相关操作</h2><p>前提：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os</code></pre><p>相关方法：</p><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>1</td><td>os.mkdir(新文件夹名称)</td><td>创建一个指定名称的文件夹</td></tr><tr><td>2</td><td>os.getcwd()</td><td>current work   directory，获取当前目录名称</td></tr><tr><td>3</td><td>os.chdir(切换后目录名称)</td><td>change  directory，切换目录</td></tr><tr><td>4</td><td>os.listdir(目标目录)</td><td>获取指定目录下的文件信息，返回列表</td></tr><tr><td>5</td><td>os.rmdir(目标目录)</td><td>用于删除一个指定名称的”空”文件夹</td></tr></tbody></table><p>案例1：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入os模块</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 1、使用mkdir方法创建一个images文件夹</span><span class="token comment" spellcheck="true"># os.mkdir('images')</span><span class="token comment" spellcheck="true"># os.mkdir('images/avatar')</span><span class="token comment" spellcheck="true"># 2、getcwd = get current work directory</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、os.chdir，ch = change dir = directory切换目录</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'images/avatar'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 切换到上一级目录 => images</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'../../'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、使用os.listdir打印当前所在目录下的所有文件，返回列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5、删除空目录</span>os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'images/avatar'</span><span class="token punctuation">)</span></code></pre><p>案例2：准备一个static文件夹以及file1.txt、file2.txt、file3.txt三个文件</p><p>① 在程序中，将当前目录切换到static文件夹</p><p>② 创建一个新images文件夹以及test文件夹</p><p>③ 获取目录下的所有文件</p><p>④ 移除test文件夹</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入os模块</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># ① 在程序中，将当前目录切换到static文件夹</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(os.getcwd())</span><span class="token comment" spellcheck="true"># ② 创建一个新images文件夹以及test文件夹</span><span class="token comment" spellcheck="true"># os.mkdir('images')</span><span class="token comment" spellcheck="true"># os.mkdir('test')</span><span class="token comment" spellcheck="true"># ③ 获取目录下的所有文件</span><span class="token comment" spellcheck="true"># print(os.listdir())</span><span class="token keyword">for</span> file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ④ 移除test文件夹</span>os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span></code></pre><h2 id="4、文件夹删除补充（递归删除、慎重！）"><a href="#4、文件夹删除补充（递归删除、慎重！）" class="headerlink" title="4、文件夹删除补充（递归删除、慎重！）"></a>4、文件夹删除补充（递归删除、慎重！）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入shutil模块</span><span class="token keyword">import</span> shutil<span class="token comment" spellcheck="true"># 递归删除非空目录</span>shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">'要删除文件夹路径'</span><span class="token punctuation">)</span></code></pre><blockquote><p>递归删除文件夹的原理：理论上，其在删除过程中，如果文件夹非空，则自动切换到文件夹的内部，然后把其内部的文件，一个一个删除，当所有文件删除完毕后，返回到上一级目录，删除文件夹本身。</p></blockquote><h2 id="5、普及路径的小知识"><a href="#5、普及路径的小知识" class="headerlink" title="5、普及路径的小知识"></a>5、普及路径的小知识</h2><p>绝对路径：</p><pre class=" language-python"><code class="language-python">D<span class="token punctuation">:</span>\PycharmProjects\pythonProject\static</code></pre><p>相对路径：</p><p>① 同级路径，都在同一个文件夹中，兄弟关系，如static目录下有file1.txt和file2.txt，则file1.txt和file2.txt就是同级关系，==同级访问直接使用名称即可==。</p><p>② 下一级路径，我们的文件与另外一个文件存在上下级关系，如images文件夹中存在一个avatar文件夹，则images是上级目录，avatar是下级目录。==则我们访问avatar可以通过images/avatar来实现==。</p><p>③ 上一级路径，如果我们某些时候，向从当前目录下，跳出到外一层路径，我们可以使用==../==来实现。</p><h1 id="三、文件操作综合案例"><a href="#三、文件操作综合案例" class="headerlink" title="三、文件操作综合案例"></a>三、文件操作综合案例</h1><h2 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h2><p>需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><p>步骤：</p><p>① 设置添加删除字符串的的标识</p><p>② 获取指定目录的所有文件</p><p>③ 将原有文件名添加/删除指定字符串，构造新名字</p><p>④ os.rename()重命名</p><h2 id="2、编写实例代码"><a href="#2、编写实例代码" class="headerlink" title="2、编写实例代码"></a>2、编写实例代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、导入os模块</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 2、定义一个要重命名的目录</span>path <span class="token operator">=</span> <span class="token string">'static'</span><span class="token comment" spellcheck="true"># 3、切换到上面指定的目录中</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5、定义一个标识，用于确认是添加字符还是删除字符</span>flag <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您要执行的操作（1-添加字符，2-删除字符）：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、对目录中的所有文件进行遍历输出 => os.listdir()</span><span class="token keyword">for</span> file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 5、判断我们要执行的操作（1-添加字符，2-删除字符）</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 01.txt => python-01.txt</span>        newname <span class="token operator">=</span> <span class="token string">'python-'</span> <span class="token operator">+</span> file        <span class="token comment" spellcheck="true"># 重命名操作</span>        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>file<span class="token punctuation">,</span> newname<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'文件批量重命名成功'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># python-01.txt => 01.txt</span>        index <span class="token operator">=</span> len<span class="token punctuation">(</span><span class="token string">'python-'</span><span class="token punctuation">)</span>        newname <span class="token operator">=</span> file<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 重命名操作</span>        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>file<span class="token punctuation">,</span> newname<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'文件批量重命名成功'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入标识不正确，请重新输入...'</span><span class="token punctuation">)</span></code></pre><h1 id="四、面向对象编程思想"><a href="#四、面向对象编程思想" class="headerlink" title="四、面向对象编程思想"></a>四、面向对象编程思想</h1><h2 id="1、什么是面向过程"><a href="#1、什么是面向过程" class="headerlink" title="1、什么是面向过程"></a>1、什么是面向过程</h2><p>传统的面向过程的编程思想总结起来就八个字——==自顶向下，逐步细化！==</p><p>→ 将要实现的功能描述为一个从开始到结束按部就班的连续的“步骤”</p><p>→ 依次逐步完成这些步骤，如果某一个步骤的难度较大，又可以将该步骤再次细化为若干个子步骤，以此类推，一直到结尾并得到我们想要的结果</p><blockquote><p>就是把要开发的系统分解为若干个步骤，每个步骤就是函数，当所有步骤全部完成以后，则这个系统就开发完毕了！</p></blockquote><p>举个栗子：大家以来传智教育报名学习这件事情，可以分成哪些步骤？开始 → 学员<strong>提出</strong>报名，<strong>提供</strong>相关材料 → 学生<strong>缴纳</strong>学费，<strong>获得</strong>缴费凭证 → 教师凭借学生缴费凭证进行<strong>分配</strong>班级 → 班级<strong>增加</strong>学生信息 → 结束所谓的面向过程，就是将上面分析好了的步骤，依次执行就行了！</p><h2 id="2、什么是面向对象"><a href="#2、什么是面向对象" class="headerlink" title="2、什么是面向对象"></a>2、什么是面向对象</h2><p>思考：上面的整个报名过程，都有哪些动词？</p><p><strong>提出、提供、缴纳、获得、分配、增加</strong></p><p>有动词就一定有实现这个动作的实体！</p><p>所谓的模拟现实世界，就是使计算机的编程语言在解决相关业务逻辑的时候，与真实的业务逻辑的发生保持一致，需要使任何一个动作的发生都存在一个支配给该动作的一个实体（主体），因为在现实世界中，任何一个功能的实现都可以看做是一个一个的实体在发挥其各自的“功能”（能力）并在内部进行协调有序的调用过程！</p><h2 id="3、举个栗子：使用面向对象实现报名系统开发"><a href="#3、举个栗子：使用面向对象实现报名系统开发" class="headerlink" title="3、举个栗子：使用面向对象实现报名系统开发"></a>3、举个栗子：使用面向对象实现报名系统开发</h2><h3 id="☆-第一步：分析哪些动作是由哪些实体发出的"><a href="#☆-第一步：分析哪些动作是由哪些实体发出的" class="headerlink" title="☆ 第一步：分析哪些动作是由哪些实体发出的"></a>☆ 第一步：分析哪些动作是由哪些实体发出的</h3><p><strong>学生</strong>提出报名</p><p><strong>学生</strong>提供相关资料</p><p><strong>学生</strong>缴费</p><p><strong>机构</strong>收费</p><p><strong>教师</strong>分配教室</p><p><strong>班级</strong>增加学生信息 </p><p>于是，在整个过程中，一共有四个实体：<strong>学生、机构、教师、班级</strong>！在现实中的一个具体的实体，就是计算机编程中的一个==对象==！</p><h3 id="☆-第二步：定义这些实体，为其增加相应的属性和功能"><a href="#☆-第二步：定义这些实体，为其增加相应的属性和功能" class="headerlink" title="☆ 第二步：定义这些实体，为其增加相应的属性和功能"></a>☆ 第二步：定义这些实体，为其增加相应的属性和功能</h3><p>属性就是实体固有的某些特征特性信息，在面向对象的术语中，属性就是以前的变量。</p><p>比如</p><p>一个人的属性有：身高、体重、三围、姓名、年龄、学历、电话、籍贯、毕业院校等</p><p>一个手机的属性有：价格、品牌、操作系统、颜色、尺寸等</p><p>功能就是就是实体可以完成的动作，在面向对象的术语中，功能就是封装成了函数或方法</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012109365.png" alt="image-20210316122158360"></p><h3 id="☆-第三步：让实体去执行相应的功能或动作"><a href="#☆-第三步：让实体去执行相应的功能或动作" class="headerlink" title="☆ 第三步：让实体去执行相应的功能或动作"></a>☆ 第三步：让实体去执行相应的功能或动作</h3><p>学生提出报名</p><p>学生提供相关资料</p><p>教师登记学生信息</p><p>学生缴费</p><p>机构收费</p><p>教师分配教室</p><p>班级增加学生信息</p><h2 id="4、面向对象编程思想迁移"><a href="#4、面向对象编程思想迁移" class="headerlink" title="4、面向对象编程思想迁移"></a>4、面向对象编程思想迁移</h2><p>以前写代码，首先想到的是需要实现什么功能——调用系统函数，或者自己自定义函数，然后按部就班的执行就行了！</p><p>以后写代码，==首先想到的是应该由什么样的主体去实现什么样的功能，再把该主体的属性和功能统一的进行封装，最后才去实现各个实体的功能。==</p><p>注意：面向对象并不是一种技术，而是一种思想，是一种解决问题的最基本的思维方式！ </p><p>所以，面向对象的核心思想是：==不仅仅是简单的将功能进行封装（封装成函数），更是对调用该功能的主体进行封装，实现某个主体拥有多个功能，在使用的过程中，先得到对应的主体，再使用主体去实现相关的功能！==</p><h2 id="5、面向对象要比面向过程好？"><a href="#5、面向对象要比面向过程好？" class="headerlink" title="5、面向对象要比面向过程好？"></a>5、面向对象要比面向过程好？</h2><p>一个面试题：面向过程和面向对象的区别？</p><p>① 都可以实现代码重用和模块化编程，面向对象的模块化更深，数据也更封闭和安全</p><p>② 面向对象的思维方式更加贴近现实生活，更容易解决大型的复杂的业务逻辑</p><p>③ 从前期开发的角度来看，面向对象比面向过程要更复杂，但是从维护和扩展的角度来看，面向对象要远比面向过程简单！</p><p>④ 面向过程的代码执行效率比面向对象高</p><h1 id="五、面向对象的基本概念"><a href="#五、面向对象的基本概念" class="headerlink" title="五、面向对象的基本概念"></a>五、面向对象的基本概念</h1><h2 id="1、面向对象中两个比较重要概念"><a href="#1、面向对象中两个比较重要概念" class="headerlink" title="1、面向对象中两个比较重要概念"></a>1、面向对象中两个比较重要概念</h2><h3 id="☆-对象"><a href="#☆-对象" class="headerlink" title="☆ 对象"></a>☆ 对象</h3><p>对象，object，现实业务逻辑的一个动作实体就对应着OOP编程中的一个对象！</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012109903.png" alt="image-20210316143602528"></p><p>所以：① 对象使用属性（property）保存数据！② 对象使用方法（method）管理数据！</p><h3 id="☆-类"><a href="#☆-类" class="headerlink" title="☆ 类"></a>☆ 类</h3><p>对象如何产生？又是如何规定对象的属性和方法呢？</p><p>答：==在Python中，采用类（class）来生产对象，用类来规定对象的属性和方法！也就是说，在Python中，要想得到对象，必须先有类！==</p><p>为什么要引入类的概念？ 类本来就是对现实世界的一种模拟，在现实生活中，任何一个实体都有一个类别，==类就是具有相同或相似属性和动作的一组实体的集合！==所以，在Python中，对象是指现实中的一个具体的实体，而既然现实中的实体都有一个类别，所以，OOP中的对象也都应该有一个类！</p><p>一个对象的所有应该具有特征特性信息，都是由其所属的类来决定的，但是每个对象又可以具有不同的特征特性信息，比如，我自己（人类）这个对象，名字叫老王，性别男，会写代码，会教书；另一个对象（人类）可能叫赵薇，性别女，会演戏，会唱歌！</p><h2 id="2、类的定义"><a href="#2、类的定义" class="headerlink" title="2、类的定义"></a>2、类的定义</h2><p>在Python中，我们可以有两种类的定义方式：Python2（经典类）和 Python3（新式类）</p><p>经典类：不由任意内置类型派生出的类，称之为经典类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> 类名<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 属性</span>    <span class="token comment" spellcheck="true"># 方法</span></code></pre><p>新式类：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 属性</span>    <span class="token comment" spellcheck="true"># 方法</span></code></pre><p>这就是一个类，只不过里面什么都没有！其中，==类名不区分大小写，遵守一般的标识符的命名规则（以字母、数字和下划线构成，并且不能以数字开头），一般为了和方法名相区分，类名的首字母一般大写！（大驼峰法）==</p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 属性</span>    <span class="token comment" spellcheck="true"># 方法（函数）</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我喜欢吃零食'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我喜欢喝可乐'</span><span class="token punctuation">)</span></code></pre><h2 id="3、类的实例化（创建对象）"><a href="#3、类的实例化（创建对象）" class="headerlink" title="3、类的实例化（创建对象）"></a>3、类的实例化（创建对象）</h2><p>类的实例化就是把抽象的事务具体为现实世界中的实体。</p><p>类的实例化就是==通过类得到对象！==</p><p>类只是对象的一种规范，类本身基本上什么都做不了，必须利用类得到对象，这个过程就叫作==类的实例化！==</p><p>基本语法：</p><pre class=" language-python"><code class="language-python">对象名 <span class="token operator">=</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>在其他的编程语言中，类的实例化一般是通过new关键字实例化生成的，但是在Python中，我们不需要new关键字，只需要类名＋()括号就代表类的实例。</p></blockquote><p>案例：把Person类实例化为为对象p1</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义相关方法</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我喜欢吃零食'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我喜欢喝可乐'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2、实例化对象</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、调用类中的方法</span>p1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4、类中的self关键字"><a href="#4、类中的self关键字" class="headerlink" title="4、类中的self关键字"></a>4、类中的self关键字</h2><p>self也是Python内置的关键字之一，其指向了==类实例对象本身==。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义一个方法</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Nice to meet you!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、类的实例化（生成对象）</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>p2<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>一句话总结：类中的self就是谁实例化了对象，其就指向谁。</p></blockquote><h1 id="六、对象的属性添加与获取"><a href="#六、对象的属性添加与获取" class="headerlink" title="六、对象的属性添加与获取"></a>六、对象的属性添加与获取</h1><h2 id="1、什么是属性"><a href="#1、什么是属性" class="headerlink" title="1、什么是属性"></a>1、什么是属性</h2><p>在Python中，任何一个对象都应该由两部分组成：属性 + 方法</p><p>属性即是特征，比如：人的姓名、年龄、身高、体重…都是对象的属性。</p><p>​                                                 车的品牌、型号、颜色、载重量…都是对象的属性。</p><p>对象属性既可以在类外面添加和获取，也能在类里面添加和获取。</p><h2 id="2、在类的外面添加属性和获取属性"><a href="#2、在类的外面添加属性和获取属性" class="headerlink" title="2、在类的外面添加属性和获取属性"></a>2、在类的外面添加属性和获取属性</h2><h3 id="☆-设置"><a href="#☆-设置" class="headerlink" title="☆ 设置"></a>☆ 设置</h3><pre class=" language-python"><code class="language-python">对象名<span class="token punctuation">.</span>属性 <span class="token operator">=</span> 属性值</code></pre><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个Person类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 2、实例化Person类，生成p1对象</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、为p1对象添加属性</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'老王'</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>p1<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">'北京市顺义区京顺路99号'</span></code></pre><h3 id="☆-获取"><a href="#☆-获取" class="headerlink" title="☆ 获取"></a>☆ 获取</h3><p>在Python中，获取对象属性的方法我们可以通过<code>对象名.属性</code>来获取</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个Person类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 2、实例化Person类，生成p1对象</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、为p1对象添加属性</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'老王'</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>p1<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">'北京市顺义区京顺路99号'</span><span class="token comment" spellcheck="true"># 4、获取p1对象的属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的姓名：{p1.name}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的年龄：{p1.age}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的住址：{p1.address}'</span><span class="token punctuation">)</span></code></pre><h2 id="3、在类的内部获取外部定义的属性"><a href="#3、在类的内部获取外部定义的属性" class="headerlink" title="3、在类的内部获取外部定义的属性"></a>3、在类的内部获取外部定义的属性</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个Person类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字：{self.name}，我的年龄：{self.age}，我的住址：{self.address}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、实例化Person类，生成p1对象</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、添加属性</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'孙悟空'</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">500</span>p1<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">'花果山水帘洞'</span><span class="token comment" spellcheck="true"># 4、调用speak方法</span>p1<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>遗留一个问题：目前我们的确可以通过<code>对象.属性</code>的方式设置或获取对象的属性，但是这种设置属性的方式有点繁琐，每次定义一个对象，就必须手工设置属性，在我们面向对象中，对象的属性能不能在实例化对象时，直接进行设置呢？</p><p>答：可以，但是需要使用魔术方法</p><h1 id="七、魔术方法"><a href="#七、魔术方法" class="headerlink" title="七、魔术方法"></a>七、魔术方法</h1><h2 id="1、什么是魔术方法"><a href="#1、什么是魔术方法" class="headerlink" title="1、什么是魔术方法"></a>1、什么是魔术方法</h2><p>在Python中，<code>__xxx__()</code>的函数叫做魔法方法，指的是具有==特殊功能==的函数。</p><h2 id="2、-init-方法-初始化方法或构造方法"><a href="#2、-init-方法-初始化方法或构造方法" class="headerlink" title="2、_init_()方法(初始化方法或构造方法)"></a>2、_<em>init</em>_()方法(初始化方法或构造方法)</h2><p>思考：人的姓名、年龄等信息都是与生俱来的属性，可不可以在生产过程中就赋予这些属性呢？</p><p>答：可以，使用<code>__init__()</code> 方法，其作用：实例化对象时，连带其中的参数，会一并传给<code>__init__</code>函数自动并执行它。<code>__init__()</code>函数的参数列表会在开头多出一项，它永远指代新建的那个实例对象，Python语法要求这个参数必须要有，名称为self。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化实例对象属性</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 赋予name属性、age属性给实例化对象本身</span>        <span class="token comment" spellcheck="true"># self.实例化对象属性 = 参数</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token comment" spellcheck="true"># 2、实例化对象并传入初始化属性值</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、调用p1对象自身属性name与age</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><blockquote><p>① _<em>init</em>_()方法，在创建一个对象时默认被调用，不需要手动调用</p><p>② _<em>init</em>_(self)中的self参数，不需要开发者传递，python解释器会自动把当前的对象</p><p>引用传递过去。</p></blockquote><h2 id="3、-str-方法"><a href="#3、-str-方法" class="headerlink" title="3、_str_()方法"></a>3、_<em>str</em>_()方法</h2><p>当使用print输出对象的时候，默认打印对象的内存地址。如果类定义了<code>__str__</code>方法，那么就会打印从在这个方法中 return 的数据。</p><p>没有使用<code>__str__()</code>方法的类：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个类</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 首先定义一个__init__方法，用于初始化实例对象属性</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>brand <span class="token operator">=</span> brand        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token comment" spellcheck="true"># 定义一个__str__内置魔术方法，用于输出小汽车的相关信息</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'汽车品牌：{self.brand}，汽车型号：{self.model}，汽车颜色：{self.color}'</span><span class="token comment" spellcheck="true"># 2、实例化对象c1</span>c1 <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'奔驰'</span><span class="token punctuation">,</span> <span class="token string">'S600'</span><span class="token punctuation">,</span> <span class="token string">'黑色'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span></code></pre><p>① <code>__str__</code>这个魔术方法是在类的外部，使用print(对象)时，自动被调用的</p><p>② 在类的内部定义<code>__str__</code>方法时，必须使用return返回一个字符串类型的数据</p><h2 id="4、-del-方法（删除方法或析构方法）"><a href="#4、-del-方法（删除方法或析构方法）" class="headerlink" title="4、__del__()方法（删除方法或析构方法）"></a>4、<code>__del__()</code>方法（删除方法或析构方法）</h2><p>当删除对象时，python解释器也会默认调用<code>__del__()</code>方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造函数__init__</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age            <span class="token comment" spellcheck="true"># 析构方法__del__</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self}对象已经被删除'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化对象</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'白骨精'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除对象p1</span><span class="token keyword">del</span> p1</code></pre><p><code>__del__()</code>方法在使用过程中，比较简单，但是其在实际开发中，有何作用呢？</p><p>答：主要用于关闭文件操作、关闭数据库连接等等。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>提到魔术方法：① 这个方法在什么情况下被触发 ② 这个方法有什么实际的作用</p><p><code>__init__()</code>：初始化方法或者称之为“构造函数”，在对象初始化时执行，其主要作用就是在对象初始化时，对对象进行初始化操作（如赋予属性）</p><p><code>__str__()</code>：对象字符串方法，当我们在类的外部，使用print方法输出对象时被触发，其主要功能就是对对象进行打印输出操作，要求方法必须使用return返回字符串格式的数据。</p><p><code>__del__()</code>：删除方法或者称之为“析构方法”，在对象被del删除时触发，其主要作用就是适用于关闭文件、关闭数据库连接等等。</p><h1 id="八、面向对象的综合案例"><a href="#八、面向对象的综合案例" class="headerlink" title="八、面向对象的综合案例"></a>八、面向对象的综合案例</h1><p>案例1：定义学员信息类，包含姓名、成绩属性，定义成绩打印方法（90分及以上显示优秀，80分及以上显示良好，70分及以上显示中等，60分及以上显示合格，60分以下显示不及格）</p><p>学员对象（属性、方法）</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012109721.png" alt="image-20210316171224229"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义学员信息类</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 2、定义学员对象属性</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score    <span class="token comment" spellcheck="true"># 3、定义一个方法，用于打印学员的成绩等级</span>    <span class="token keyword">def</span> <span class="token function">print_grade</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'学员姓名：{self.name}，学员成绩：{self.score}，优秀'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'学员姓名：{self.name}，学员成绩：{self.score}，良好'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'学员姓名：{self.name}，学员成绩：{self.score}，中等'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'学员姓名：{self.name}，学员成绩：{self.score}，及格'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'学员姓名：{self.name}，学员成绩：{self.score}，不及格'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、实例化对象</span>tom <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>print_grade<span class="token punctuation">(</span><span class="token punctuation">)</span>jennifier <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Jennifier'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span>jennifier<span class="token punctuation">.</span>print_grade<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>案例2：小明体重75.0公斤，小明每次跑步会减掉0.50公斤，小明每次吃东西体重增加1公斤分析：① 对象：小明② 属性：姓名、体重③ 方法：跑步、吃东西</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012109263.png" alt="image-20210316174908823"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义Person类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 2、初始化对象属性，name和weight</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight    <span class="token comment" spellcheck="true"># 3、定义一个__str__方法打印对象的信息</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'姓名：{self.name}，目前体重：{self.weight}KG'</span>    <span class="token comment" spellcheck="true"># 4、定义一个run方法代表跑步</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight <span class="token operator">-=</span> <span class="token number">0.5</span>    <span class="token comment" spellcheck="true"># 5、定义一个eat方法代表吃饭</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 6、实例化对象</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">75.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7、吃饭</span>xiaoming<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8、减肥跑步</span>xiaoming<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span></code></pre><h1 id="九、面向对象的三大特性"><a href="#九、面向对象的三大特性" class="headerlink" title="九、面向对象的三大特性"></a>九、面向对象的三大特性</h1><h2 id="1、面向对象有哪些特性"><a href="#1、面向对象有哪些特性" class="headerlink" title="1、面向对象有哪些特性"></a>1、面向对象有哪些特性</h2><p>三种：封装性、继承性、多态性</p><h2 id="2、Python中的封装"><a href="#2、Python中的封装" class="headerlink" title="2、Python中的封装"></a>2、Python中的封装</h2><p>在Python代码中，封装有两层含义：</p><p>① 把现实世界中的主体中的属性和方法书写到类的里面的操作即为封装</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 封装属性</span>    <span class="token comment" spellcheck="true"># 封装方法</span></code></pre><p>② 封装可以为属性和方法添加为私有权限</p><h2 id="3、封装中的私有属性和私有方法"><a href="#3、封装中的私有属性和私有方法" class="headerlink" title="3、封装中的私有属性和私有方法"></a>3、封装中的私有属性和私有方法</h2><p>在面向对象代码中，我们可以把属性和方法分为两大类：公有（属性、方法）、私有（属性、方法）</p><p>公有属性和公有方法：无论在类的内部还是在类的外部我们都可以对属性和方法进行操作。</p><p>但是有些情况下，我们不希望在类的外部对类内部的属性和方法进行操作。我们就可以把这个属性或方法封装成私有形式。</p><h2 id="4、私有属性的访问限制"><a href="#4、私有属性的访问限制" class="headerlink" title="4、私有属性的访问限制"></a>4、私有属性的访问限制</h2><p>设置私有属性和私有方法的方式非常简单：在属性名和方法名 前面 加上两个下划线 <code>__</code> 即可。</p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span>xiaomei <span class="token operator">=</span> Girl<span class="token punctuation">(</span><span class="token string">'小美'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 报错，提示Girl对象没有__age属性</span></code></pre><blockquote><p>类中的私有属性和私有方法，不能被其子类继承。</p></blockquote><p>由以上代码运行可知，私有属性不能在类的外部被直接访问。但是出于种种原因，我们想在外部对私有属性进行访问，该如何操作呢？</p><p>答：我们可以定义一个统计的访问”接口”（函数），专门用于实现私有属性的访问。</p><h2 id="5、私有属性设置与访问接口"><a href="#5、私有属性设置与访问接口" class="headerlink" title="5、私有属性设置与访问接口"></a>5、私有属性设置与访问接口</h2><p>在Python中，一般定义函数名’ get_xx ‘用来获取私有属性，定义’ set_xx ‘用来修改私有属性值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment" spellcheck="true"># 公共方法：提供给外部的访问接口</span>    <span class="token keyword">def</span> <span class="token function">get_age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 本人访问：允许直接访问</span>        <span class="token comment" spellcheck="true"># 外人访问：加上限制条件</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__age    <span class="token comment" spellcheck="true"># 公共方法：提供给外部的设置接口</span>    <span class="token keyword">def</span> <span class="token function">set_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> agegirl <span class="token operator">=</span> Girl<span class="token punctuation">(</span><span class="token string">'小美'</span><span class="token punctuation">)</span>girl<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>get_age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="6、私有方法"><a href="#6、私有方法" class="headerlink" title="6、私有方法"></a>6、私有方法</h2><p>私有方法的定义方式与私有属性基本一致，在方法名的前面添加两个下划线<code>__方法名()</code></p><h2 id="7、封装性到底有何意义"><a href="#7、封装性到底有何意义" class="headerlink" title="7、封装性到底有何意义"></a>7、封装性到底有何意义</h2><p>① 以面向对象的编程思想进行项目开发</p><p>② 封装数据属性：明确的区分内外，控制外部对隐藏的属性的操作行为（过滤掉异常数据）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">tell_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Name:&lt;%s> Age:&lt;%s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对私有属性的访问接口</span>    <span class="token keyword">def</span> <span class="token function">set_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>name<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'名字必须是字符串类型'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>age<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'年龄必须是数字类型'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> agep <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>tell_info<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>set_info<span class="token punctuation">(</span><span class="token string">'jennifer'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>tell_info<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>set_info<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>tell_info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>③ 私有方法封装的意义：降低程序的复杂度</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ATM</span><span class="token punctuation">:</span>    <span class="token keyword">def</span>  <span class="token function">__card</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'插卡'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span>  <span class="token function">__auth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户认证'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__input</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入取款金额'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__print_bill</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打印账单'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__take_money</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'取款'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个对外提供服务的公共方法</span>    <span class="token keyword">def</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>__card<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>__auth<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>__input<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>__print_bill<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>__take_money<span class="token punctuation">(</span><span class="token punctuation">)</span>atm <span class="token operator">=</span> ATM<span class="token punctuation">(</span><span class="token punctuation">)</span>atm<span class="token punctuation">.</span>withdraw<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day07之Python函数进阶与文件操作</title>
      <link href="/2022/03/03/022-python-ji-chu-07/"/>
      <url>/2022/03/03/022-python-ji-chu-07/</url>
      
        <content type="html"><![CDATA[<h1 id="一、作业回顾"><a href="#一、作业回顾" class="headerlink" title="一、作业回顾"></a>一、作业回顾</h1><h2 id="1、格式化输出与-百分号"><a href="#1、格式化输出与-百分号" class="headerlink" title="1、格式化输出与%百分号"></a>1、格式化输出与%百分号</h2><p>以下结果中，可以正常输出“50%及格”语句是（B）</p><p>A、print(“%d%及格” % (50))    =&gt;  回答大部分结果（Python这种写法不正确）</p><p>B、print(“%d%%及格” % (50))  =&gt;  正确结果</p><h2 id="2、字符串切片"><a href="#2、字符串切片" class="headerlink" title="2、字符串切片"></a>2、字符串切片</h2><p>定义一个字符串str1 = ‘abcdefg’，使用切片截取字符串str1[3::-2]，求返回结果：（C）</p><p>C、’db’</p><h2 id="3、字典的定义"><a href="#3、字典的定义" class="headerlink" title="3、字典的定义"></a>3、字典的定义</h2><p>其实字典中的key可以是很多数据类型（不可变数据类型 =&gt; 整型、浮点型、字符串、元组）</p><pre class=" language-python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>my_dict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>my_dict<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>my_dict<span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> my_dict<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token operator">+</span> my_dict<span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h1 id="二、引用变量与可变、非可变类型"><a href="#二、引用变量与可变、非可变类型" class="headerlink" title="二、引用变量与可变、非可变类型"></a>二、引用变量与可变、非可变类型</h1><h2 id="1、引用变量"><a href="#1、引用变量" class="headerlink" title="1、引用变量"></a>1、引用变量</h2><p>在大多数编程语言中，值的传递通常可以分为两种形式“值传递与引用传递”，但是在Python中变量的传递基本上都是引用传递。</p><h3 id="☆-聊聊变量在内存底层的存储形式"><a href="#☆-聊聊变量在内存底层的存储形式" class="headerlink" title="☆ 聊聊变量在内存底层的存储形式"></a>☆ 聊聊变量在内存底层的存储形式</h3><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>第一步：首先在计算机内存中创建一个数值10（占用一块内存空间）</p><p>第二步：在栈空间中声明一个变量，如a</p><p>第三步：把数值10的内存地址赋予给变量小a，形成所谓的==“引用关系”==</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107233.png" alt="image-20210315100015772"></p><h3 id="☆-如何验证Python中变量的引用关系"><a href="#☆-如何验证Python中变量的引用关系" class="headerlink" title="☆ 如何验证Python中变量的引用关系"></a>☆ 如何验证Python中变量的引用关系</h3><p>答：可以使用内置方法id()，其参数就是要显示的变量信息 =&gt; <code>id(变量名称)</code></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-把一个变量赋予给另外一个变量的影响"><a href="#☆-把一个变量赋予给另外一个变量的影响" class="headerlink" title="☆ 把一个变量赋予给另外一个变量的影响"></a>☆ 把一个变量赋予给另外一个变量的影响</h3><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108531.png" alt="image-20210315100748118"></p><p>说明：由以上运行结果可知，当我们把一个变量赋予给另外一个变量时，其两者指向的内存地址相同。就说明a和b指向了同一块内存空间，原理图如下：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107842.png" alt="image-20210315101115722"></p><p>思考：如果在b = a以后，我们改变了变量a的值，问变量b是否会受到影响？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># a = 10</span><span class="token comment" spellcheck="true"># print(id(a))</span>a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> aa <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 10 或 100</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>原理图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107030.png" alt="image-20210315101547645"></p><p>总结：不可变数据类型（数值）在赋值以后，其中一个值的改变不影响另外一个变量，因为两者指向空间地址不同。</p><h2 id="2、Python中可变和非可变数据类型"><a href="#2、Python中可变和非可变数据类型" class="headerlink" title="2、Python中可变和非可变数据类型"></a>2、Python中可变和非可变数据类型</h2><h3 id="☆-问题1：在Python中一共有几种数据类型？"><a href="#☆-问题1：在Python中一共有几种数据类型？" class="headerlink" title="☆ 问题1：在Python中一共有几种数据类型？"></a>☆ 问题1：在Python中一共有几种数据类型？</h3><p>答：7种，数值（int整型、float浮点类型）、bool类型（True和False）、字符串类型（str）、元组（tuple 1,2,3）、列表（list [1, 2, 3]）、字典（dict {key:value})、集合（set {1, 2})</p><p>在Python中，我们可以把7种数据类型分为两大类：可变类型 + 非可变类型</p><p>① 非可变类型</p><p>数值（int整型、float浮点类型）</p><p>bool类型（True和False）</p><p>字符串类型（str）</p><p>元组（tuple 1,2,3）</p><p>② 可变类型</p><p>列表（list [1, 2, 3]）</p><p>字典（dict {key:value})</p><p>集合（set {1, 2})</p><h3 id="☆-问题2：如何判断一个数据类型是可变类型还是非可变类型？"><a href="#☆-问题2：如何判断一个数据类型是可变类型还是非可变类型？" class="headerlink" title="☆ 问题2：如何判断一个数据类型是可变类型还是非可变类型？"></a>☆ 问题2：如何判断一个数据类型是可变类型还是非可变类型？</h3><p>在Python中，可变类型与非可变类型主要是通过这个数据类型在内存中的表现形式来进行定义的。</p><p>==① 可变类型就是在内存中，其内存地址一旦固定，其值是可以发生改变的==</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 向内存中追加新数据（对数据进行改变只能通过数据类型.方法()实现）</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>原理图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108627.png" alt="image-20210315103357217"></p><p>==② 非可变类型就是在内存中，内存地址一旦固定，其值就没办法发生任何改变了==</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>原理图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108244.png" alt="image-20210315103823240"></p><h2 id="3、可变类型与非可变类型在函数中的应用"><a href="#3、可变类型与非可变类型在函数中的应用" class="headerlink" title="3、可变类型与非可变类型在函数中的应用"></a>3、可变类型与非可变类型在函数中的应用</h2><h3 id="☆-可变类型"><a href="#☆-可变类型" class="headerlink" title="☆ 可变类型"></a>☆ 可变类型</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个全局变量</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 调用函数</span>func<span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><p>原理图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108048.png" alt="image-20210315110548353"></p><p>综上所述：可变类型在函数中，如果在全局或局部中对可变类型进行增删改操作，其外部和内部都会受到影响。</p><h3 id="☆-不可变类型"><a href="#☆-不可变类型" class="headerlink" title="☆ 不可变类型"></a>☆ 不可变类型</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个全局变量</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 调用函数</span>func<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在全局作用域中打印a</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108325.png" alt="image-20210315111142925"></p><p>综上所述：不可变类型在函数中，局部或全局的改变对外部和内部都没有任何影响。</p><h1 id="三、函数递归（重点难点）"><a href="#三、函数递归（重点难点）" class="headerlink" title="三、函数递归（重点难点）"></a>三、函数递归（重点难点）</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>编程思想：如何利用数学模型，来解决对应的需求问题；然后利用代码实现对应的数据模</p><p>算法：使用代码实现对应的数学模型，从而解决对应的业务问题</p><blockquote><p>程序 = 算法 + 数据结构</p></blockquote><p>在我们经常使用的算法中，有两种非常常用的算法：<code>递推算法 + 递归算法</code>，专门用于解决一些比较复杂，但是拆分后相似度又非常高的程序。</p><h2 id="2、递推算法"><a href="#2、递推算法" class="headerlink" title="2、递推算法"></a>2、递推算法</h2><p>递归算法：递推算法是一种简单的算法，即通过已知条件，利用特定条件得出中间推论，直至得到结果的算法。递推又分为顺推和逆推。</p><p>顺推：通过最简单的条件，然后逐步推演结果</p><p>逆推：通过结果找到规律，然后推导已知条件</p><p>递推算法案例：斐波那契数列</p><p>1   1    2    3    5    8    13    21   …</p><p>① ② ③  ④  ⑤  ⑥ …</p><p>第1位为1，第2位为1，第3位为2 = 1 + 1，第4位为3 = 2 + 1，依次类推…第n位结果为多少？</p><p>f(n) = f(n-1) + f(n-2)</p><p>提出问题：求斐波那契数列第15位的结果？</p><p>分析：f(15) = f(14) + f(13)  </p><p>​            f(14) = f(13) + f(12)</p><p>​            f(13) = f(12) + f(11)</p><p>​            …</p><p>​            f(4)   =  f(3) + f(2)   = 3  +  1</p><p>​            f(3)   =  f(2) + f(1)   = 2</p><p>​            f(2)  =   1</p><p>​           f(1)   =   1</p><p>递推算法：使用while循环或for循环</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 递推算法：根据已知条件，求结果（或者根据结果求未知条件）</span><span class="token keyword">def</span> <span class="token function">recusive</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 返回斐波那契数列某一位（n>=1）的结果 """</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 开始递推f(3) = f(2) + f(1)  f(4) = f(3) + f(2) ... f(15) = f(14) + f(13)</span>    dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># f(3) = f(2) + f(1)</span>        <span class="token comment" spellcheck="true"># f(i) = f(i-1) + f(i-2)</span>        dict1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dict1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dict1<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dict1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 函数调用</span><span class="token keyword">print</span><span class="token punctuation">(</span>recusive<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3、什么是递归算法"><a href="#3、什么是递归算法" class="headerlink" title="3、什么是递归算法"></a>3、什么是递归算法</h2><p>程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用，它通常==把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解==，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。</p><p>① 简化问题：找到最优子问题（不能再小） ② 函数自己调用自己</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 自己调用自己</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4、递归两种重要的元素"><a href="#4、递归两种重要的元素" class="headerlink" title="4、递归两种重要的元素"></a>4、递归两种重要的元素</h2><p>递归有两个非常重要的概念：</p><p>==① 递归点==：找到解决当前问题的等价函数（先解决规模比当前问题小一些的函数，依次类推，最终实现对问题的解决） =&gt; 有递有归</p><p>==② 递归出口==：当问题解决的时候，已经到达（必须存在）最优问题，不能再次调用函数了</p><blockquote><p>注：如果一个递归函数没有递归出口就变成了死循环</p></blockquote><h2 id="5、编写递归三步走"><a href="#5、编写递归三步走" class="headerlink" title="5、编写递归三步走"></a>5、编写递归三步走</h2><p>==① 明确你这个函数想要干什么==</p><p>如：求斐波那契数列</p><p>==② 寻找递归结束条件==</p><p>如：就是在什么情况下，递归会停止循环，返回结果</p><p>==③ 找出函数的等价关系式==</p><p>如：斐波那契数列，第n位 f(n) = f(n-1) + f(n-2)</p><p>案例1：使用递归求斐波那契数列</p><p>第一步：明确这个函数想要干什么（先定义出来，明确调用方式）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 斐波那契数列 1 1 2 3 5 8 13 21 ...</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写递归代码求第n位的结果</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 610</span></code></pre><p>第二步：寻找递归的结束条件</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 斐波那契数列 1 1 2 3 5 8 13 21 ...</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写递归代码求第n位的结果</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 610</span></code></pre><p>第三步：找出函数的等价关系式(最关键的一步)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 斐波那契数列 1 1 2 3 5 8 13 21 ...</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写递归代码求第n位的结果</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 找出与斐波那契数列等价的关系式</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 610</span></code></pre><p>案例2：使用递归求N的阶乘（如n=100）</p><p>阶乘是什么？一个正整数的阶乘（factorial）是所有小于及等于该数的正整数的积，如：n!=1×2×3×…×(n-1)×n</p><p>1! = 1</p><p>2! = 1x2 = 2</p><p>3! = 1x2x3 = 6</p><p>4! = 1x2x3x4 = 24</p><p>…</p><p>n!=1×2×3×…×(n-1)×n</p><p>第一步：明确这个函数要做什么以及定义函数以及调用方式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写递归条件</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第二步：寻找递归的结束条件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写递归结束条件</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n    <span class="token comment" spellcheck="true"># ...递归等式</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第三步：编写递归等价公式（自己要调用自己）</p><p>等价公式 = 找规律</p><p>1! = f(1) = 1</p><p>2! = f(2) = 2</p><p>3! = f(2)x3 = 6</p><p>4! = f(3)x4 = 24</p><p>…</p><p>n!= f(n-1) * n</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写递归结束条件</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n    <span class="token comment" spellcheck="true"># ...递归等式</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例3：面试题 =&gt; 猴子吃桃问题</p><p>猴子吃桃问题。猴子第1天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。第2天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半另加一个。到第10天早上想再吃时，就只剩下一个桃子了。求第1天共摘了多少个桃子</p><p>第一步：确定函数主要要完成什么功能，需要传递哪些参数，确认调用方式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写递归代码</span>    <span class="token comment" spellcheck="true"># 调用f函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第二步：编写递归的结束条件（出口）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：确定函数功能</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第二步：编写递归结束条件（出口）</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第三步：找出与这个问题相等的等式关系</p><p>求桃子的剩余数量？假设法：假设有10个桃子</p><p>第1天，10个桃子吃一半，10/2 = 5 + 1 = 6</p><p>第2天，4个桃子吃一半，4/2 = 2 + 1 = 3</p><p>第3天，再想吃剩1个</p><p>第n天，总剩余桃子的数量 = （第(n+1)天桃子的剩余桃子的数量 + 1) * 2</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：确定函数功能</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第二步：编写递归结束条件（出口）</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 第三步：寻找与这个问题相似的等价公式</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="四、lambda表达式"><a href="#四、lambda表达式" class="headerlink" title="四、lambda表达式"></a>四、lambda表达式</h1><h2 id="1、普通函数与匿名函数"><a href="#1、普通函数与匿名函数" class="headerlink" title="1、普通函数与匿名函数"></a>1、普通函数与匿名函数</h2><p>在Python中，函数是一个被命名的、独立的完成特定功能的一段代码，并可能给调用它的程序一个返回值。</p><p>所以在Python中，函数大多数是有名函数 =&gt; 普通函数。但是有些情况下，我们为了简化程序代码，也可以定义匿名函数 =&gt; lambda表达式</p><h2 id="2、lambda表达式应用场景"><a href="#2、lambda表达式应用场景" class="headerlink" title="2、lambda表达式应用场景"></a>2、lambda表达式应用场景</h2><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化。</p><h2 id="3、lambda表达式基本语法"><a href="#3、lambda表达式基本语法" class="headerlink" title="3、lambda表达式基本语法"></a>3、lambda表达式基本语法</h2><pre class=" language-python"><code class="language-python">变量 <span class="token operator">=</span> <span class="token keyword">lambda</span> 函数参数<span class="token punctuation">:</span>表达式（函数代码 <span class="token operator">+</span> <span class="token keyword">return</span>返回值）<span class="token comment" spellcheck="true"># 调用变量</span>变量<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4、编写lambda表达式"><a href="#4、编写lambda表达式" class="headerlink" title="4、编写lambda表达式"></a>4、编写lambda表达式</h2><p>定义一个函数，经过一系列操作，最终返回100</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">100</span><span class="token comment" spellcheck="true"># 调用fn1函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回fn1函数在内存中的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 代表找到fn1函数的地址并立即执行</span></code></pre><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108530.png" alt="image-20210315150207427"></p><p>lambda表达式进行简化：</p><pre class=" language-python"><code class="language-python">fn2 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回fn2在内存中的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="5、编写带参数的lambda表达式"><a href="#5、编写带参数的lambda表达式" class="headerlink" title="5、编写带参数的lambda表达式"></a>5、编写带参数的lambda表达式</h2><p>编写一个函数求两个数的和</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fn1</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>lambda表达式进行简化：</p><pre class=" language-python"><code class="language-python">fn2 <span class="token operator">=</span> <span class="token keyword">lambda</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">:</span>num1 <span class="token operator">+</span> num2<span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="6、lambda表达式相关应用"><a href="#6、lambda表达式相关应用" class="headerlink" title="6、lambda表达式相关应用"></a>6、lambda表达式相关应用</h2><h3 id="☆-带默认参数的lambda表达式"><a href="#☆-带默认参数的lambda表达式" class="headerlink" title="☆ 带默认参数的lambda表达式"></a>☆ 带默认参数的lambda表达式</h3><pre class=" language-python"><code class="language-python">fn <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-不定长参数：可变参数-args"><a href="#☆-不定长参数：可变参数-args" class="headerlink" title="☆  不定长参数：可变参数*args"></a>☆  不定长参数：可变参数*args</h3><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args <span class="token punctuation">:</span> args<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-不定长参数：可变参数-kwargs"><a href="#☆-不定长参数：可变参数-kwargs" class="headerlink" title="☆ 不定长参数：可变参数**kwargs"></a>☆ 不定长参数：可变参数**kwargs</h3><pre class=" language-python"><code class="language-python">fn2 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">**</span>kwargs <span class="token punctuation">:</span> kwargs<span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">'北京市海淀区'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-带if判断的lambda表达式"><a href="#☆-带if判断的lambda表达式" class="headerlink" title="☆ 带if判断的lambda表达式"></a>☆ 带if判断的lambda表达式</h3><pre class=" language-python"><code class="language-python">fn <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b <span class="token punctuation">:</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-列表数据-字典数据排序（重点）"><a href="#☆-列表数据-字典数据排序（重点）" class="headerlink" title="☆ 列表数据+字典数据排序（重点）"></a>☆ 列表数据+字典数据排序（重点）</h3><p>知识点：列表.sort(key=排序的key索引, reverse=True)</p><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按name值升序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按name值降序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按age值升序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span></code></pre><p>执行流程：</p><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按name值升序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span></code></pre><h1 id="五、Python中高阶函数"><a href="#五、Python中高阶函数" class="headerlink" title="五、Python中高阶函数"></a>五、Python中高阶函数</h1><h2 id="1、什么是高阶函数"><a href="#1、什么是高阶函数" class="headerlink" title="1、什么是高阶函数"></a>1、什么是高阶函数</h2><p>把==函数作为参数传入==，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p><h2 id="2、高阶函数的由来"><a href="#2、高阶函数的由来" class="headerlink" title="2、高阶函数的由来"></a>2、高阶函数的由来</h2><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p><p>① 正数的绝对值是它本身 ② 负数的绝对值是它的相反数</p><p>abs()返回的结果都是正数</p><pre class=" language-python"><code class="language-python">abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10</span></code></pre><p><code>round()</code>函数可以完成对数字的四舍五入计算。</p><pre class=" language-python"><code class="language-python">round<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>round<span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span></code></pre><p>需求：任意两个数字，按照指定要求（① 绝对值 ② 四舍五入）整理数字后再进行求和计算。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fn1</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> abs<span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fn2</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> round<span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> round<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">(</span><span class="token number">10.2</span><span class="token punctuation">,</span> <span class="token number">6.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>要求：我们能不能对以上进行简化，然后合并为同一个函数 =&gt; 设计思想（高阶函数）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># f代表要传入的参数（参数是一个函数名，如abs或round）</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绝对值求和</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 四舍五入</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">(</span><span class="token number">10.2</span><span class="token punctuation">,</span> <span class="token number">6.9</span><span class="token punctuation">,</span> round<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3、map-函数"><a href="#3、map-函数" class="headerlink" title="3、map()函数"></a>3、map()函数</h2><p><code>map(func, lst)</code>，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的列表(Python2)/迭代器(Python3)返回。</p><p>lst = [1, 2, 3]</p><p>func函数：求某个数的平方，如输入2返回4，输入3返回9</p><p><code>map(func, lst)</code>返回结果[1, 4, 9]</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n <span class="token operator">**</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 定义一个列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用map对lst进行func函数操作</span>list2 <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span></code></pre><h2 id="4、reduce-函数"><a href="#4、reduce-函数" class="headerlink" title="4、reduce()函数"></a>4、reduce()函数</h2><p><code>reduce(func，lst)</code>，其中func必须有两个参数。每次func计算的结果继续和序列的下一个元素做累加计算。&gt; 注意：reduce()传入的参数func必须接收2个参数。</p><p>list1 = [1, 2, 3]</p><p>def func(a, b):</p><p>​       return a + b</p><p><code>reduce(func，lst)</code>则把列表中的每个元素放入func中进行加工，然后进行累加操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> functools<span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token comment" spellcheck="true"># 定义一个列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>sums <span class="token operator">=</span> functools<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span>func<span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sums<span class="token punctuation">)</span></code></pre><h2 id="5、filter-函数"><a href="#5、filter-函数" class="headerlink" title="5、filter()函数"></a>5、filter()函数</h2><p>filter(func, lst)函数用于过滤序列, 过滤掉不符合条件的元素, 返回一个 filter 对象。如果要转换为列表, 可以使用 list() 来转换。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数（获取所有的偶数）</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 定义一个序列</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 调用filter函数进行过滤操作</span>result <span class="token operator">=</span> filter<span class="token punctuation">(</span>func<span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="六、文件的概念"><a href="#六、文件的概念" class="headerlink" title="六、文件的概念"></a>六、文件的概念</h1><h2 id="1、什么是文件"><a href="#1、什么是文件" class="headerlink" title="1、什么是文件"></a>1、什么是文件</h2><p>内存中存放的数据在计算机关机后就会消失。要长久保存数据，就要使用硬盘、光盘、U 盘等设备。为了便于数据的管理和检索，引入了==“文件”==的概念。</p><p>一篇文章、一段视频、一个可执行程序，都可以被保存为一个文件，并赋予一个文件名。操作系统以文件为单位管理磁盘中的数据。一般来说，==文件可分为文本文件、视频文件、音频文件、图像文件、可执行文件等多种类别。==</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108528.png" alt="image-20210315171013811"></p><h2 id="2、思考：文件操作包含哪些内容呢？"><a href="#2、思考：文件操作包含哪些内容呢？" class="headerlink" title="2、思考：文件操作包含哪些内容呢？"></a>2、思考：文件操作包含哪些内容呢？</h2><p>在日常操作中，我们对文件的主要操作：创建文件、打开文件、文件读写、文件备份等等</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108775.png" alt="image-20210315171310117"></p><h2 id="3、文件操作的作用"><a href="#3、文件操作的作用" class="headerlink" title="3、文件操作的作用"></a>3、文件操作的作用</h2><p>文件操作的作用就是==把一些内容(数据)存储存放起来==，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力。</p><h1 id="七、文件的基本操作"><a href="#七、文件的基本操作" class="headerlink" title="七、文件的基本操作"></a>七、文件的基本操作</h1><h2 id="1、文件操作三步走"><a href="#1、文件操作三步走" class="headerlink" title="1、文件操作三步走"></a>1、文件操作三步走</h2><p>① 打开文件</p><p>② 读写文件</p><p>③ 关闭文件</p><h2 id="2、open函数打开文件"><a href="#2、open函数打开文件" class="headerlink" title="2、open函数打开文件"></a>2、open函数打开文件</h2><p>在Python，使用open()函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>注：返回的结果是一个file文件对象（后续会学习，只需要记住，后续方法都是f<span class="token punctuation">.</span>方法<span class="token punctuation">(</span><span class="token punctuation">)</span>）</code></pre><p>name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</p><p>mode：设置打开文件的模式(访问模式)：只读r、写入w、追加a等。</p><blockquote><p>r模式：代表以只读模式打开一个已存在的文件，后续我们对这个文件只能进行读取操作。如果文件不存在，则直接报错。另外，r模式在打开文件时，会将光标放在文件的一行。</p></blockquote><blockquote><p>w模式：代表以只写模式打开一个文件，文件不存在，则自动创建该文件。w模式主要是针对文件写入而定义的模式。但是，要特别注意，w模式在写入时，光标也是置于第一行同时还会清空原有文件内容。</p></blockquote><blockquote><p>a模式：代表以追加模式打开一个文件，文件不存在，则自动创建该文件。a模式主要也是针对文件写入而定义模式。但是和w模式有所不同，a模式不会清空文件的原有内容，而是在文件的尾部追加内容。</p></blockquote><h2 id="3、write函数写入文件"><a href="#3、write函数写入文件" class="headerlink" title="3、write函数写入文件"></a>3、write函数写入文件</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python">f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'要写入的内容，要求是一个字符串类型的数据'</span><span class="token punctuation">)</span></code></pre><h2 id="4、close函数关闭文件"><a href="#4、close函数关闭文件" class="headerlink" title="4、close函数关闭文件"></a>4、close函数关闭文件</h2><pre class=" language-python"><code class="language-python">f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="5、入门级案例"><a href="#5、入门级案例" class="headerlink" title="5、入门级案例"></a>5、入门级案例</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、打开文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、写入内容</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'人生苦短，我学Python！'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>强调一下：中文乱码问题，默认情况下，计算机常用编码ASCII、GBK、UTF-8</p></blockquote><h2 id="6、解决写入中文乱码问题"><a href="#6、解决写入中文乱码问题" class="headerlink" title="6、解决写入中文乱码问题"></a>6、解决写入中文乱码问题</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、打开文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、写入内容</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'人生苦短，我学Python！'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="7、文件的读取操作"><a href="#7、文件的读取操作" class="headerlink" title="7、文件的读取操作"></a>7、文件的读取操作</h2><p><code>read(size)方法</code>：主要用于文本类型或者二进制文件（图片、音频、视频…）数据的读取</p><p>size表示要从文件中读取的数据的长度（单位是字节），如果没有传入size，那么就表示读取文件中所有的数据。</p><pre class=" language-python"><code class="language-python">f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取文件的所有内容</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取1024个字节长度文件内容，字母或数字，一个占1个字节长度。中文utf-8占3个字节长度。</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、打开文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、使用read()方法读取文件所有内容</span>contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>readlines()方法</code>：主要用于文本类型数据的读取</p><p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、打开文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、读取文件</span>lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="8、聊聊文件操作的mode模式"><a href="#8、聊聊文件操作的mode模式" class="headerlink" title="8、聊聊文件操作的mode模式"></a>8、聊聊文件操作的mode模式</h2><table><thead><tr><th><strong>模式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><blockquote><p>虽然mode文件操作模式很多，但是我们只需要记住3个字符即可。r、w、a</p></blockquote><blockquote><p>r+、w+、a+，代加号，功能全，既能读，又能写（区别在于指针到底指向不同）</p></blockquote><blockquote><p>rb、wb、ab，代b的字符，代表以二进制的形式对其进行操作，适合读取文本或二进制格式文件，如图片、音频、视频等格式</p></blockquote><blockquote><p>rb+、wb+、ab+，代加号，功能全，既能读，又能写（区别在于指针到底指向不同）</p></blockquote><h2 id="9、seek函数移动光标"><a href="#9、seek函数移动光标" class="headerlink" title="9、seek函数移动光标"></a>9、seek函数移动光标</h2><p>无论是文件读操作，还是写操作。其起始位置都是文件光标决定的。</p><p>r =&gt; 文件头</p><p>w =&gt; 清空文件内容，指向文件头</p><p>a =&gt; 文件尾</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012108898.png" alt="image-20210315183136345"></p><p>光标在刚打开文件时，默认情况下是根据r、w、a模式相关固定的。但是我们可以通过某些方法，人为移动光标。可以通过seek方法实现。</p><pre><code>f.seek(offset,whence=0)offset：开始的偏移量，也就是代表需要移动偏移的字节数whence：给offset参数一个定义，表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</code></pre><p>实际工作中，seek主要用于重置光标到起始位置。</p><pre class=" language-python"><code class="language-python">f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>或f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>其他应用：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'workfile'</span><span class="token punctuation">,</span> <span class="token string">'rb+'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'0123456789abcdef'</span><span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 从0开始向右移动5个字节</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>b<span class="token string">'5'</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 从右向左移动3个字节</span><span class="token number">13</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>b<span class="token string">'d'</span></code></pre><h1 id="八、文件备份案例"><a href="#八、文件备份案例" class="headerlink" title="八、文件备份案例"></a>八、文件备份案例</h1><h2 id="1、案例需求"><a href="#1、案例需求" class="headerlink" title="1、案例需求"></a>1、案例需求</h2><p>需求：用户输入当前目录下任意文件名，完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><p>实现思路：</p><p>① 接收用户输入的文件名</p><p>② 规划备份文件名</p><p>③ 备份文件写入数据</p><h2 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、接收用户输入的文件名（要备份的文件名）</span>oldname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要备份的文件名称：'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># python.txt</span><span class="token comment" spellcheck="true"># 2、规划备份文件名（python[备份].txt）</span><span class="token comment" spellcheck="true"># 搜索点号</span>index <span class="token operator">=</span> oldname<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回文件名和文件后缀</span>name <span class="token operator">=</span> oldname<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>postfix <span class="token operator">=</span> oldname<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span>newname <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> postfix<span class="token comment" spellcheck="true"># 3、对文件进行备份操作</span>old_f <span class="token operator">=</span> open<span class="token punctuation">(</span>oldname<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>new_f <span class="token operator">=</span> open<span class="token punctuation">(</span>newname<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取源文件内容写入新文件</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、关闭文件</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day06之Python中的函数</title>
      <link href="/2022/03/03/021-python-ji-chu-06/"/>
      <url>/2022/03/03/021-python-ji-chu-06/</url>
      
        <content type="html"><![CDATA[<h1 id="一、作业回顾"><a href="#一、作业回顾" class="headerlink" title="一、作业回顾"></a>一、作业回顾</h1><p>需求：编写一段Python代码，生成一个随机的4位验证码</p><p>提前：定义一个字符串</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">"23456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"</span></code></pre><p>编写Python代码：</p><p>① 思考：如果只生成4个字符的验证码，如何只保证从字符串中读取4次（while循环、for循环）</p><p>② 思考：如果随机的从str1字符串中读取4个字符？random.randint()生成随机数</p><p>③ 思考：如果从字符串提取出某个字符？答：使用索引下标，str1[索引下标]</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 1、定义一个字符串</span>str1 <span class="token operator">=</span> <span class="token string">"23456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"</span>code <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true"># 2、编写循环，只循环4次</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 0 1 2 3</span>    <span class="token comment" spellcheck="true"># 3、随机获取str1中的某个字符</span>    index <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    code <span class="token operator">+=</span> str1<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 4、打印4位随机验证码</span><span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span></code></pre><h1 id="二、Python中函数的作用与使用步骤"><a href="#二、Python中函数的作用与使用步骤" class="headerlink" title="二、Python中函数的作用与使用步骤"></a>二、Python中函数的作用与使用步骤</h1><h2 id="1、为什么需要函数"><a href="#1、为什么需要函数" class="headerlink" title="1、为什么需要函数"></a>1、为什么需要函数</h2><p>在Python实际开发中，我们使用函数的目的只有一个“让我们的代码可以被重复使用”</p><p>函数的作用有两个：</p><p>① 模块化编程</p><p>② 代码重用</p><blockquote><p>在编程领域，编程可以分为两大类：① 模块化编程 ② 面向对象编程</p></blockquote><h2 id="2、什么是函数"><a href="#2、什么是函数" class="headerlink" title="2、什么是函数"></a>2、什么是函数</h2><p>所谓的函数就是一个==被命名的==、==独立的、完成特定功能的代码段（一段连续的代码）==，并可能给调用它的程序一个==返回值==。</p><p>被命名的：在Python中，函数大多数是有名函数。当然Python中也存在没有名字的函数叫做匿名函数。</p><p>独立的、完成特定功能的代码段：在实际项目开发中，定义函数前一定要先思考一下，这个函数是为了完成某个操作或某个功能而定义的。（函数的功能一定要专一）</p><p>返回值：很多函数在执行完毕后，会通过return关键字返回一个结果给调用它的位置。</p><h2 id="3、函数的定义"><a href="#3、函数的定义" class="headerlink" title="3、函数的定义"></a>3、函数的定义</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名称<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    函数体    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">return</span> 返回值<span class="token punctuation">]</span></code></pre><h2 id="4、函数的调用"><a href="#4、函数的调用" class="headerlink" title="4、函数的调用"></a>4、函数的调用</h2><p>在Python中，函数和变量一样，都是先定义后使用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义函数</span><span class="token keyword">def</span> 函数名称<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    函数体    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">return</span> 返回值<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 调用函数</span>函数名称<span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><h2 id="5、通过一个栗子引入函数"><a href="#5、通过一个栗子引入函数" class="headerlink" title="5、通过一个栗子引入函数"></a>5、通过一个栗子引入函数</h2><p>① 使用Python代码，编写一个打招呼程序</p><pre class=" language-python"><code class="language-python">第一步：见到一个老师，打一声招呼<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您好'</span><span class="token punctuation">)</span>第二步：见到一个老师，打一声招呼<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您好'</span><span class="token punctuation">)</span>第二步：见到一个老师，打一声招呼<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您好'</span><span class="token punctuation">)</span></code></pre><p>虽然以上程序可以满足程序的需求，但是我们发现，我们的代码做了很多重复性的工作。我们能不能对以上代码进行进一步的优化，避免代码的重复性编写。</p><p>② 升级：使用Python代码，编写一个打招呼程序（函数——一次编写，多次利用）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义函数（封装函数）</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您好'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token comment" spellcheck="true"># 见到一个老师，打一声招呼</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 见到一个老师，打一声招呼</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 见到一个老师，打一声招呼</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>③ 升级：使用Python代码编写一个打招呼程序，可以实现向不同的人打不同的招呼</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数，同时为其定义一个参数</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{name}，您好'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token comment" spellcheck="true"># 见到了张老师，打一声招呼</span>greet<span class="token punctuation">(</span><span class="token string">'老张'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 见到了李老师，打一声招呼</span>greet<span class="token punctuation">(</span><span class="token string">'老李'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 见到了王老师，打一声招呼</span>greet<span class="token punctuation">(</span><span class="token string">'老王'</span><span class="token punctuation">)</span></code></pre><p>④ 函数的设计原则“高内聚、低耦合”，函数执行完毕后，应该主动把数返回给调用处，而不应该都交由print()等函数直接输出。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数，拥有name参数，同时函数执行完毕后，拥有一个return返回值</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 执行一系列相关操作</span>    <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">'，您好'</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token comment" spellcheck="true"># 见到了张老师，打一声招呼</span><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token string">'老张'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 老张，您好</span><span class="token comment" spellcheck="true"># 见到了李老师，打一声招呼</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[0;31;40m\t"</span> <span class="token operator">+</span> greet<span class="token punctuation">(</span><span class="token string">'老李'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\033[0m"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 见到了王老师，打一声招呼</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[0;36;40m\t"</span> <span class="token operator">+</span> greet<span class="token punctuation">(</span><span class="token string">'老王'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\033[0m"</span><span class="token punctuation">)</span></code></pre><blockquote><p>终端颜色参考：<a href="https://www.cnblogs.com/zhuminghui/p/9457185.html">https://www.cnblogs.com/zhuminghui/p/9457185.html</a></p></blockquote><h2 id="6、聊聊return返回值"><a href="#6、聊聊return返回值" class="headerlink" title="6、聊聊return返回值"></a>6、聊聊return返回值</h2><p>思考1：如果一个函数如些两个return (如下所示)，程序如何执行？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">return_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">2</span>result <span class="token operator">=</span> return_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><p>答：只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</p><p>思考2：如果一个函数要有多个返回值，该如何书写代码？</p><p>答：在Python中，理论上一个函数只能返回一个结果。但是如果我们向让一个函数可以同时返回多个结果，我们可以使用<code>return 元组</code>的形式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">return_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>result <span class="token operator">=</span> return_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span></code></pre><p>思考3：封装一个函数，参数有两个num1，num2，求两个数的四则运算结果</p><p>四则运算：加、减、乘、除</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    jia <span class="token operator">=</span> num1 <span class="token operator">+</span> num2    jian <span class="token operator">=</span> num1 <span class="token operator">-</span> num2    cheng <span class="token operator">=</span> num1 <span class="token operator">*</span> num2    chu <span class="token operator">=</span> num1 <span class="token operator">/</span> num2    <span class="token keyword">return</span> jia<span class="token punctuation">,</span> jian<span class="token punctuation">,</span> cheng<span class="token punctuation">,</span> chu<span class="token comment" spellcheck="true"># 调用size方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="三、Python函数中的说明文档"><a href="#三、Python函数中的说明文档" class="headerlink" title="三、Python函数中的说明文档"></a>三、Python函数中的说明文档</h1><h2 id="1、什么是说明文档"><a href="#1、什么是说明文档" class="headerlink" title="1、什么是说明文档"></a>1、什么是说明文档</h2><p>思考：定义一个函数后，程序员如何书写程序能够快速提示这个函数的作用？</p><p>答：注释</p><p>思考：如果代码多，我们是不是需要在很多代码中找到这个函数定义的位置才能看到注释？如果想更方便的查看函数的作用怎么办？</p><p>答：==函数的说明文档（函数的说明文档也叫函数的文档说明）==</p><h2 id="2、定义函数的说明文档"><a href="#2、定义函数的说明文档" class="headerlink" title="2、定义函数的说明文档"></a>2、定义函数的说明文档</h2><p>① 定义函数的说明文档</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个menu菜单函数</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 2、定义通讯录增加操作方法</span><span class="token keyword">def</span> <span class="token function">add_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 函数的说明文档：add_student方法不需要传递任何参数，其功能就是实现对通讯录的增加操作 """</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 3、定义通讯录删除操作方法</span><span class="token keyword">def</span> <span class="token function">del_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 4、定义通讯录修改操作方法</span><span class="token keyword">def</span> <span class="token function">modify_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 5、定义通讯录查询操作方法</span><span class="token keyword">def</span> <span class="token function">find_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>② 调用函数的说明文档</p><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span>函数名称<span class="token punctuation">)</span></code></pre><p>案例：调用add_student()方法</p><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span>add_student<span class="token punctuation">)</span></code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107813.png" alt="image-20210313112721575"></p><h2 id="3、封装一个函数，用于生成指定长度的验证码"><a href="#3、封装一个函数，用于生成指定长度的验证码" class="headerlink" title="3、封装一个函数，用于生成指定长度的验证码"></a>3、封装一个函数，用于生成指定长度的验证码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个generate_code()函数</span><span class="token keyword">def</span> <span class="token function">generate_code</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" generate_code方法主要用于生成指定长度的验证码，有一个num参数，需要传递一个int类型的数值，其return返回结果为num长度的随机验证码 """</span>    <span class="token keyword">import</span> random    <span class="token comment" spellcheck="true"># 第一步：定义一个字符串</span>    str1 <span class="token operator">=</span> <span class="token string">"23456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"</span>    <span class="token comment" spellcheck="true"># 第二步：循环num次，代表生成num长度的字符串</span>    code <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 第三步：从字符串中随机抽取num个字符</span>        index <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        code <span class="token operator">+=</span> str1<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 第四步：使用return返回验证码</span>    <span class="token keyword">return</span> code<span class="token comment" spellcheck="true"># 求帮助（查看generate_code函数的作用以及需要传递的参数）</span><span class="token comment" spellcheck="true"># help(generate_code)</span><span class="token comment" spellcheck="true"># 调用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>generate_code<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="四、函数的嵌套"><a href="#四、函数的嵌套" class="headerlink" title="四、函数的嵌套"></a>四、函数的嵌套</h1><h2 id="1、什么是函数的嵌套"><a href="#1、什么是函数的嵌套" class="headerlink" title="1、什么是函数的嵌套"></a>1、什么是函数的嵌套</h2><p>所谓函数嵌套调用指的是==一个函数里面又调用了另外一个函数==。</p><h2 id="2、函数嵌套的基本语法"><a href="#2、函数嵌套的基本语法" class="headerlink" title="2、函数嵌套的基本语法"></a>2、函数嵌套的基本语法</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107209.png" alt="image-20210313120335429"></p><p>嵌套函数的执行流程：</p><p>第一步：Python代码遵循一个“顺序原则”，从上往下，从左往右一行一行执行</p><p>当代码执行到第1行时，则在计算机内存中定义一个funcB函数。但是其内部的代码并没有真正的执行，跳过第2行继续向下运行。</p><p>第二步：执行到第5行，发现又声明了一个funcA的函数，根据函数的定义原则，定义就是在内存中声明有这样一个函数，但是没有真正的调用和执行。</p><p>第三步：代码继续向下执行，到第14行，发现funcA()，函数体()就代表调用funcA函数并执行其内部的代码。程序返回到第6行，然后一步一步向下执行，输出40个横杠，然后打印这是funcA函数的函数体部分…，然后继续向下执行，遇到funcB函数，后边有一个圆括号代表执行funcB函数，原程序处于等待状态。</p><p>第四步：进入funcB函数，执行输出这是funcB函数的函数体部分…，当代码完毕后，返回funcA函数中funcB()的位置，继续向下执行，打印40个横杠。</p><p>最终程序就执行结束了。</p><h2 id="3、PyCharm调试小技巧"><a href="#3、PyCharm调试小技巧" class="headerlink" title="3、PyCharm调试小技巧"></a>3、PyCharm调试小技巧</h2><p>Step over（F8）：代码一步一步向下执行，但是遇到了函数以后，不进入函数体内部，直接返回函数的最终的执行结果。</p><p>Step into（F7）：代码一步一步向下执行，但是遇到了函数以后，进入到函数体内部，一步一步向下执行，直到函数体的代码全部执行完毕。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107244.png" alt="image-20210313121451376"></p><h2 id="4、通过一个案例描述函数嵌套"><a href="#4、通过一个案例描述函数嵌套" class="headerlink" title="4、通过一个案例描述函数嵌套"></a>4、通过一个案例描述函数嵌套</h2><p>百度百科，搜索Python语言词条</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107249.png" alt="image-20210313122008684"></p><p>嵌套函数funcB和funcC</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107783.png" alt="image-20210313122120183"></p><p>在funcA函数执行过程中，如果遇到了funcB则跳入funcB函数继续执行，当funcB执行完毕后，会自动返回funcA函数，继续向下运行，依次类推，直到funcA函数执行完毕。</p><h1 id="五、函数的应用案例"><a href="#五、函数的应用案例" class="headerlink" title="五、函数的应用案例"></a>五、函数的应用案例</h1><p>案例1：使用print方法打印一条横线</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span></code></pre><p>案例2：对案例1进行升级，可以根据输入的num数值，生成指定数量的横线</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_lines</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" print_lines函数主要作用用于生成多条指定长度的横线，拥有两个参数num和length，都是int整型数据，num用于控制生成的横线数量，length用于控制生成横线的长度 """</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> length<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用函数</span><span class="token comment" spellcheck="true"># help(print_lines)</span>print_lines<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span></code></pre><p>案例3：封装一个函数，用于求3个数的平均值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">average_num</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" average_num函数主要用于生成3个数的平均值，一共有3个参数，num1、num2、num3，要求是整型或浮点类型的数据，其返回结果就是三个数的平均值 """</span>    sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3    <span class="token comment" spellcheck="true"># 求平均值</span>    <span class="token keyword">return</span> sum<span class="token operator">/</span><span class="token number">3</span><span class="token comment" spellcheck="true"># 调用average_num方法</span><span class="token comment" spellcheck="true"># help(average_num)</span><span class="token keyword">print</span><span class="token punctuation">(</span>average_num<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>练习题：编写一个函数，有一个参数str1，输入信息如’1.2.3.4.5’，使用函数对齐进行处理，要求最终的返回结果为’5-4-3-2-1’</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 方法一：对字符串进行翻转操作(切片)</span>    str1 <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 方法二：使用split切割，然后reverse进行翻转</span>    <span class="token comment" spellcheck="true"># list1 = str1.split('.')</span>    <span class="token comment" spellcheck="true"># list1.reverse()</span>    <span class="token comment" spellcheck="true"># return '-'.join(list1)</span><span class="token comment" spellcheck="true"># 调用函数实现字符串翻转拼接</span>str1 <span class="token operator">=</span> <span class="token string">'1.2.3.4.5'</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5-4-3-2-1</span></code></pre><h1 id="六、变量的作用域"><a href="#六、变量的作用域" class="headerlink" title="六、变量的作用域"></a>六、变量的作用域</h1><h2 id="1、什么是变量的作用域"><a href="#1、什么是变量的作用域" class="headerlink" title="1、什么是变量的作用域"></a>1、什么是变量的作用域</h2><p>变量作用域指的是变量的作用范围（变量在哪里可用，在哪里不可用），主要分为两类：局部变量和全局变量。</p><h2 id="2、局部变量与全局变量"><a href="#2、局部变量与全局变量" class="headerlink" title="2、局部变量与全局变量"></a>2、局部变量与全局变量</h2><p>在Python中，定义在函数外部的变量就称之为全局变量；定义在函数内部变量就称之为局部变量。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义在函数外部的变量（全局变量）</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 函数体代码</span>    <span class="token comment" spellcheck="true"># 定义在函数内部的变量（局部变量）</span>    i <span class="token operator">=</span> <span class="token number">1</span></code></pre><h2 id="3、变量作用域的作用范围"><a href="#3、变量作用域的作用范围" class="headerlink" title="3、变量作用域的作用范围"></a>3、变量作用域的作用范围</h2><p>全局变量：在整个程序范围内都可以直接使用</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 在函数内部调用全局变量str1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'在局部作用域中调用str1变量：{str1}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直接调用全局变量str1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'在全局作用域中调用str1变量：{str1}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用func函数</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>局部变量：在函数的调用过程中，开始定义，函数运行过程中生效，函数执行完毕后，销毁</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 在函数内部定义一个局部变量</span>    num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'在局部作用域中调用num局部变量：{num}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用func函数</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在全局作用域中调用num局部变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'在全局作用域中调用num局部变量：{num}'</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107128.png" alt="image-20210313145728886"></p><blockquote><p>普及小知识：计算机的垃圾回收机制</p></blockquote><h2 id="4、global关键字"><a href="#4、global关键字" class="headerlink" title="4、global关键字"></a>4、global关键字</h2><p>思考：如果有一个数据，在函数A和函数B中都要使用，该怎么办？</p><p>答：将这个数据存储在一个全局变量里面。</p><p>案例：如果把通讯录管理系统更改为模块化编程模式（程序 =&gt; 函数），面临问题：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义全局变量</span>info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义funcA函数</span><span class="token keyword">def</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 使用global声明全局变量</span>    <span class="token keyword">global</span> info    <span class="token comment" spellcheck="true"># 向info全局变量中添加数据</span>    info<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义funcB函数</span><span class="token keyword">def</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 共享全局作用域中的全局变量info</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>这个会产生一个问题：我们能不能在局部作用域中对全局变量进行修改呢？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义全局变量num = 10</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 定义一个函数func</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 尝试在局部作用域中修改全局变量</span>    num <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true"># 调用函数func</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 尝试访问全局变量num</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><p>最终结果：弹出10，所以由运行结果可知，在函数体内部理论上是没有办法对全局变量进行修改的，所以一定要进行修改，必须使用<code>global</code>关键字。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义全局变量num = 10</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 定义一个函数func</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 尝试在局部作用域中修改全局变量</span>    <span class="token keyword">global</span> num    num <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true"># 调用函数func</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 尝试访问全局变量num</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h2 id="5、多函数之间数据的共享"><a href="#5、多函数之间数据的共享" class="headerlink" title="5、多函数之间数据的共享"></a>5、多函数之间数据的共享</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义全局变量</span>info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义funcA函数:向全局变量中添加信息</span><span class="token keyword">def</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 使用global声明全局变量</span>    <span class="token keyword">global</span> info    <span class="token comment" spellcheck="true"># 向info全局变量中添加数据</span>    info<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义funcB函数:查询功能，需要共享全局作用域中的通讯录信息</span><span class="token keyword">def</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 共享全局作用域中的全局变量info</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="6、把函数的返回值作为另外一个函数的参数"><a href="#6、把函数的返回值作为另外一个函数的参数" class="headerlink" title="6、把函数的返回值作为另外一个函数的参数"></a>6、把函数的返回值作为另外一个函数的参数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">50</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1. 保存函数test1的返回值</span>result <span class="token operator">=</span> test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.将函数返回值所在变量作为参数传递到test2函数</span>test2<span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 50</span></code></pre><h1 id="七、函数的参数进阶"><a href="#七、函数的参数进阶" class="headerlink" title="七、函数的参数进阶"></a>七、函数的参数进阶</h1><h2 id="1、函数的参数"><a href="#1、函数的参数" class="headerlink" title="1、函数的参数"></a>1、函数的参数</h2><p>在函数定义与调用时，我们可以根据自己的需求来实现参数的传递。在Python中，函数的参数一共有两种形式：① 形参 ② 实参</p><p>==形参：在函数定义时，所编写的参数就称之为形式参数==</p><p>==实参：在函数调用时，所传递的参数就称之为实际参数==</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># name就是在函数greet定义时，所编写的参数（形参）</span>    <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">'，您好'</span><span class="token comment" spellcheck="true"># 调用函数</span>name <span class="token operator">=</span> <span class="token string">'老王'</span>greet<span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在函数调用时，所传递的参数就是实际参数</span></code></pre><blockquote><p>注意：虽然我们在函数传递时，喜欢使用相同的名称作为参数名称。但是两者的作用范围是不同的。name = ‘老王’，代表实参。其是一个全局变量，而greet(name)函数中的name实际是在函数定义时才声明的变量，所以其实一个局部变量。</p></blockquote><h2 id="2、函数的参数类型"><a href="#2、函数的参数类型" class="headerlink" title="2、函数的参数类型"></a>2、函数的参数类型</h2><h3 id="☆-位置参数"><a href="#☆-位置参数" class="headerlink" title="☆ 位置参数"></a>☆ 位置参数</h3><p>理论上，在函数定义时，我们可以为其定义多个参数。但是在函数调用时，我们也应该传递多个参数，正常情况，其要一一对应。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字{name}，今年{age}岁了，家里住在{address}'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用函数</span>user_info<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'美国纽约'</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意事项：位置参数强调的是参数传递的位置必须一一对应，不能颠倒</p></blockquote><h3 id="☆-关键词参数（Python特有）"><a href="#☆-关键词参数（Python特有）" class="headerlink" title="☆ 关键词参数（Python特有）"></a>☆ 关键词参数（Python特有）</h3><p>函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字{name}，今年{age}岁了，家里住在{address}'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用函数（使用关键词参数）</span>user_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">'美国纽约'</span><span class="token punctuation">)</span></code></pre><h2 id="3、函数定义时缺省参数（参数默认值）"><a href="#3、函数定义时缺省参数（参数默认值）" class="headerlink" title="3、函数定义时缺省参数（参数默认值）"></a>3、函数定义时缺省参数（参数默认值）</h2><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字{name}，今年{age}岁了，我的性别为{gender}'</span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span><span class="token string">'李林'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span><span class="token string">'振华'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span><span class="token string">'婉儿'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span></code></pre><blockquote><p>谨记：我们在定义缺省参数时，一定要把其写在参数列表的最后侧</p></blockquote><h2 id="4、不定长参数"><a href="#4、不定长参数" class="headerlink" title="4、不定长参数"></a>4、不定长参数</h2><p>不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用==包裹(packing)位置参数==，或者==包裹关键字参数==，来进行参数传递，会显得非常方便。</p><h3 id="☆-包裹-packing-位置参数"><a href="#☆-包裹-packing-位置参数" class="headerlink" title="☆ 包裹(packing)位置参数"></a>☆ 包裹(packing)位置参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(args)  # 元组类型数据，对传递参数有顺序要求</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字{args[0]}，今年{args[1]}岁了，住在{args[2]}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数，传递参数</span>user_info<span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'美国纽约'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-包裹关键字参数"><a href="#☆-包裹关键字参数" class="headerlink" title="☆ 包裹关键字参数"></a>☆ 包裹关键字参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(kwargs)  # 字典类型数据，对传递参数没有顺序要求，格式要求key = value值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字{kwargs["name"]}，今年{kwargs["age"]}岁了，住在{kwargs["address"]}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数，传递参数</span>user_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">'美国纽约'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span></code></pre><blockquote><p>kw = keyword + args</p></blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p><p>Python组包：就是把多个数据组成元组或者字典的过程。</p><h1 id="八、Python拆包（元组和字典）"><a href="#八、Python拆包（元组和字典）" class="headerlink" title="八、Python拆包（元组和字典）"></a>八、Python拆包（元组和字典）</h1><h2 id="1、什么是拆包"><a href="#1、什么是拆包" class="headerlink" title="1、什么是拆包"></a>1、什么是拆包</h2><p>Python拆包：就是把元组或字典中的数据单独的拆分出来，然后赋予给其他的变量。</p><p>拆包: 对于函数中的多个返回数据, 去掉元组, 列表 或者字典直接获取里面数据的过程。</p><h2 id="2、元组的拆包过程"><a href="#2、元组的拆包过程" class="headerlink" title="2、元组的拆包过程"></a>2、元组的拆包过程</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 经过一系列操作返回一个元组</span>    <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span>     <span class="token comment" spellcheck="true"># tuple元组类型的数据</span><span class="token comment" spellcheck="true"># 定义两个变量接收元组中的每个数组（拆包）</span>num1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印num1和num2</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span></code></pre><h2 id="3、字典的拆包过程"><a href="#3、字典的拆包过程" class="headerlink" title="3、字典的拆包过程"></a>3、字典的拆包过程</h2><p>记住：字典拆包，只能把每个元素的key拆出来</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 拆包的过程（字典）</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> dict1<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取字典中的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="4、拆包的应用案例"><a href="#4、拆包的应用案例" class="headerlink" title="4、拆包的应用案例"></a>4、拆包的应用案例</h2><p>案例1：使用至少<code>3种方式</code>交换两个变量的值</p><p>第一种方式：引入一个临时变量</p><pre class=" language-python"><code class="language-python">c1 <span class="token operator">=</span> <span class="token number">10</span>c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 引入临时变量temp</span>temp <span class="token operator">=</span> c2c2 <span class="token operator">=</span> c1c1 <span class="token operator">=</span> temp<span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span></code></pre><p>第二种方式：使用加法与减法运算交换两个变量的值（不需要引入临时变量）</p><pre class=" language-python"><code class="language-python">c1 <span class="token operator">=</span> <span class="token number">10</span>c2 <span class="token operator">=</span> <span class="token number">2</span>c1 <span class="token operator">=</span> c1 <span class="token operator">+</span> c2c2 <span class="token operator">=</span> c1 <span class="token operator">-</span> c2c1 <span class="token operator">=</span> c1 <span class="token operator">-</span> c2<span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107492.png" alt="image-20210313171658120"></p><p>第三种方法：只有Python才具有的特性，叫做拆包</p><pre class=" language-python"><code class="language-python">c1 <span class="token operator">=</span> <span class="token number">10</span>c2 <span class="token operator">=</span> <span class="token number">2</span>c1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> c2<span class="token punctuation">,</span> c1</code></pre><p>原理：</p><p>第一步：把c2和c1组成一个元组（c2，c1）</p><p>第二步：使用拆包特性，把元组中的两个元素分别赋值给c1和c2</p><p>案例2：Python中数据的传递案例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个元组（也可以是列表）</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'third'</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 需求：把元组传递给*args参数，字典传递给**kwargs</span><span class="token comment" spellcheck="true"># ① 如果想把元组传递给*args，必须在tuple1的前面加一个*号</span><span class="token comment" spellcheck="true"># ② 如果想把字典传递给**kwargs，必须在dict1的前面加两个**号</span>func<span class="token punctuation">(</span><span class="token operator">*</span>tuple1<span class="token punctuation">,</span> <span class="token operator">**</span>dict1<span class="token punctuation">)</span></code></pre><h1 id="九、使用Python函数编写通讯录系统"><a href="#九、使用Python函数编写通讯录系统" class="headerlink" title="九、使用Python函数编写通讯录系统"></a>九、使用Python函数编写通讯录系统</h1><h2 id="1、查看通讯录系统最终效果"><a href="#1、查看通讯录系统最终效果" class="headerlink" title="1、查看通讯录系统最终效果"></a>1、查看通讯录系统最终效果</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012107740.png" alt="image-20210313174341286"></p><h2 id="2、需求分析"><a href="#2、需求分析" class="headerlink" title="2、需求分析"></a>2、需求分析</h2><p>需求：进入系统显示系统功能界面，功能如下：</p><p>① 添加学员信息</p><p>② 删除学员信息</p><p>③ 修改学员信息</p><p>④ 查询学员信息</p><p>⑤ 遍历所有学员信息</p><p>⑥ 退出系统</p><p>系统共6个功能，用户根据自己需求选取</p><h2 id="3、功能实现步骤"><a href="#3、功能实现步骤" class="headerlink" title="3、功能实现步骤"></a>3、功能实现步骤</h2><p>① 显示功能界面</p><p>② 用户输入功能序号</p><p>③ 根据用户输入的功能序号，执行不同的功能(函数)</p><p>☆ 定义函数</p><p>☆ 调用函数</p><h2 id="4、模块化的编程思想"><a href="#4、模块化的编程思想" class="headerlink" title="4、模块化的编程思想"></a>4、模块化的编程思想</h2><p>模块化的编程思想是最早期的编程思想，其强调把一个系统分解为若干个功能，每个功能就是一个模块（函数）。当所有功能开发完毕后，则系统就完成了。</p><h2 id="5、使用Python开发通讯录管理系统"><a href="#5、使用Python开发通讯录管理系统" class="headerlink" title="5、使用Python开发通讯录管理系统"></a>5、使用Python开发通讯录管理系统</h2><p>① 显示功能界面</p><p>② 提示用户输入要操作的功能编号</p><p>③ 根据用户输入的序号执行相关功能 =&gt; if…elif…else</p><p>④ 如何让程序一直执行下去，而不是选择某个功能后，程序就退出了 =&gt; while True</p><p>⑤ 根据用户输入的序号，完成系统中的每一个功能</p><p>所有功能都有使用前提：必须共享一套数据 =&gt; info = [{}, {}, {}]</p><p>☆ 学员信息添加功能（add_student()）</p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day05之Python中的数据序列</title>
      <link href="/2022/03/03/020-python-ji-chu-05/"/>
      <url>/2022/03/03/020-python-ji-chu-05/</url>
      
        <content type="html"><![CDATA[<h1 id="一、作业回顾"><a href="#一、作业回顾" class="headerlink" title="一、作业回顾"></a>一、作业回顾</h1><h2 id="1、求幸运数字6"><a href="#1、求幸运数字6" class="headerlink" title="1、求幸运数字6"></a>1、求幸运数字6</h2><p>幸运数字6（只要是6的倍数）：输入任意数字，如数字8，生成nums列表，元素值为1~8，从中选取幸运数字移动到新列表lucky，打印nums与lucky。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：定义二个空列表</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>lucky <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第二步：提示用户输入数字</span>num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您要输入的数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第三步：生成nums列表（把1到num）所有的数据都追加到nums列表中</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第四步：对nums进行遍历操作，获取幸运数字</span><span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 幸运数字从nums中删除</span>        nums<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 把幸运数字写入到lucky列表中</span>        lucky<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第五步：打印nums和lucky</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lucky<span class="token punctuation">)</span></code></pre><h2 id="2、把8名讲师随机分配到3个教室"><a href="#2、把8名讲师随机分配到3个教室" class="headerlink" title="2、把8名讲师随机分配到3个教室"></a>2、把8名讲师随机分配到3个教室</h2><p>列表嵌套：有3个教室[[],[],[]]，8名讲师[‘A’,’B’,’C’,’D’,’E’,’F’,’G’,’H’]，将8名讲师随机分配到3个教室中。</p><p>分析：</p><p>思考1：我们第一间教室、第二间教室、第三间教室，怎么表示</p><pre class=" language-python"><code class="language-python">rooms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第一间教室</span>rooms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第二间教室</span>rooms<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第三间教室</span>rooms<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><p>思考2：我们如何一次从8名老师中，读出一个人</p><p>答：使用while或for进行遍历操作</p><p>思考3：我们如何在每次循环读取讲师的过程中，将其随机写入到某个教室？</p><pre class=" language-python"><code class="language-python">rooms<span class="token punctuation">[</span><span class="token number">0</span>或<span class="token number">1</span>或<span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> 读取的讲师信息</code></pre><p>综合代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 1、定义3间教室以及8名讲师</span>rooms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>teachers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 2、对所有的讲师进行遍历操作</span><span class="token keyword">for</span> teacher <span class="token keyword">in</span> teachers<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 3、生成随机数</span>    index <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    rooms<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、输出每个教室的讲师信息</span><span class="token comment" spellcheck="true"># print(rooms)</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> room <span class="token keyword">in</span> rooms<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{i}个教室中的讲师：{room}'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="3、知识点补充"><a href="#3、知识点补充" class="headerlink" title="3、知识点补充"></a>3、知识点补充</h2><p>字符串：split()方法</p><p>作用：根据指定字符对字符串进行分割操作，其返回一个列表</p><pre class=" language-python"><code class="language-python">fruit <span class="token operator">=</span> <span class="token string">'apple-banana-orange'</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>字符串：join()方法</p><p>作用：和split()方法正好相反，其主要功能是把序列拼接为字符串</p><pre class=" language-python"><code class="language-python">字符串<span class="token punctuation">.</span>join<span class="token punctuation">(</span>数据序列<span class="token punctuation">)</span></code></pre><p>案例：把水果列表[‘apple’, ‘banana’, ‘orange’]拼接成’apple-banana-orange’</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="二、元组的定义与使用"><a href="#二、元组的定义与使用" class="headerlink" title="二、元组的定义与使用"></a>二、元组的定义与使用</h1><h2 id="1、为什么需要元组"><a href="#1、为什么需要元组" class="headerlink" title="1、为什么需要元组"></a>1、为什么需要元组</h2><p>思考：如果想要存储多个数据，但是这些数据是不能修改的数据，怎么做？</p><p>答：列表？列表可以一次性存储多个数据，但是列表中的数据允许更改。</p><pre class=" language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>num_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span></code></pre><p>那这种情况下，我们想要存储多个数据且数据不允许更改，应该怎么办呢？</p><p>答：使用==元组，元组可以存储多个数据且元组内的数据是不能修改的。==</p><h2 id="2、元组的定义"><a href="#2、元组的定义" class="headerlink" title="2、元组的定义"></a>2、元组的定义</h2><p>元组特点：定义元组使用==小括号==，且使用==逗号==隔开各个数据，==数据可以是不同的数据类型。==</p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 多个数据元组</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 单个数据元组</span>tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也要添加逗号，否则数据类型为唯一的这个数据的数据类型。</p></blockquote><h2 id="3、元组的相关操作方法"><a href="#3、元组的相关操作方法" class="headerlink" title="3、元组的相关操作方法"></a>3、元组的相关操作方法</h2><p>由于元组中的数据不允许直接修改，所以其操作方法大部分为查询方法。</p><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>元组[索引]</td><td>根据==索引下标==查找元素</td></tr><tr><td>2</td><td>index()</td><td>查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同</td></tr><tr><td>3</td><td>count()</td><td>统计某个数据在当前元组出现的次数</td></tr><tr><td>4</td><td>len()</td><td>统计元组中数据的个数</td></tr></tbody></table><p>案例1：访问元组中的某个元素</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>案例2：查找某个元素在元组中出现的位置，存在则返回索引下标，不存在则直接报错</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例3：统计某个元素在元组中出现的次数</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例4：len()方法主要就是求数据序列的长度，字符串、列表、元组</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="三、字典——Python中的查询神器"><a href="#三、字典——Python中的查询神器" class="headerlink" title="三、字典——Python中的查询神器"></a>三、字典——Python中的查询神器</h1><h2 id="1、为什么需要字典"><a href="#1、为什么需要字典" class="headerlink" title="1、为什么需要字典"></a>1、为什么需要字典</h2><p>思考1：比如我们要存储一个人的信息，姓名：Tom，年龄：20周岁，性别：男，如何快速存储。</p><pre class=" language-python"><code class="language-python">person <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">]</span></code></pre><p>思考2：在日常生活中，姓名、年龄以及性别同属于一个人的基本特征。但是如果使用列表对其进行存储，则分散为3个元素，这显然不合逻辑。我们有没有办法，将其保存在同一个元素中，姓名、年龄以及性别都作为这个元素的3个属性。</p><p>答：使用Python中的字典</p><h2 id="2、Python中字典-dict-的概念"><a href="#2、Python中字典-dict-的概念" class="headerlink" title="2、Python中字典(dict)的概念"></a>2、Python中字典(dict)的概念</h2><p> 特点：</p><p>① 符号为==大括号==（花括号） =&gt;  {}</p><p>② 数据为==键值对==形式出现   =&gt;  {key:value}，key：键名，value：值，在同一个字典中，key必须是唯一（类似于索引下标）</p><p>③ 各个键值对之间用==逗号==隔开</p><p>定义：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 有数据字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 空字典</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>dict3 <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="3、字典的增操作"><a href="#3、字典的增操作" class="headerlink" title="3、字典的增操作"></a>3、字典的增操作</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python">字典名称<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value注：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</code></pre><p>案例：定义一个空字典，然后添加name、age以及address这样的3个key</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个空字典</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、向字典中添加数据</span>person<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'刘备'</span>person<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span>person<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'蜀中'</span><span class="token comment" spellcheck="true"># 3、使用print方法打印person字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></code></pre><blockquote><p>注意：列表、字典为可变类型</p></blockquote><h2 id="4、字典的删操作"><a href="#4、字典的删操作" class="headerlink" title="4、字典的删操作"></a>4、字典的删操作</h2><p>① del 字典名称[key]：删除指定元素</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个有数据的字典</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'王大锤'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'北京市海淀区'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、删除字典中的某个元素（如gender）</span><span class="token keyword">del</span> person<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 3、打印字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></code></pre><p>② clear()方法：清空字典中的所有key</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个有数据的字典</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'王大锤'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'北京市海淀区'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、使用clear()方法清空字典</span>person<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、打印字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></code></pre><h2 id="5、字典的改操作"><a href="#5、字典的改操作" class="headerlink" title="5、字典的改操作"></a>5、字典的改操作</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python">字典名称<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value注：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</code></pre><p>案例：定义一个字典，里面有name、age以及address，修改address这个key的value值</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义字典</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'花果山'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、修改字典中的数据（address）</span>person<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'东土大唐'</span><span class="token comment" spellcheck="true"># 3、打印字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></code></pre><h2 id="6、字典的查操作"><a href="#6、字典的查操作" class="headerlink" title="6、字典的查操作"></a>6、字典的查操作</h2><p>① 查询方法：使用具体的某个key查询数据，如果未找到，则直接报错。</p><pre class=" language-python"><code class="language-python">字典序列<span class="token punctuation">[</span>key<span class="token punctuation">]</span></code></pre><p>② 字典的相关查询方法</p><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>get(key, 默认值)</td><td>根据字典的key获取对应的value值，如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None</td></tr><tr><td>2</td><td>keys()</td><td>以列表返回一个字典所有的键</td></tr><tr><td>3</td><td>values()</td><td>以列表返回字典中的所有值</td></tr><tr><td>4</td><td>items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr></tbody></table><p>案例1：使用get获取字典中某个key的value值</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个字典</span>cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'美国纽约'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、获取字典的相关信息</span>name <span class="token operator">=</span> cat<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> cat<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>gender <span class="token operator">=</span> cat<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># get(key, 默认值)</span>address <span class="token operator">=</span> cat<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'姓名：{name}，年龄：{age}，性别：{gender}，住址：{address}'</span><span class="token punctuation">)</span></code></pre><p>案例2：提取person字典中的所有key</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个字典</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">:</span><span class="token string">'13765022249'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、提取字典中的name、age以及mobile属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例3：提取person字典中的所有value值</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个字典</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">:</span><span class="token string">'13765022249'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、提取字典中的貂蝉、18以及13765022249号码</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例4：使用items()方法提取数据</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个字典</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">:</span><span class="token string">'13765022249'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、调用items方法获取数据，dict_items([('name', '貂蝉'), ('age', 18), ('mobile', '13765022249')])</span><span class="token comment" spellcheck="true"># print(person.items())</span><span class="token comment" spellcheck="true"># 3、结合for循环对字典中的数据进行遍历</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> person<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{key}：{value}'</span><span class="token punctuation">)</span></code></pre><h2 id="7、综合案例：通讯录管理系统"><a href="#7、综合案例：通讯录管理系统" class="headerlink" title="7、综合案例：通讯录管理系统"></a>7、综合案例：通讯录管理系统</h2><p>需求：开个一个通讯录的管理系统，主要用于实现存储班级中同学的信息（姓名、年龄、电话）</p><p>知识点：列表、字典、死循环</p><p>延伸：在Python中，我们可以使用字典来保存一个人的基本信息。但是如果想保存多个人的信息，我们必须把列表和字典结合起来。</p><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>student <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">:</span> <span class="token string">'10086'</span><span class="token punctuation">}</span>组装：students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">:</span> <span class="token string">'10086'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'关羽'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">:</span> <span class="token string">'10000'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'张飞'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">:</span> <span class="token string">'10010'</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>为什么需要死循环：</p><p>当我们选中某个菜单时，功能一旦执行完毕，则整个程序就执行结束了。为了保存程序可以一直运行下去，可以模拟死循环的效果，让程序一直运行下去。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>要求：正常情况下，通讯录管理系统应该有4个功能：==增删==改查</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个列表，将来用于存储所有学员的通讯信息</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 2、打印功能菜单</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎使用传智教育通讯录管理系统V1.0'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[1] 增加学员信息'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[2] 删除学员信息'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[3] 退出系统'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 3、提示用户进行相关操作</span>    user_num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您要进行的操作编号：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> user_num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 4、提示用户输入学员的信息</span>        student <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        student<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入学员的姓名：'</span><span class="token punctuation">)</span>        student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入学员的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        student<span class="token punctuation">[</span><span class="token string">'mobile'</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入学员的电话：'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5、把学员信息保存在列表中</span>        students<span class="token punctuation">.</span>append<span class="token punctuation">(</span>student<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要删除的学员信息：'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 6、遍历所有学员信息</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> students<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> name<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 从列表中删除整个学员（字典）</span>                students<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您要删除的学员信息不存在'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'感谢您使用传智教育通讯录管理系统V1.0'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误，请重新输入要操作的编号'</span><span class="token punctuation">)</span></code></pre><h1 id="四、集合——求交集、并集、差集"><a href="#四、集合——求交集、并集、差集" class="headerlink" title="四、集合——求交集、并集、差集"></a>四、集合——求交集、并集、差集</h1><h2 id="1、什么是集合"><a href="#1、什么是集合" class="headerlink" title="1、什么是集合"></a>1、什么是集合</h2><p>集合（set）是一个无序的不重复元素序列。</p><p>① 天生去重</p><p>② 无序</p><h2 id="2、集合的定义"><a href="#2、集合的定义" class="headerlink" title="2、集合的定义"></a>2、集合的定义</h2><p>在Python中，我们可以使用一对花括号{}或者set()方法来定义集合，但是如果你定义的集合是一个空集合，则只能使用set()方法。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个集合：集合中存在相同的数据</span>s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'曹操'</span><span class="token punctuation">,</span> <span class="token string">'孙权'</span><span class="token punctuation">,</span> <span class="token string">'曹操'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义空集合</span>s3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>s4 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># &lt;class 'dict'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'set'></span></code></pre><h2 id="3、集合操作的相关方法（增删查）"><a href="#3、集合操作的相关方法（增删查）" class="headerlink" title="3、集合操作的相关方法（增删查）"></a>3、集合操作的相关方法（增删查）</h2><h3 id="☆-集合的增操作"><a href="#☆-集合的增操作" class="headerlink" title="☆ 集合的增操作"></a>☆ 集合的增操作</h3><p>① add()方法：向集合中增加一个元素（单一）</p><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>students<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'李哲'</span><span class="token punctuation">)</span>students<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'刘毅'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span></code></pre><p>② update()方法：向集合中增加序列类型的数据（字符串、列表、元组、字典）</p><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'关羽'</span><span class="token punctuation">,</span> <span class="token string">'赵云'</span><span class="token punctuation">]</span>students<span class="token punctuation">.</span>update<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>students<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">)</span>students<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'黎明'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用update新增元素</span>students<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'蔡徐坤'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-集合的删操作"><a href="#☆-集合的删操作" class="headerlink" title="☆ 集合的删操作"></a>☆ 集合的删操作</h3><p>① remove()方法：删除集合中的指定数据，如果数据不存在则报错。</p><p>② discard()方法：删除集合中的指定数据，如果数据不存在也不会报错。</p><p>③ pop()方法：随机删除集合中的某个数据，并返回这个数据。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义一个集合</span>products <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'萝卜'</span><span class="token punctuation">,</span> <span class="token string">'白菜'</span><span class="token punctuation">,</span> <span class="token string">'水蜜桃'</span><span class="token punctuation">,</span> <span class="token string">'奥利奥'</span><span class="token punctuation">,</span> <span class="token string">'西红柿'</span><span class="token punctuation">,</span> <span class="token string">'凤梨'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、使用remove方法删除白菜这个元素</span>products<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'白菜'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>products<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、使用discard方法删除未知元素</span>products<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'玉米'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>products<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、使用pop方法随机删除某个元素</span>del_product <span class="token operator">=</span> products<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>del_product<span class="token punctuation">)</span></code></pre><h3 id="☆-集合中的查操作"><a href="#☆-集合中的查操作" class="headerlink" title="☆ 集合中的查操作"></a>☆ 集合中的查操作</h3><p>① in ：判断某个元素是否在集合中，如果在，则返回True，否则返回False</p><p>② not in ：判断某个元素不在集合中，如果不在，则返回True，否则返回False</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个set集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'刘帅'</span><span class="token punctuation">,</span> <span class="token string">'英标'</span><span class="token punctuation">,</span> <span class="token string">'高源'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 判断刘帅是否在s1集合中</span><span class="token keyword">if</span> <span class="token string">'刘帅'</span> <span class="token keyword">in</span> s1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刘帅在s1集合中'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刘帅没有出现在s1集合中'</span><span class="token punctuation">)</span></code></pre><p>③ 集合的遍历操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> 集合<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="4、集合中的交集、并集与差集特性"><a href="#4、集合中的交集、并集与差集特性" class="headerlink" title="4、集合中的交集、并集与差集特性"></a>4、集合中的交集、并集与差集特性</h2><p>在Python中，我们可以使用<code>&amp;</code>来求两个集合的交集：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012106596.png" alt="image-20210312152451774"></p><p>在Python中，我们可以使用<code>|</code>来求两个集合的并集：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012106894.png" alt="image-20210312152631528"></p><p>在Python中，我们可以使用<code>-</code>来求两个集合的差集：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012106295.png" alt="image-20210312152921040"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 求集合中的交集、并集、差集</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'关羽'</span><span class="token punctuation">,</span> <span class="token string">'张飞'</span><span class="token punctuation">,</span> <span class="token string">'貂蝉'</span><span class="token punctuation">}</span>s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'袁绍'</span><span class="token punctuation">,</span> <span class="token string">'吕布'</span><span class="token punctuation">,</span> <span class="token string">'曹操'</span><span class="token punctuation">,</span> <span class="token string">'貂蝉'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 求两个集合中的交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">&amp;</span> s2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求两个集合中的并集</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">|</span> s2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求连个集合中的差集</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">-</span> s2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">-</span> s1<span class="token punctuation">)</span></code></pre><h1 id="五、数据序列中的公共方法"><a href="#五、数据序列中的公共方法" class="headerlink" title="五、数据序列中的公共方法"></a>五、数据序列中的公共方法</h1><h2 id="1、什么是公共方法"><a href="#1、什么是公共方法" class="headerlink" title="1、什么是公共方法"></a>1、什么是公共方法</h2><p>所谓的公共方法就是支持大部分数据序列。</p><h2 id="2、常见公共方法1"><a href="#2、常见公共方法1" class="headerlink" title="2、常见公共方法1"></a>2、常见公共方法1</h2><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>支持的容器类型</strong></th></tr></thead><tbody><tr><td>+</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>复制</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not  in</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr></tbody></table><p> 案例1：+ 合并</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、+加号，代表两个序列之间的连接与整合</span>str1 <span class="token operator">=</span> <span class="token string">'hello'</span>str2 <span class="token operator">=</span> <span class="token string">'world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、定义两个列表，对其数据进行整合</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'关羽'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'诸葛亮'</span><span class="token punctuation">,</span> <span class="token string">'赵云'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">+</span> list2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、定义两个元组，对其数据进行整合</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1 <span class="token operator">+</span> tuple2<span class="token punctuation">)</span></code></pre><p>案例2：* 复制</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、字符串与乘号的关系</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'传智教育Python管理系统V1.0'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、列表与乘号的关系</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、元组与乘号的关系</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>案例3：in与not in方法</p><pre class=" language-python"><code class="language-python">ips <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'192.168.10.11'</span><span class="token punctuation">,</span> <span class="token string">'10.1.1.100'</span><span class="token punctuation">,</span> <span class="token string">'172.15.184.31'</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">'10.1.1.100'</span> <span class="token keyword">in</span> ips<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'列表中元素已存在'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'列表中元素不存在'</span><span class="token punctuation">)</span></code></pre><h2 id="3、常见公共方法2"><a href="#3、常见公共方法2" class="headerlink" title="3、常见公共方法2"></a>3、常见公共方法2</h2><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>2</td><td>del或del()</td><td>根据索引下标删除指定元素</td></tr><tr><td>3</td><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>4</td><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>5</td><td>range(start,  end, step)</td><td>生成从start到end（不包含）的数字，步长为  step，供for循环使用</td></tr><tr><td>6</td><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在  for  循环当中。</td></tr></tbody></table><p>案例1：len() 获取字符串、列表、元组、字典、集合的长度</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个字符串</span>str1 <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'字符串的长度为{len(str1)}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'列表的长度为{len(list1)}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'哆啦A梦'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'东京'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'字典的长度为{len(dict1)}'</span><span class="token punctuation">)</span></code></pre><p>案例2：del方法，用于删除序列中指定的元素（根据索引下标）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'吕布'</span><span class="token punctuation">,</span> <span class="token string">'董卓'</span><span class="token punctuation">,</span> <span class="token string">'貂蝉'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用del方法删除董卓</span><span class="token keyword">del</span> list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'白龙马'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'东海龙宫'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 使用del方法删除age</span><span class="token keyword">del</span> dict1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span></code></pre><p>案例3：求某个序列中元素的最大值和最小值</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入第一个数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>num2 <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入第二个数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>num3 <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入第三个数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">]</span>max_num <span class="token operator">=</span> max<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>min_num <span class="token operator">=</span> min<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'最大值：{max_num}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'最小值：{min_num}'</span><span class="token punctuation">)</span></code></pre><p>案例4：enumerate()，把一个序列类型的数据构造成key:value结构，然后结合for循环进行遍历</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{n}个数：{i}'</span><span class="token punctuation">)</span>    n <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{key+1}个数：{value}'</span><span class="token punctuation">)</span></code></pre><h2 id="4、序列类型之间的相互转换"><a href="#4、序列类型之间的相互转换" class="headerlink" title="4、序列类型之间的相互转换"></a>4、序列类型之间的相互转换</h2><p>list()方法：把某个序列类型的数据转化为列表</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义元组类型的序列</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、定义一个集合类型的序列</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、定义一个字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'蜀中'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>tuple()方法：把某个序列类型的数据转化为元组</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个列表类型的数据</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个集合类型的数据</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>set()方法：将某个序列转换成集合（但是要注意两件事 =&gt; ① 集合可以快速完成列表去重 ② 集合不支持下标）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个列表类型的数据</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>set<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个元组类型的数据</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set<span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="六、列表集合字典推导式"><a href="#六、列表集合字典推导式" class="headerlink" title="六、列表集合字典推导式"></a>六、列表集合字典推导式</h1><h2 id="1、什么是推导式"><a href="#1、什么是推导式" class="headerlink" title="1、什么是推导式"></a>1、什么是推导式</h2><p>推导式comprehensions（又称解析式），是Python的一种独有特性。推导式是可以从一个数据序列构建另一个新的数据序列（一个有规律的列表或控制一个有规律列表）的结构体。 共有三种推导：<code>列表推导式</code>、<code>集合推导式</code>、<code>字典推导式</code>。</p><p>[1, 2, 3]      推导式     [1, 4, 9]</p><h2 id="2、为什么需要推导式"><a href="#2、为什么需要推导式" class="headerlink" title="2、为什么需要推导式"></a>2、为什么需要推导式</h2><p>案例：创建一个0-9的列表</p><p>while循环：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><p>for循环：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 编写for循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><p>思考：我们能不能把以上代码简化为一行代码搞定这个程序呢？</p><p>答：可以，使用推导式</p><h2 id="3、列表推导式"><a href="#3、列表推导式" class="headerlink" title="3、列表推导式"></a>3、列表推导式</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python">变量名 <span class="token operator">=</span> <span class="token punctuation">[</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>列表<span class="token punctuation">]</span>变量名 <span class="token operator">=</span> <span class="token punctuation">[</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表 <span class="token keyword">if</span> 条件<span class="token punctuation">]</span></code></pre><p>案例：定义0-9之间的列表</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><p>列表推导式</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><p>执行原理：[i for i in range(10)]</p><pre class=" language-powershell"><code class="language-powershell">列表推导式先运行表达式右边的内容：当第一次遍历时：i = 0，其得到变量i的结果后，会放入最左侧的变量i中，这个时候列表中就是<span class="token punctuation">[</span>0<span class="token punctuation">]</span>当第二次遍历时：i = 1，其得到变量i的结果后，会追加最左侧的变量i中，这个时候列表中就是<span class="token punctuation">[</span>0<span class="token punctuation">,</span> 1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>当最后一次遍历时：i = 9，其得到变量i的结果后，会追加最左侧的变量i中，这个时候列表中就是<span class="token punctuation">[</span>0<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 4<span class="token punctuation">,</span> 5<span class="token punctuation">,</span> 6<span class="token punctuation">,</span> 7<span class="token punctuation">,</span> 8<span class="token punctuation">,</span> 9<span class="token punctuation">]</span></code></pre><h2 id="4、列表推导式-if条件判断"><a href="#4、列表推导式-if条件判断" class="headerlink" title="4、列表推导式 + if条件判断"></a>4、列表推导式 + if条件判断</h2><p>在使用列表推导式时候，我们除了可以使用for循环，其实我们还可以在其遍历的过程中，引入if条件判断。</p><pre class=" language-python"><code class="language-python">变量 <span class="token operator">=</span> <span class="token punctuation">[</span>表达式 <span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列 <span class="token keyword">if</span> 条件判断<span class="token punctuation">]</span>等价于<span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    <span class="token keyword">if</span> 条件判断</code></pre><p>案例：生成0-9之间的偶数（i%2 == 0）序列</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><h2 id="5、for循环嵌套列表推导式"><a href="#5、for循环嵌套列表推导式" class="headerlink" title="5、for循环嵌套列表推导式"></a>5、for循环嵌套列表推导式</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>基本语法：</p><pre class=" language-python"><code class="language-python">变量 <span class="token operator">=</span> <span class="token punctuation">[</span>表达式 <span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列 <span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">]</span></code></pre><p>案例：创建列表 =&gt; [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</p><p>(1,0)    (1, 0-2)</p><p>(1,1)    (1, 0-2)</p><p>(1,2)    (1, 0-2)</p><hr><p>(2,0)    (2, 0-2)</p><p>(2,1)    (2, 0-2)</p><p>(2,2)    (2, 0-2)</p><p>原生代码：for循环嵌套</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 外层循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 内层循环</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><p>列表推导式：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><h2 id="6、字典推导式"><a href="#6、字典推导式" class="headerlink" title="6、字典推导式"></a>6、字典推导式</h2><p>思考：有如下两个列表，如何快速合并为一个字典？</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">]</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">}</span></code></pre><p>答：使用字典推导式</p><p>基本语法：</p><p>① 字典推导式列表推导式思想的延续，语法差不多，只不过产生的是字典而已。</p><p>② 字典推导式格式：</p><pre class=" language-python"><code class="language-python">变量 <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> 序列<span class="token punctuation">}</span></code></pre><p>字典推导式作用：==快速合并列表为字典或提取字典中目标数据。==</p><p>案例1：创建一个字典：字典key是1-5数字，value是这个数字的2次方。</p><p>dict1 = {1:1, 2:4, 3:9, 4:16, 5:25}</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span></code></pre><p>案例2：把两个列表合并为一个字典</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 结果：person = {'name':'Tom', 'age':20, 'gender':'male'}</span>person <span class="token operator">=</span> <span class="token punctuation">{</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></code></pre><p>案例3：提取字典中目标数据</p><pre class=" language-python"><code class="language-python">counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'MBP'</span><span class="token punctuation">:</span> <span class="token number">268</span><span class="token punctuation">,</span> <span class="token string">'HP'</span><span class="token punctuation">:</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token string">'DELL'</span><span class="token punctuation">:</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">'Lenovo'</span><span class="token punctuation">:</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token string">'ACER'</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 需求：提取上述电脑数量大于等于200的字典数据</span>counts <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span></code></pre><h2 id="7、集合推导式"><a href="#7、集合推导式" class="headerlink" title="7、集合推导式"></a>7、集合推导式</h2><p>集合推导式跟列表推导式非常相似，唯一区别在于用 { } 代替 [ ]。</p><p>思考：为什么需要集合推导式，列表推导式不香么？</p><p>答：集合的最大特点就是去重</p><p>需求：创建一个集合，数据为下方列表的2次方。</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre><p>推导式</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span></code></pre><h1 id="七、作业"><a href="#七、作业" class="headerlink" title="七、作业"></a>七、作业</h1><h2 id="1、编写通讯录管理系统"><a href="#1、编写通讯录管理系统" class="headerlink" title="1、编写通讯录管理系统"></a>1、编写通讯录管理系统</h2><p>必须手工完成编写，只需要实现增加、删除、退出功能</p><h2 id="2、使用xmind把今天内容做一个总结"><a href="#2、使用xmind把今天内容做一个总结" class="headerlink" title="2、使用xmind把今天内容做一个总结"></a>2、使用xmind把今天内容做一个总结</h2><p>截图</p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day04之Python数据序列</title>
      <link href="/2022/03/03/019-python-ji-chu-04/"/>
      <url>/2022/03/03/019-python-ji-chu-04/</url>
      
        <content type="html"><![CDATA[<h1 id="一、作业回顾"><a href="#一、作业回顾" class="headerlink" title="一、作业回顾"></a>一、作业回顾</h1><h2 id="1、面试题"><a href="#1、面试题" class="headerlink" title="1、面试题"></a>1、面试题</h2><p>有一物，不知其数，三三数之余二，五五数之余三，七七数之余二，问物几何？</p><p>白话文：有一个数字，不知道具体是多少，用3去除剩2，用5去除剩3，用7去除剩2个，问这个数是多少？1 ~ 100以内的整数</p><p>while循环：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 判断</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>for循环：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 判断</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="2、报数字（数7）"><a href="#2、报数字（数7）" class="headerlink" title="2、报数字（数7）"></a>2、报数字（数7）</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105319.png" alt="image-20210310091709238"></p><p>一些同学从1开始报数，当需要报出的数字尾数是7或者该数字是7的倍数时，则该同学跳过这个数字，不进行报数。所有同学都参与游戏后，游戏结束。如输入学生数量为50，游戏结束后，报数的同学数量为39。</p><p>分析：如何判断某个数字尾数为7以及如何判断某个数字是7的倍数</p><p>① 如何判断数字尾数为7，i % 10 == 7      17  %  10 =  1 余 7     27  %  10  =  2  余 7</p><p>② 如何判断数字是7的倍数，i % 7 == 0</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个变量n，用于获取学生数量</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入学生的数量：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个变量，用于统计有多少人报数了</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 开始循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 判断数字尾数为7</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token comment" spellcheck="true"># 判断数值是7的倍数</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token comment" spellcheck="true"># 如果不满足以上if条件，则对count进行+1操作</span>    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{n}个同学，共报数{count}人'</span><span class="token punctuation">)</span></code></pre><h1 id="二、了解字符串"><a href="#二、了解字符串" class="headerlink" title="二、了解字符串"></a>二、了解字符串</h1><h2 id="1、字符串的定义"><a href="#1、字符串的定义" class="headerlink" title="1、字符串的定义"></a>1、字符串的定义</h2><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。</p><p>案例1：使用单引号或双引号定义字符串变量</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span>str2 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'str'></span></code></pre><p>案例2：使用3个引号定义字符串变量</p><pre class=" language-python"><code class="language-python">name1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''I am Tom, Nice to meet you!'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>name2 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""I am Jennify,           Nice to meet you!"""</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：三引号形式的字符串支持换行操作</p></blockquote><p>案例3：思考如何使用字符串定义”I’m Tom”</p><p>使用单引号情况</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'I'</span>m Tom'</code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105453.png" alt="image-20210310101123953"></p><p>出现以上问题的主要原因在于，以上字符串的定义代码出现了(syntax)语法错误。==单引号在字符串定义中必须成对出现，而且Python解析器在解析代码时，会自动认为第一个单引号和最近的一个单引号是一对！==</p><p>如果一定要在单引号中在放入一个单引号，必须使用==反斜杠==进行转义。</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'I\'am Tom'</span></code></pre><p>使用双引号情况</p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">"I'm Tom"</span></code></pre><blockquote><p>注：在Python中，如果存在多个引号，建议① 单引号放在双引号中 ② 双引号放在单引号中。</p></blockquote><h2 id="2、字符串输入"><a href="#2、字符串输入" class="headerlink" title="2、字符串输入"></a>2、字符串输入</h2><p>在Python代码中，我们可以使用<code>input()</code>方法来接收用户的输入信息。记住：在Python中，input()方法返回的结果是一个<code>字符串类型</code>的数据。</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的姓名：'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span>address <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的住址：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span></code></pre><h2 id="3、字符串的输出"><a href="#3、字符串的输出" class="headerlink" title="3、字符串的输出"></a>3、字符串的输出</h2><h3 id="☆-普通输出"><a href="#☆-普通输出" class="headerlink" title="☆ 普通输出"></a>☆ 普通输出</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>变量名称<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>变量名称<span class="token number">1</span><span class="token punctuation">,</span> 变量名称<span class="token number">2</span><span class="token punctuation">,</span> 变量名称<span class="token number">3</span><span class="token punctuation">)</span></code></pre><h3 id="☆-格式化输出"><a href="#☆-格式化输出" class="headerlink" title="☆ 格式化输出"></a>☆ 格式化输出</h3><p>① 百分号（Python2和Python3）</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的姓名：'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span>address <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的住址：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s，今年%d岁了，家里住在%s...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>② format方法（Python3）</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的姓名：'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span>address <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的住址：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是{}，今年{}岁了，家里住在{}...'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>③ f形式（Python3）</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的姓名：'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span>address <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的住址：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字是{name}，今年{age}岁了，家里住在{address}...'</span><span class="token punctuation">)</span></code></pre><p>延伸：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您购买商品的名称：'</span><span class="token punctuation">)</span>price <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您购买商品的价格：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 18.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'购买商品名称：{name}，商品价格：{price:.2f}'</span><span class="token punctuation">)</span></code></pre><h2 id="4、字符串在计算机底层的存储形式"><a href="#4、字符串在计算机底层的存储形式" class="headerlink" title="4、字符串在计算机底层的存储形式"></a>4、字符串在计算机底层的存储形式</h2><p>在计算机中，Python中的字符串属于序列结构。所以其底层存储占用一段连续的内存空间。</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span></code></pre><p>结构原理图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105523.png" alt="image-20210310104348286"></p><blockquote><p>注意：索引下标从0开始。</p></blockquote><h2 id="5、聊聊索引下标"><a href="#5、聊聊索引下标" class="headerlink" title="5、聊聊索引下标"></a>5、聊聊索引下标</h2><p><code>索引下标</code>，就是编号。比如火车座位号，座位号的作用：按照编号快速找到对应的座位。同理，下标的作用即是通过下标快速找到对应的数据。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105234.png" alt="image-20210310104901506"></p><p>举个例子：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># d</span></code></pre><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105167.png" alt="image-20210310104907464"></p><h1 id="三、字符串切片"><a href="#三、字符串切片" class="headerlink" title="三、字符串切片"></a>三、字符串切片</h1><h2 id="1、什么是字符串切片"><a href="#1、什么是字符串切片" class="headerlink" title="1、什么是字符串切片"></a>1、什么是字符串切片</h2><p>所谓的切片是指对操作的对象==截取==其中一部分的操作。字符串、列表、元组都支持切片操作。</p><h2 id="2、字符串切片基本语法"><a href="#2、字符串切片基本语法" class="headerlink" title="2、字符串切片基本语法"></a>2、字符串切片基本语法</h2><p>顾头不顾尾：</p><pre class=" language-python"><code class="language-python">序列名称<span class="token punctuation">[</span>开始位置下标<span class="token punctuation">:</span>结束位置下标<span class="token punctuation">:</span>步长<span class="token punctuation">]</span></code></pre><p>① 不包含结束位置下标对应的数据， 正负整数均可；</p><p>② 步长是选取间隔，正负整数均可，正数从左向右，负数从右向左。默认步长为1。</p><p>还是有点陌生，没关系，给你举个栗子：</p><pre class=" language-python"><code class="language-python">numstr <span class="token operator">=</span> <span class="token string">'0123456789'</span></code></pre><p>如果想对numstr字符串进行切片，如下图所示：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105668.png" alt="image-20210310110051093"></p><h2 id="3、字符串切片小口诀"><a href="#3、字符串切片小口诀" class="headerlink" title="3、字符串切片小口诀"></a>3、字符串切片小口诀</h2><p>记口诀：==切片其实很简单，只顾头来尾不管，步长为正正向移，步长为负则逆向移==</p><p>如果还是有点不太清楚这个原理，建议大家对字符串进行画图</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105331.png" alt="image-20210310111904137"></p><h2 id="4、字符串切片的小栗子"><a href="#4、字符串切片的小栗子" class="headerlink" title="4、字符串切片的小栗子"></a>4、字符串切片的小栗子</h2><p>案例1：</p><pre class=" language-python"><code class="language-python">numstr <span class="token operator">=</span> <span class="token string">'0123456789'</span><span class="token comment" spellcheck="true"># 1、从2到5开始切片，步长为1</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、只有结尾的字符串切片：代表从索引为0开始，截取到结尾字符-1的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、只有开头的字符串切片：代表从起始位置开始，已知截取到字符串的结尾</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、获取或拷贝整个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5、调整步阶：类似求偶数</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6、把步阶设置为负整数：类似字符串翻转</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7、起始位置与结束位置都是负数（遵循一个原则：必须是从左向右截取）</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8、结束字符为负数，如截取012345678</span><span class="token keyword">print</span><span class="token punctuation">(</span>numstr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>案例2：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105470.png" alt="image-20210310110334889"></p><p>案例3：给定一个图片的名称为”avatar.png”，使用Python方法获取这个图片的名称(avatar)以及这个图片的后缀(.png)。</p><p>分析：</p><p>① 建议先获取点号的位置（目前还未学习，只能一个一个数）</p><p>② 从开头切片到点号位置，得到的就是文件的名称</p><p>③ 从点号开始切片，一直到文件的结尾，则得到的就是文件的后缀</p><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'avatar.png'</span><span class="token comment" spellcheck="true"># 获取点号的索引下标</span>index <span class="token operator">=</span> <span class="token number">6</span><span class="token comment" spellcheck="true"># 使用切片截取文件的文件</span>name <span class="token operator">=</span> filename<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'上传文件的名称：{name}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用切片截取文件的后缀</span>postfix <span class="token operator">=</span> filename<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'上传文件的后缀：{postfix}'</span><span class="token punctuation">)</span></code></pre><h1 id="四、字符串的操作方法（内置）"><a href="#四、字符串的操作方法（内置）" class="headerlink" title="四、字符串的操作方法（内置）"></a>四、字符串的操作方法（内置）</h1><h2 id="1、字符串中的查找方法"><a href="#1、字符串中的查找方法" class="headerlink" title="1、字符串中的查找方法"></a>1、字符串中的查找方法</h2><p>所谓字符串查找方法即是==查找子串在字符串中的位置或出现的次数==。</p><p>基本语法：</p><pre class=" language-python"><code class="language-python">字符串<span class="token punctuation">.</span>find<span class="token punctuation">(</span>要查找的字符或者子串<span class="token punctuation">)</span></code></pre><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>find()</td><td>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</td></tr><tr><td>2</td><td>index()</td><td>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</td></tr><tr><td>3</td><td>rfind()</td><td>和find()功能相同，但查找方向为右侧开始。</td></tr><tr><td>4</td><td>rindex()</td><td>和index()功能相同，但查找方向为右侧开始。</td></tr><tr><td>5</td><td>count()</td><td>返回某个子串在字符串中出现的次数</td></tr></tbody></table><h3 id="☆-find-方法"><a href="#☆-find-方法" class="headerlink" title="☆ find()方法"></a>☆ find()方法</h3><p>作用：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个字符串</span>str1 <span class="token operator">=</span> <span class="token string">'hello world hello linux hello python'</span><span class="token comment" spellcheck="true"># 查找linux子串是否出现在字符串中</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'linux'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在str1中查找不存在的子串</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例：使用input方法输入任意一个文件名称，求点号的索引下标</p><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您要上传文件的名称：'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取点号的索引下标</span>index <span class="token operator">=</span> filename<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求文件名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求文件后缀</span><span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="☆-index-方法"><a href="#☆-index-方法" class="headerlink" title="☆ index()方法"></a>☆ index()方法</h3><p>index()方法其功能与find()方法完全一致，唯一的区别在于当要查找的子串没有出现在字符串中时，find()方法返回-1，而index()方法则直接报错。</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'apple, banana, orange'</span><span class="token comment" spellcheck="true"># 判断apple是否出现在字符串str1中</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'pineapple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105100.png" alt="image-20210310120906839"></p><h3 id="☆-rfind-与rindex-方法"><a href="#☆-rfind-与rindex-方法" class="headerlink" title="☆ rfind()与rindex()方法"></a>☆ rfind()与rindex()方法</h3><p>r = right，代表从右开始查找</p><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span>子串<span class="token punctuation">)</span>字符串序列<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span>子串<span class="token punctuation">)</span></code></pre><p>强调：rfind()方法与rindex()方法适合于查找子串在字符串中出现了多次的情况</p><p>案例：有一个文件名称叫20210310axvu.avatar.png，其中点号出现了2次，这个时候，如果我想获取文件的后缀.png，代码应该如何编写？</p><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'20210310axvu.avatar.png'</span><span class="token comment" spellcheck="true"># 求出点号在字符串中第一次出现的位置</span><span class="token comment" spellcheck="true"># index = filename.find('.')</span><span class="token comment" spellcheck="true"># print(index)</span><span class="token comment" spellcheck="true"># 求出点号在字符串中最后一次出现的位置</span>index <span class="token operator">=</span> filename<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span></code></pre><p>rfind()方法和rindex()方法语法上完全一致，唯一的区别就是对子串没有出现在字符串的中的情况，rfind()返回-1，rindex()返回错误。</p><h3 id="☆-count-方法"><a href="#☆-count-方法" class="headerlink" title="☆ count()方法"></a>☆ count()方法</h3><p>主要功能：求子串在字符串中出现的次数</p><p>基本语法：</p><pre class=" language-python"><code class="language-python">字符串<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'子串'</span><span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span></code></pre><p>案例：获取字符串中and关键字出现的次数</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'hello world and hello linux and hello python'</span><span class="token comment" spellcheck="true"># 不限定字符串长度</span>ands <span class="token operator">=</span> str1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 限定开始查找的位置和结束位置</span><span class="token comment" spellcheck="true"># ands = str1.count('and', 10, 30)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'and字符串出现的次数为：{ands}'</span><span class="token punctuation">)</span></code></pre><h2 id="2、练习题"><a href="#2、练习题" class="headerlink" title="2、练习题"></a>2、练习题</h2><p>问题：使用循环嵌套打印正等腰三角形</p><pre class=" language-python"><code class="language-python">     <span class="token operator">*</span>     <span class="token operator">**</span><span class="token operator">*</span>   <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>  <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span> <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>分析：① 每一行的星星数，是有规律的。<span class="token number">1</span>  <span class="token number">1</span>   <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token number">2</span>  <span class="token number">3</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token number">3</span>  <span class="token number">5</span>   <span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token number">4</span>  <span class="token number">7</span><span class="token number">5</span>  <span class="token number">9</span><span class="token number">6</span>  <span class="token number">11</span><span class="token operator">*</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>② 每一行星星的前面，都是有空格的<span class="token number">1</span>  <span class="token number">5</span><span class="token number">2</span>  <span class="token number">4</span><span class="token number">3</span>  <span class="token number">3</span><span class="token number">4</span>  <span class="token number">2</span><span class="token number">5</span>  <span class="token number">1</span><span class="token number">6</span>  <span class="token number">0</span>     <span class="token operator">*</span>     <span class="token operator">**</span><span class="token operator">*</span>   <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>  <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span> <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span></code></pre><p>最终代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打印空行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 初始化计数器</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 编写循环条件</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新计数器</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="3、字符串的修改方法"><a href="#3、字符串的修改方法" class="headerlink" title="3、字符串的修改方法"></a>3、字符串的修改方法</h2><p>所谓修改字符串，指的就是通过函数（方法）的形式修改字符串中的数据。</p><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>replace()</td><td>返回替换后的字符串</td></tr><tr><td>2</td><td>split()</td><td>返回切割后的列表序列</td></tr><tr><td>3</td><td>capitalize()</td><td>首字母大写</td></tr><tr><td>4</td><td>title()</td><td>所有单词首字母大写</td></tr><tr><td>5</td><td>upper()与lower()</td><td>返回全部大写或小写的字符串</td></tr><tr><td>6</td><td>lstrip()、rstrip()与strip()</td><td>去除左边、右边以及两边的空白字符</td></tr><tr><td>7</td><td>ljust()、rjust()与center()</td><td>返回原字符串左对齐、右对齐以及居中对齐</td></tr></tbody></table><h3 id="☆-replace-方法"><a href="#☆-replace-方法" class="headerlink" title="☆ replace()方法"></a>☆ replace()方法</h3><p>基本语法：</p><pre class=" language-python"><code class="language-python">字符串<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>要替换的内容<span class="token punctuation">,</span> 替换后的内容<span class="token punctuation">,</span> 替换的次数<span class="token operator">-</span>可以省略<span class="token punctuation">)</span></code></pre><p>案例：编写一个字符串，然后把字符串中的linux替换为python</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'hello linux and hello linux'</span><span class="token comment" spellcheck="true"># 把字符串中所有linux字符替换为python</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'linux'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把字符串中的第一个linux进行替换为python</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'linux'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把and字符串替换为&amp;&amp;</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'&amp;&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>目前在工作中，replace主要用于实现关键字替换或过滤功能。北京 ==&gt; BJ，论坛关键字过滤，共产党 =&gt; ***</p><h3 id="☆-split-方法"><a href="#☆-split-方法" class="headerlink" title="☆ split()方法"></a>☆ split()方法</h3><p>作用：对字符串进行切割操作，返回一个list()列表类型的数据</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'apple-banana-orange'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-capitalize-方法"><a href="#☆-capitalize-方法" class="headerlink" title="☆ capitalize() 方法"></a>☆ capitalize() 方法</h3><p>作用：把字符串的首字母大写，其他字符全部小写</p><h3 id="☆-title-方法"><a href="#☆-title-方法" class="headerlink" title="☆ title()方法"></a>☆ title()方法</h3><p>作用：把字符串中的所有单词的首字母大写，组成大驼峰</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'myName'</span><span class="token comment" spellcheck="true"># 把str1变成首字母大写字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> <span class="token string">'student_manager'</span><span class="token comment" spellcheck="true"># 把str2变成大驼峰</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-upper-与lower-方法"><a href="#☆-upper-与lower-方法" class="headerlink" title="☆ upper()与lower() 方法"></a>☆ upper()与lower() 方法</h3><p>upper()：把字符串全部转换为大写形式</p><p>lower()：把字符串全部转换为小写形式</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用户名以及密码验证案例</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的账号：'</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的密码：'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把username和password全部转换为大写或小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-lstrip-、rstrip-与strip"><a href="#☆-lstrip-、rstrip-与strip" class="headerlink" title="☆ lstrip()、rstrip()与strip()"></a>☆ lstrip()、rstrip()与strip()</h3><p>strip() 方法主要作用：删除字符串两边的空白字符（如空格）</p><p>lstrip() 方法 == left + strip，作用：只删除字符串左边的空白字符</p><p>rstrip() 方法，作用：只删除字符串右边的空白字符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用户名验证案例</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的账号：'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 去除username两边的空白字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-ljust-、rjust-、center"><a href="#☆-ljust-、rjust-、center" class="headerlink" title="☆ ljust()、rjust()、center()"></a>☆ ljust()、rjust()、center()</h3><p>作用：返回原字符串左对齐、右对齐以及居中对齐  </p><p>基本语法：</p><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>长度<span class="token punctuation">,</span> 填充字符<span class="token punctuation">)</span></code></pre><p>案例：定义一个字符串，要求返回长度为10个字符，不足的使用.点号进行填充</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'python'</span><span class="token comment" spellcheck="true"># 左对齐</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 右对齐</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 居中对齐</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="4、字符串的判断方法"><a href="#4、字符串的判断方法" class="headerlink" title="4、字符串的判断方法"></a>4、字符串的判断方法</h2><p>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</p><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>startswith()</td><td>检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</td></tr><tr><td>2</td><td>endswith()</td><td>检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</td></tr><tr><td>3</td><td>isalpha()</td><td>如果字符串所有字符(至少有一个字符)都是字母则返回 True, 否则返回 False。</td></tr><tr><td>4</td><td>isdigit()</td><td>如果字符串只包含数字则返回 True 否则返回 False。</td></tr><tr><td>5</td><td>isalnum()</td><td>Python isalnum() 方法检测字符串是否由字母和数字组成。如果字符串所有字符(至少有一个字符)都是字母或数字则返 回 True,否则返回 False。</td></tr><tr><td>6</td><td>isspace()</td><td>如果字符串中只包含空白，则返回 True，否则返回 False</td></tr></tbody></table><h3 id="☆-startswith"><a href="#☆-startswith" class="headerlink" title="☆ startswith()"></a>☆ startswith()</h3><p>作用：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'python program'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="☆-endswith"><a href="#☆-endswith" class="headerlink" title="☆ endswith()"></a>☆ endswith()</h3><p>作用：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。  </p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">'avatar.png'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> str2<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.png'</span><span class="token punctuation">)</span> <span class="token operator">or</span> str2<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span> <span class="token operator">or</span> str2<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.gif'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是一张图片格式的图片'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您上传的文件格式异常'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-isalpha"><a href="#☆-isalpha" class="headerlink" title="☆ isalpha()"></a>☆ isalpha()</h3><p>作用：如果字符串所有字符(至少有一个字符)都是==字母==则返回 True, 否则返回 False。</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'admin'</span>str2 <span class="token operator">=</span> <span class="token string">'admin123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><h3 id="☆-isdigit"><a href="#☆-isdigit" class="headerlink" title="☆ isdigit()"></a>☆ isdigit()</h3><p>作用：如果字符串只包含==数字==则返回 True 否则返回 False。  </p><pre class=" language-python"><code class="language-python">password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的银行卡密码：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">and</span> password<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入密码成功，正在验证...'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码输入错误，请重新输入'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-isalnum"><a href="#☆-isalnum" class="headerlink" title="☆ isalnum()"></a>☆ isalnum()</h3><p>作用：Python isalnum() 方法检测字符串是否由==字母和数字==组成。如果字符串所有字符(至少有一个字符)都是字母或数字则返 回 True,否则返回 False。  </p><pre class=" language-python"><code class="language-python">username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入的您的用户名（只能为字母+数字形式）：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> username<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'合理的用户名，正在录入系统...'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入的用户名有误，请重新输入...'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-isspace"><a href="#☆-isspace" class="headerlink" title="☆ isspace()"></a>☆ isspace()</h3><p>作用：如果字符串中只包含空白，则返回 True，否则返回 False（逆向思维）</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">' '</span>  <span class="token comment" spellcheck="true"># 最少要包含一个空白字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入的您的用户名：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> username<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您没有输入任何字符...'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的输入的字符{username}'</span><span class="token punctuation">)</span>    </code></pre><h1 id="五、列表及其应用场景"><a href="#五、列表及其应用场景" class="headerlink" title="五、列表及其应用场景"></a>五、列表及其应用场景</h1><h2 id="1、为什么需要列表"><a href="#1、为什么需要列表" class="headerlink" title="1、为什么需要列表"></a>1、为什么需要列表</h2><p>思考：有一个人的姓名(TOM)怎么书写存储程序？</p><p>答：变量。</p><p>思考：如果一个班级100位学生，每个人的姓名都要存储，应该如何书写程序？声明100个变量吗？</p><p>答：No，我们使用列表就可以了， 列表一次可以存储多个数据。</p><blockquote><p>在Python中，我们把这种数据类型称之为列表。但是在其他的编程语言中，如Java、PHP、Go等等中其被称之为数组。</p></blockquote><h2 id="2、列表的定义"><a href="#2、列表的定义" class="headerlink" title="2、列表的定义"></a>2、列表的定义</h2><pre class=" language-python"><code class="language-python">列表序列名称 <span class="token operator">=</span> <span class="token punctuation">[</span>列表中的元素<span class="token number">1</span><span class="token punctuation">,</span> 列表中的元素<span class="token number">2</span><span class="token punctuation">,</span> 列表中的元素<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><p>案例演示：定义一个列表，用于保存苹果、香蕉以及菠萝</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'pineapple'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># list列表类型支持直接打印</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印列表的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：列表可以一次存储多个数据且可以为不同的数据类型</p></blockquote><h2 id="3、列表的相关操作"><a href="#3、列表的相关操作" class="headerlink" title="3、列表的相关操作"></a>3、列表的相关操作</h2><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：</p><p>==增、删、改、查==。</p><h3 id="☆-查操作"><a href="#☆-查操作" class="headerlink" title="☆ 查操作"></a>☆ 查操作</h3><p>列表在计算机中的底层存储形式，列表和字符串一样，在计算机内存中都占用一段连续的内存地址，我们向访问列表中的每个元素，都可以通过”索引下标”的方式进行获取。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012105647.png" alt="image-20210310170752234"></p><p>如果我们想获取列表中的某个元素，非常简单，直接使用索引下标：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'pineapple'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 获取列表中的banana</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>查操作的相关方法：</p><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>index()</td><td>指定数据所在位置的下标</td></tr><tr><td>2</td><td>count()</td><td>统计指定数据在当前列表中出现的次数</td></tr><tr><td>3</td><td>in</td><td>判断指定数据在某个列表序列，如果在返回True，否则返回False</td></tr><tr><td>4</td><td>not in</td><td>判断指定数据不在某个列表序列，如果不在返回True，否则返回False</td></tr></tbody></table><p>举个栗子：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、查找某个元素在列表中出现的位置（索引下标）</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'pineapple'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># print(list1.index('peach'))  # 报错</span><span class="token comment" spellcheck="true"># 2、count()方法：统计元素在列表中出现的次数</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'关羽'</span><span class="token punctuation">,</span> <span class="token string">'张飞'</span><span class="token punctuation">,</span> <span class="token string">'关羽'</span><span class="token punctuation">,</span> <span class="token string">'赵云'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 统计一下关羽这个元素在列表中出现的次数</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'关羽'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、in方法和not in方法（黑名单系统）</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'192.168.1.15'</span><span class="token punctuation">,</span> <span class="token string">'10.1.1.100'</span><span class="token punctuation">,</span> <span class="token string">'172.35.46.128'</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">'10.1.1.100'</span> <span class="token keyword">in</span> list3<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'黑名单IP，禁止访问'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正常IP，访问站点信息'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-增操作"><a href="#☆-增操作" class="headerlink" title="☆ 增操作"></a>☆ 增操作</h3><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>append()</td><td>增加指定数据到列表中</td></tr><tr><td>2</td><td>extend()</td><td>列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表</td></tr><tr><td>3</td><td>insert()</td><td>指定位置新增数据</td></tr></tbody></table><h4 id="☆-append"><a href="#☆-append" class="headerlink" title="☆ append()"></a>☆ append()</h4><p>append() ：在列表的尾部追加元素</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token string">'唐僧'</span><span class="token punctuation">,</span> <span class="token string">'猪八戒'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 在列表的尾部追加一个元素"沙僧"</span>names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'沙僧'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><blockquote><p>注意：列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><h4 id="☆-extend-方法"><a href="#☆-extend-方法" class="headerlink" title="☆ extend()方法"></a>☆ extend()方法</h4><p>列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表</p><p>案例：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 1、使用extend方法追加元素"Jennify"</span><span class="token comment" spellcheck="true"># names.extend("Jennify")</span><span class="token comment" spellcheck="true"># print(names)</span><span class="token comment" spellcheck="true"># 2、建议：使用extend方法两个列表进行合并</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hack'</span><span class="token punctuation">,</span> <span class="token string">'Jennify'</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><blockquote><p>总结：extend方法比较适合于两个列表进行元素的合并操作</p></blockquote><h4 id="☆-insert-方法"><a href="#☆-insert-方法" class="headerlink" title="☆ insert()方法"></a>☆ insert()方法</h4><p>作用：在指定的位置增加元素</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'薛宝钗'</span><span class="token punctuation">,</span> <span class="token string">'林黛玉'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 在薛宝钗和林黛玉之间，插入一个新元素"贾宝玉"</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'贾宝玉'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><h3 id="☆-删操作"><a href="#☆-删操作" class="headerlink" title="☆ 删操作"></a>☆ 删操作</h3><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>del 列表[索引]</td><td>删除列表中的某个元素</td></tr><tr><td>2</td><td>pop()</td><td>删除指定下标的数据(默认为最后一个)，并返回该数据</td></tr><tr><td>3</td><td>remove()</td><td>移除列表中某个数据的第一个匹配项。</td></tr><tr><td>4</td><td>clear()</td><td>清空列表，删除列表中的所有元素，返回空列表。</td></tr></tbody></table><h4 id="☆-del删除指定的列表元素"><a href="#☆-del删除指定的列表元素" class="headerlink" title="☆ del删除指定的列表元素"></a>☆ del删除指定的列表元素</h4><p>基本语法：</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Jennify'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除Rose</span><span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 打印列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><h4 id="☆-pop-方法"><a href="#☆-pop-方法" class="headerlink" title="☆ pop()方法"></a>☆ pop()方法</h4><p>作用：删除指定下标的元素，如果不填写下标，默认删除最后一个。其返回结果：就是删除的这个元素</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'吕布'</span><span class="token punctuation">,</span> <span class="token string">'董卓'</span><span class="token punctuation">]</span>del_name <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或</span><span class="token comment" spellcheck="true"># del_name = names.pop(1)</span><span class="token keyword">print</span><span class="token punctuation">(</span>del_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><h4 id="☆-remove-方法"><a href="#☆-remove-方法" class="headerlink" title="☆ remove()方法"></a>☆ remove()方法</h4><p>作用：删除匹配的元素</p><pre class=" language-python"><code class="language-python">fruit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'pineapple'</span><span class="token punctuation">]</span>fruit<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span></code></pre><h4 id="☆-clear-方法"><a href="#☆-clear-方法" class="headerlink" title="☆ clear()方法"></a>☆ clear()方法</h4><p>清空列表</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'吕布'</span><span class="token punctuation">,</span> <span class="token string">'董卓'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 随着故事的发展，人物都game over</span>names<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><h3 id="☆-改操作"><a href="#☆-改操作" class="headerlink" title="☆ 改操作"></a>☆ 改操作</h3><table><thead><tr><th><strong>编号</strong></th><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>列表[索引] = 修改后的值</td><td>修改列表中的某个元素</td></tr><tr><td>2</td><td>reverse()</td><td>将数据序列进行倒叙排列</td></tr><tr><td>3</td><td>sort()</td><td>对列表序列进行排序</td></tr><tr><td>4</td><td>copy()</td><td>对列表序列进行拷贝</td></tr></tbody></table><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'大乔'</span><span class="token punctuation">,</span> <span class="token string">'小乔'</span><span class="token punctuation">,</span> <span class="token string">'八戒'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 修改列表中的元素</span>list1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'周瑜'</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>list2<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>list3<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 升序(从小到大)</span><span class="token comment" spellcheck="true"># 或</span><span class="token comment" spellcheck="true"># list3.sort(reverse=True)  # 降序(从大到小)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>list4 <span class="token operator">=</span> list3<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span></code></pre><h2 id="4、列表的循环遍历"><a href="#4、列表的循环遍历" class="headerlink" title="4、列表的循环遍历"></a>4、列表的循环遍历</h2><p>什么是循环遍历？答：循环遍历就是使用while或for循环对列表中的每个数据进行打印输出</p><p>while循环：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'大乔'</span><span class="token punctuation">,</span> <span class="token string">'小乔'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>for循环（个人比较推荐）：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'貂蝉'</span><span class="token punctuation">,</span> <span class="token string">'大乔'</span><span class="token punctuation">,</span> <span class="token string">'小乔'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="5、列表的嵌套"><a href="#5、列表的嵌套" class="headerlink" title="5、列表的嵌套"></a>5、列表的嵌套</h2><p>列表的嵌套：列表中又有一个列表，我们把这种情况就称之为列表嵌套</p><blockquote><p>在其他编程语言中，称之为叫做二维数组或多维数组</p></blockquote><p>应用场景：要存储班级一、二、三  =&gt; 三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><pre class=" language-python"><code class="language-python">classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个班级'</span><span class="token punctuation">,</span><span class="token string">'第二个班级'</span><span class="token punctuation">,</span><span class="token string">'第三个班级'</span><span class="token punctuation">]</span>一班：<span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">]</span>二班：<span class="token punctuation">[</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'赵六'</span><span class="token punctuation">]</span>三班：<span class="token punctuation">[</span><span class="token string">'田七'</span><span class="token punctuation">,</span> <span class="token string">'孙八'</span><span class="token punctuation">]</span>把班级和学员信息合并在一起，组成一个嵌套列表students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'赵六'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'田七'</span><span class="token punctuation">,</span> <span class="token string">'孙八'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>students <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span>students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">]</span>students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>问题：嵌套后的列表，我们应该如何访问呢？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 访问李四</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 嵌套列表进行遍历，获取每个班级的学员信息</span><span class="token keyword">for</span> i <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day03之Python中的循环结构</title>
      <link href="/2022/03/03/018-python-ji-chu-03/"/>
      <url>/2022/03/03/018-python-ji-chu-03/</url>
      
        <content type="html"><![CDATA[<h1 id="一、回顾分支练习题"><a href="#一、回顾分支练习题" class="headerlink" title="一、回顾分支练习题"></a>一、回顾分支练习题</h1><h2 id="1、判断是否为一个合法三角形"><a href="#1、判断是否为一个合法三角形" class="headerlink" title="1、判断是否为一个合法三角形"></a>1、判断是否为一个合法三角形</h2><p>需求：输入三角形的3边，如果两边的长度大于第三条边，则代表是一个合法三角形</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、提示用户输入三角形的三边长度</span>a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入第一条边的长度：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入第二条边的长度：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入第三条边的长度：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、判断两边之和是否大于第3条边</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> c <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> c <span class="token operator">></span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是一个合法的三角形'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不是一个合法的三角形'</span><span class="token punctuation">)</span></code></pre><h2 id="2、求世界杯小组赛的总成绩"><a href="#2、求世界杯小组赛的总成绩" class="headerlink" title="2、求世界杯小组赛的总成绩"></a>2、求世界杯小组赛的总成绩</h2><p>需求：世界杯案例，世界杯小组赛的比赛规则是我们的球队与其他三支球队进行比赛，然后根据总成绩(积分)确定出线资格。小组赛球队实力已知(提示用户输入各球队实力），我们通过一个数字表示。如果我们赢1局得3分，平一局得1分，输一局得0分，最终求球队总成绩。</p><p>我们的球队实力：20</p><p>1号球队的实力：10</p><p>2号球队的实力：20</p><p>3号球队的实力：30</p><p>如果：我们 &gt; 1号球队，赢了，得3分</p><p>​             我们 == 2号球队，平局，得1分</p><p>​            我们 &lt; 3号球队，输了，得0分</p><p>则小组赛最终结果 = 3 + 1 + 0 = 4分</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、提示用户输入我们球队与其他三个球队的实力</span>a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入我们球队的实力值：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入1号球队的实力值：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入2号球队的实力值：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入3号球队的实力值：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、开始比赛，求每次比赛的成绩</span>avsb <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>avsc <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span>avsd <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、总成绩</span>score <span class="token operator">=</span> avsb <span class="token operator">+</span> avsc <span class="token operator">+</span> avsd<span class="token comment" spellcheck="true"># 4、输出总成绩</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我们球队最终的总成绩：{score}'</span><span class="token punctuation">)</span></code></pre><blockquote><p>知识点：布尔类型转换为整型，True =&gt; int(True) = 1，False =&gt; int(False) = 0。这是手工类型转换，在Python中，如果布尔类型参与算术运算，则会发生自动类型转换。</p></blockquote><h1 id="二、Python中循环的介绍"><a href="#二、Python中循环的介绍" class="headerlink" title="二、Python中循环的介绍"></a>二、Python中循环的介绍</h1><h2 id="1、什么是循环"><a href="#1、什么是循环" class="headerlink" title="1、什么是循环"></a>1、什么是循环</h2><p>现实生活中，也有很多循环的应用场景：</p><p>（1）食堂阿姨打菜：接过顾客的餐盘→询问菜品→打菜→递回餐盘，重复以上过程，直到所有顾客的菜都打完了</p><p>（2）快递员送快递：查看送件地址→赶往目的地→电话告知收件人→收件人签收→交快递件，重复以上过程，直到所有需要送的快递都处理完了。</p><p>（3）公交司机……</p><p>（4）作业流程……</p><p>……</p><p>以上场景都有一个共同的特点：==有<strong>条件</strong>地<strong>重复</strong>地做一件事，每一次做的事情不同但类似。==</p><p>程序是为了解决实际问题的，==实际问题中存在着重复动作，那么程序中也应该有相应的描述，这就是<strong>循环</strong>。==</p><h2 id="2、循环的作用"><a href="#2、循环的作用" class="headerlink" title="2、循环的作用"></a>2、循环的作用</h2><p>思考：假如我有个女朋友，有一天我们闹矛盾生气了，女朋友说：道歉，说100遍“老婆大人，我错了”。这个时候程序员会怎么做？</p><p>答：100遍print(‘老婆大人，我错了’)</p><p>太麻烦了，有没有更好的办法呢？我们难道print输出语句要复制粘贴100次嘛？</p><p>答：其实不用这么麻烦，以上输出代码中有很多重复的地方，我们只要重复执行100次相同的代码即可，这就是循环！</p><p>循环的作用是什么？</p><p>答：==让代码高效的重复执行==</p><h2 id="3、循环的种类"><a href="#3、循环的种类" class="headerlink" title="3、循环的种类"></a>3、循环的种类</h2><p>在Python中，循环一共分为两大类：while循环与for循环</p><p>思考问题：while循环和for循环如何选择呢？</p><p>==① 对于循环次数已知的情况，建议使用while循环==</p><p>==② 对于循环次数未知的情况，建议使用for循环==</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012104213.png" alt="image-20210309100103002"></p><h1 id="三、while循环基本语法及其应用"><a href="#三、while循环基本语法及其应用" class="headerlink" title="三、while循环基本语法及其应用"></a>三、while循环基本语法及其应用</h1><h2 id="1、while循环的基本语法"><a href="#1、while循环的基本语法" class="headerlink" title="1、while循环的基本语法"></a>1、while循环的基本语法</h2><pre class=" language-3"><code class="language-3"># ① 定义一个计数器（初始化一个计数器）i = 0或1# ② 编写while循环结构while 循环条件(判断 计数器 是否达到了目标位置):    循环体1    循环体2    ...    # ③ 在循环内部更新计数器    i = i + 1 或 i += 1</code></pre><blockquote><p>普及小知识：在计算机程序中，计数器大部分都是从0开始的。</p></blockquote><p>总结：while循环三步走</p><p>==① 初始化计数器==</p><p>==② 编写循环条件（判断计数器是否达到了目标位置）==</p><p>==③ 在循环内部更新计数器==</p><p>while循环入门案例：使用while循环，循环输出100遍“老婆大人，我错了”</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ① 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># ② 编写循环条件（判断计数器是否达到了100）</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ③ 在循环体内部更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="2、while循环的执行流程"><a href="#2、while循环的执行流程" class="headerlink" title="2、while循环的执行流程"></a>2、while循环的执行流程</h2><p>建议大家使用Debug调试工具，查看while循环的运行流程。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ① 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># ② 编写循环条件（判断计数器是否达到了100）</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ③ 在循环体内部更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>下断点，开始Debug调试：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012104540.png" alt="image-20210309103001017"></p><p>① 代码都是顺序执行，首先执行到第2行，对变量i进行赋值操作，初始值为0</p><p>② 当程序遇到while循环时，首先要把我们的计数器与循环条件进行比较i &lt; 100，如果条件成立，则进入循环内部，执行内部代码。</p><p>③ 在循环体内部，针对本次循环进行计数器更新操作 i = i + 1或 i += 1</p><p>④ 更新完毕后，把更新后的计数器与循环条件再次进行比较i &lt; 100，如果条件成立，继续进入循环内部，执行内部代码。</p><p>…</p><p>⑤ 直到，i更新后结果为100时，再次进行循环条件判断，发现不满足，则整个while循环结束。</p><p>while循环流程图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012104667.png" alt="image-20210309103649130"></p><h2 id="3、while循环案例"><a href="#3、while循环案例" class="headerlink" title="3、while循环案例"></a>3、while循环案例</h2><p>案例1：使用while循环求1..100的和</p><p>分析：定义一个while循环，让其可以帮助我们计算 1 + 2 + 3 + 4 + 5 … + 100，结果：5050</p><p>大问题拆解为小问题：</p><p>① 使用while循环，循环100次</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 第二步：编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#  1 2 3 4 5 6 7 8 9 10...</span>    <span class="token comment" spellcheck="true"># 第三步：更新计数器的值</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>② 在循环体内部，累计求和</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第四步：定义一个变量，用于得到最终的运算结果</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 第五步：想办法，让result = 变量i累加后的结果</span></code></pre><p>③ 最终代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 第四步：定义一个result变量，用于接收累加后的结果</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 第二步：编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第五步：循环累加变量i</span>    result <span class="token operator">+=</span> i    <span class="token comment" spellcheck="true"># 第三步：更新计数器的值</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'1~100累加后的结果：{result}'</span><span class="token punctuation">)</span></code></pre><p>☆ 首先定义变量i和变量result，进行初始化赋值</p><p>☆ 判断变量i是否满足循环条件，如果满足循环条件，则进入到循环体内部，执行内部代码</p><p>思考：如何让变量i进行累加，然后赋予给result</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> i</code></pre><p>第一次循环式，i = 1，result = 0，如果想获取累加的结构，则result = result + i</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>计数器更新，i += 1，i变成2，然后i &lt;= 100，继续执行循环内部代码</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> result <span class="token operator">+</span> i  换成数值  result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span></code></pre><p>依次类推</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> result <span class="token operator">+</span> i</code></pre><p>简写</p><pre class=" language-python"><code class="language-python">result <span class="token operator">+=</span> i</code></pre><p>案例2：求1~100之间，所有偶数的和</p><p>什么是偶数：所谓的偶数，就是能被2整除的数字就是偶数，数学中可以使用2n来表示偶数。(Python代码 =&gt; if  数值 % 2 == 0 代表它是一个偶数)</p><p>知识点：在while循环中，我们还可以结合if进行判断。</p><p>第一步：求出1~100之间，所有的偶数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将来写代码的位置</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>第二步：在循环体中，引入if条件判断，判断变量i是否为一个偶数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将来写代码的位置</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 代表变量i是一个偶数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>第三步：引入result变量，初始值为0，然后对第二步中得到的所有偶数进行累加</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 定义result，用于接收所有偶数的和</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将来写代码的位置</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 代表变量i是一个偶数</span>        result <span class="token operator">+=</span> i    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'1~100之间所有偶数的和：{result}'</span><span class="token punctuation">)</span></code></pre><h2 id="4、编写循环式常见问题"><a href="#4、编写循环式常见问题" class="headerlink" title="4、编写循环式常见问题"></a>4、编写循环式常见问题</h2><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'1~100之间所有偶数的和：{result}'</span><span class="token punctuation">)</span></code></pre><p>问题的原因：在于i += 1缩进了2次，导致其和if形成了一个整体。while循环中计数器无法更新，最终导致以上代码出现了死循环。</p><h1 id="四、循环中的两大关键词"><a href="#四、循环中的两大关键词" class="headerlink" title="四、循环中的两大关键词"></a>四、循环中的两大关键词</h1><h2 id="1、两大关键词"><a href="#1、两大关键词" class="headerlink" title="1、两大关键词"></a>1、两大关键词</h2><p>在Python循环中，经常会遇到两个常见的关键词：break 与 continue</p><p>break：代表终止整个循环结构</p><p>continue：代表中止当前本次循环，继续下一次循环</p><h2 id="2、举个栗子"><a href="#2、举个栗子" class="headerlink" title="2、举个栗子"></a>2、举个栗子</h2><p>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里”吃苹果”的动作是不是重复执行？</p><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第5个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即终止此循环。</p><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即退出当前一次循环继而执行下一次循环代码。</p><h2 id="3、break关键字"><a href="#3、break关键字" class="headerlink" title="3、break关键字"></a>3、break关键字</h2><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第5个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即终止此循环。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 当变量i == 4的时候，终止循环</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我已经吃饱了，实在吃不下了...'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 正在吃第几个苹果</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'正在吃第{i}个苹果'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="4、continue关键字"><a href="#4、continue关键字" class="headerlink" title="4、continue关键字"></a>4、continue关键字</h2><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即退出当前一次循环继而执行下一次循环代码。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 当变量i == 3的时候，中止当前循环，继续下一次循环</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 手工更新计数器(非常重要)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃到了一只大虫子，这个苹果不吃了...'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'正在吃第{i}个苹果'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>如果在使用continue的时候，不手工更新计数器会有什么后果呢？</p><p>答：会出现死循环，建议使用Debug调试工具观看</p><h2 id="5、死循环概念"><a href="#5、死循环概念" class="headerlink" title="5、死循环概念"></a>5、死循环概念</h2><p>在编程中一个靠自身控制无法终止的程序称为“死循环”。</p><p>在Python中，我们也可以使用while True来模拟死循环：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你是风儿我是沙，缠缠绵绵到天涯'</span><span class="token punctuation">)</span></code></pre><h2 id="6、while循环案例：猜数字"><a href="#6、while循环案例：猜数字" class="headerlink" title="6、while循环案例：猜数字"></a>6、while循环案例：猜数字</h2><p>需求：计算机从1 ~ 10之间随机生成一个数字，然后提示输入数字，如果我们输入的数字与随机数相等，则提示恭喜你，答对了。如果输入的数字比随机数大，则提示，猜大了。反之，则提示猜小了，一共有3次机会。</p><p>分析：① 编写一个循环，循环3次。② 要从1 ~ 10之间选择一个随机数 ③ if分支判断</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 第一步：定义一个计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 第四步：生成1 ~ 10之间的随机数</span>secretNum <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二步：编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第五步：提示用户输入一个数字</span>    userNum <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您猜的数字（范围1~10之间）:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第六步：判断用户输入的数字是否与随机数相等</span>    <span class="token keyword">if</span> secretNum <span class="token operator">==</span> userNum<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'恭喜你，才对了'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> secretNum <span class="token operator">&lt;</span> userNum<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'猜大了'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> secretNum <span class="token operator">></span> userNum<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'猜小了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步：更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h1 id="五、while循环嵌套"><a href="#五、while循环嵌套" class="headerlink" title="五、while循环嵌套"></a>五、while循环嵌套</h1><h2 id="1、循环嵌套的引入"><a href="#1、循环嵌套的引入" class="headerlink" title="1、循环嵌套的引入"></a>1、循环嵌套的引入</h2><p>故事梗概：有天女朋友又生气了，惩罚：说3遍“老婆大人， 我错了”，这个程序是不是循环即可？但如果女朋友说：还要刷今天晚饭的碗，这个程序怎么书写？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刷今天的碗'</span><span class="token punctuation">)</span></code></pre><p>但如果女朋友还是生气，把这套惩罚要连续3天都执行，有如何书写程序？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化外层计数器</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写外层循环条件</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化计数器</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 编写循环条件</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新计数器</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刷今天的碗'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新外层计数器</span>    j <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="2、循环嵌套的基本语法"><a href="#2、循环嵌套的基本语法" class="headerlink" title="2、循环嵌套的基本语法"></a>2、循环嵌套的基本语法</h2><p>编写一个简单的while循环结构</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span> 或 i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> 边界值<span class="token punctuation">:</span>    循环体代码    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>所谓的while嵌套循环就是在while循环的基础上，把循环体代码更换为一层while循环，就组成了while嵌套循环。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：初始化外层循环计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 第二步：编写外层循环的条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第四步：初始化内层循环计数器</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 第五步：编写内层循环的条件</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>        循环体代码        <span class="token comment" spellcheck="true"># 第六步：更新内层循环计数器</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 第三步：更新外层循环计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>结构如下：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012104283.png" alt="image-20210309144900348"></p><h2 id="3、循环嵌套的执行流程"><a href="#3、循环嵌套的执行流程" class="headerlink" title="3、循环嵌套的执行流程"></a>3、循环嵌套的执行流程</h2><p>while循环嵌套执行流程口诀：在while循环嵌套的执行过程中，==外层循环1次，内层循环N次。==（时钟 =&gt; 分针和秒针，分针就相当于外层循环，秒针就相当于内层循环）</p><p>想具体了解while嵌套循环的执行流程，建议使用Debug调试。</p><p>循环嵌套的总次数 = 外层循环次数 * 内层循环次数</p><h2 id="4、循环嵌套的几个案例"><a href="#4、循环嵌套的几个案例" class="headerlink" title="4、循环嵌套的几个案例"></a>4、循环嵌套的几个案例</h2><p>案例1：打印5行5列的正方形，单元格中使用*号进行填充</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012104701.png" alt="image-20210309150645399"></p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：直接print打印</span><span class="token comment" spellcheck="true"># print("*  *  *  *  *")</span><span class="token comment" spellcheck="true"># print("*  *  *  *  *")</span><span class="token comment" spellcheck="true"># print("*  *  *  *  *")</span><span class="token comment" spellcheck="true"># print("*  *  *  *  *")</span><span class="token comment" spellcheck="true"># print("*  *  *  *  *")</span><span class="token comment" spellcheck="true"># 方法二：使用单层while循环</span><span class="token comment" spellcheck="true"># i = 1</span><span class="token comment" spellcheck="true"># while i &lt;= 5:</span><span class="token comment" spellcheck="true">#     print("*  *  *  *  *")</span><span class="token comment" spellcheck="true">#     i += 1</span><span class="token comment" spellcheck="true"># 方法三：使用单层while循环 + 运算符</span><span class="token comment" spellcheck="true"># i = 1</span><span class="token comment" spellcheck="true"># while i &lt;= 5:</span><span class="token comment" spellcheck="true">#     print("*  " * 5)</span><span class="token comment" spellcheck="true">#     i += 1</span><span class="token comment" spellcheck="true"># 方法四：使用while循环嵌套</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print("*  *  *  *  *")</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*  "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>使用Debug工具对while嵌套循环进行调试可知，在正方形案例中，外层的while主要用于控制行row信息，内层的wihle循环主要用于控制列信息col。</p><p>案例2：打印直角三角形，特征：一共有5行，第1行，有1列。第2行，有2列，第3，有3列。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012104559.png" alt="image-20210309154835512"></p><p>分析：如果采用wihle循环嵌套，外层应该循环5次，内层循环次数有一定的规则</p><p>1  循环1次</p><p>2  循环2次</p><p>3  循环3次</p><p>4  循环4次</p><p>5  循环5次</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义外层循环计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写外层循环的循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义内层循环计数器</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 编写内层循环的循环条件</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*  '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新外层循环计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>案例3：使用while嵌套循环打印 9 x 9乘法表</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012104214.png" alt="image-20210309160453980"></p><p>第一步：使用while嵌套循环打印9行的直角三角形</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化外层循环计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写外层的循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化内层循环计数器</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 编写内层的循环条件</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新内层循环的计数器</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新外层循环计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>第二步：把小星星换成具体的数值</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化外层循环计数器</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 编写外层的循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化内层循环计数器</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 编写内层的循环条件</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{j} x {i} = {i * j}'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新内层循环的计数器</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新外层循环计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h1 id="六、for循环基本语法及其应用"><a href="#六、for循环基本语法及其应用" class="headerlink" title="六、for循环基本语法及其应用"></a>六、for循环基本语法及其应用</h1><h2 id="1、for循环基本语法"><a href="#1、for循环基本语法" class="headerlink" title="1、for循环基本语法"></a>1、for循环基本语法</h2><p>for循环结构主要用于（序列 =&gt; 字符串、列表、元组、集合以及字典）类型数据的遍历（循环）操作。</p><p>另外当循环次数未知的情况，建议使用for循环。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    重复执行的代码<span class="token number">1</span>    重复执行的代码<span class="token number">2</span></code></pre><p>案例：使用for循环遍历字符串”itheima”</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>使用Debug调试以上代码可知：for循环功能非常强大，可以自动判断序列的长度，长度为多少，则for循环就循环多少次。每次循环时，系统会自动将序列中的每个元素赋值给变量i，赋值完成后，for循环内部会自动更新计数器，向后移动一位，继续循环，直至元素全部循环结束。</p><h2 id="2、range方法（函数）"><a href="#2、range方法（函数）" class="headerlink" title="2、range方法（函数）"></a>2、range方法（函数）</h2><p>Python2 range() 函数返回的是列表，而在Python3中 range() 函数返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表。（由于我们还未学习面向对象，为了方便大家理解，你可以简单的将其理解为一个序列结构）</p><p>主要作用：用于生成一段连续的内容，从0到9</p><p>基本语法：</p><pre class=" language-python"><code class="language-python">range<span class="token punctuation">(</span>stop<span class="token punctuation">)</span>range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span>start<span class="token punctuation">:</span> 计数从 start 开始。默认是从 <span class="token number">0</span> 开始。例如range（<span class="token number">5</span>）等价于range（<span class="token number">0</span>， <span class="token number">5</span>）<span class="token punctuation">;</span>stop<span class="token punctuation">:</span> 计数到 stop 结束，但不包括 stop。例如：range（<span class="token number">0</span>，<span class="token number">5</span>） 是 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> 没有 <span class="token number">5</span>step：步长，默认为<span class="token number">1</span>。例如：range（<span class="token number">0</span>，<span class="token number">5</span>） 等价于 range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><blockquote><p>range有一个口诀：顾头不顾尾，包含头部信息，但是不包含尾部信息，如range(10)，则返回0~9之间的序列，又比如range(0, 5)代表返回0 ~ 4之间的序列。</p></blockquote><p>案例：for循环与range方法，使用for循环，循环5次</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="3、for循环案例"><a href="#3、for循环案例" class="headerlink" title="3、for循环案例"></a>3、for循环案例</h2><p>案例1：使用for循环，求1 ~ 100的和</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个变量，用于接收1~100的和</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 从1开始循环，循环100次</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'1~100的和为{result}'</span><span class="token punctuation">)</span></code></pre><p>案例2：使用for循环，求1 ~ 100之间所有偶数的和</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个变量，用于接收1~100之间所有偶数的和</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 从1开始循环，循环100次</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'1~100之间所有偶数的和为{result}'</span><span class="token punctuation">)</span></code></pre><h2 id="4、循环中的两大关键字"><a href="#4、循环中的两大关键字" class="headerlink" title="4、循环中的两大关键字"></a>4、循环中的两大关键字</h2><p>在循环结构中存在两个关键字：break和continue</p><p>break：主要功能是终止整个循环</p><p>案例：遇到字符’e’，则终止整个循环</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>continue：主要功能是中止当前循环，继续下一次循环</p><p>案例：遇到字符’e’，跳过循环，继续下一次循环</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="5、综合案例：使用for循环实现用户名-密码认证"><a href="#5、综合案例：使用for循环实现用户名-密码认证" class="headerlink" title="5、综合案例：使用for循环实现用户名+密码认证"></a>5、综合案例：使用for循环实现用户名+密码认证</h2><p>案例：用for循环实现用户登录</p><p>① 输入用户名和密码</p><p>② 判断用户名和密码是否正确（username=’admin’，password=’admin888’） </p><p>③ 登录仅有三次机会，超过3次会报错 </p><p>分析：用户登陆情况有3种:</p><p>① 用户名错误(此时便无需判断密码是否正确)  – 登陆失败 </p><p>② 用户名正确 密码错误 –登陆失败 </p><p>③ 用户名正确 密码正确 –登陆成功</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义变量，用于记录登录次数</span>trycount <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 循环3次，因为超过3次就会报错</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 更新登录次数</span>    trycount <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 提示用户输入账号与密码</span>    username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的登录账号：'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的登录密码：'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断用户名是否正确</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 判断密码是否正确</span>        <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">'admin888'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'恭喜你，登录成功'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您还有{3 - trycount}次输入机会'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名错误'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您还有{3 - trycount}次输入机会'</span><span class="token punctuation">)</span></code></pre><h2 id="6、for循环嵌套"><a href="#6、for循环嵌套" class="headerlink" title="6、for循环嵌套"></a>6、for循环嵌套</h2><p>所谓for循环嵌套，就是一个for循环里面嵌套另外一个for循环的写法。</p><p>当循环结构相互嵌套时，位于外层的循环结构常简称为外层循环或外循环，位于内层的循环结构常简称为内层循环或内循环。</p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 外层循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> 序列<span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 内层循环</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> 序列<span class="token number">2</span><span class="token punctuation">:</span>        循环体</code></pre><p>案例：使用for循环嵌套实现打印九九乘法表</p><p>分析：外层循环主要用于控制循环的行数，内层循环用于控制列数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{j} x {i} = {i * j}'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印换行符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><h1 id="七、while循环与for循环中的else结构"><a href="#七、while循环与for循环中的else结构" class="headerlink" title="七、while循环与for循环中的else结构"></a>七、while循环与for循环中的else结构</h1><h2 id="1、为什么需要在while循环中添加else结构"><a href="#1、为什么需要在while循环中添加else结构" class="headerlink" title="1、为什么需要在while循环中添加else结构"></a>1、为什么需要在while循环中添加else结构</h2><p>循环可以和else配合使用，else下方缩进的代码指的是==当循环正常结束之后要执行的代码。==</p><p>强调：’正常结束’，非正常结束，其else中的代码时不会执行的。（如遇到break的情况）</p><h2 id="2、while循环中else的基本语法"><a href="#2、while循环中else的基本语法" class="headerlink" title="2、while循环中else的基本语法"></a>2、while循环中else的基本语法</h2><p>需求：女朋友生气了，要惩罚：连续说5遍“老婆大人，我错了”，如果道歉正常完毕后女朋友就原谅我了，这个程序怎么写？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 循环结束后，女朋友就原谅我了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'好开森，女朋友原谅我了...'</span><span class="token punctuation">)</span></code></pre><p>思考： 这个print是不是没有循环也能执行？那我们应该如何解决呢？</p><p>答：使用while…else结构</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 循环结束后，女朋友就原谅我了</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'好开森，女朋友原谅我了...'</span><span class="token punctuation">)</span></code></pre><h2 id="3、break关键字对while…else结构的影响"><a href="#3、break关键字对while…else结构的影响" class="headerlink" title="3、break关键字对while…else结构的影响"></a>3、break关键字对while…else结构的影响</h2><p>需求：女朋友生气，要求道歉5遍：老婆大人，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？这个退出有两种可能性：</p><p>① 更生气，不打算原谅，也不需要道歉了，程序如何书写？</p><p>② 只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这遍说的不够真诚'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 循环结束后，女朋友就原谅我了</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'好开森，女朋友原谅我了...'</span><span class="token punctuation">)</span></code></pre><p>由运行结果可知，如果我们在while循环中，使用了break，一旦break语句执行了，则else语句则不会输出。</p><h2 id="4、continue关键字对while…else结构的影响"><a href="#4、continue关键字对while…else结构的影响" class="headerlink" title="4、continue关键字对while…else结构的影响"></a>4、continue关键字对while…else结构的影响</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 编写循环条件</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这遍说的不够真诚'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老婆大人，我错了'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 循环结束后，女朋友就原谅我了</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'好开森，女朋友原谅我了...'</span><span class="token punctuation">)</span></code></pre><h2 id="5、for循环结构中的else结构"><a href="#5、for循环结构中的else结构" class="headerlink" title="5、for循环结构中的else结构"></a>5、for循环结构中的else结构</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    循环体<span class="token keyword">else</span><span class="token punctuation">:</span>    当<span class="token keyword">for</span>循环正常结束后，返回的代码</code></pre><h2 id="6、break关键字对for…else结构的影响"><a href="#6、break关键字对for…else结构的影响" class="headerlink" title="6、break关键字对for…else结构的影响"></a>6、break关键字对for…else结构的影响</h2><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span></code></pre><h2 id="7、continue关键字对for…else结构的影响"><a href="#7、continue关键字对for…else结构的影响" class="headerlink" title="7、continue关键字对for…else结构的影响"></a>7、continue关键字对for…else结构的影响</h2><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span></code></pre><h1 id="八、小海龟会画画"><a href="#八、小海龟会画画" class="headerlink" title="八、小海龟会画画"></a>八、小海龟会画画</h1><h2 id="1、小海龟模块"><a href="#1、小海龟模块" class="headerlink" title="1、小海龟模块"></a>1、小海龟模块</h2><p>在Python3版本中，新增加了一个模块叫做turtle（海龟），专门用于绘制图形图像</p><h2 id="2、模块如何使用"><a href="#2、模块如何使用" class="headerlink" title="2、模块如何使用"></a>2、模块如何使用</h2><pre class=" language-python"><code class="language-python">① 导入模块<span class="token keyword">import</span> turtle② 使用turtle模块中已经定义好的方法turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>数值<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 从左向右，绘制一条指定长度的横线（像素） 1980 * 1024</span></code></pre><h2 id="3、手绘一条直线"><a href="#3、手绘一条直线" class="headerlink" title="3、手绘一条直线"></a>3、手绘一条直线</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 绘制一条100像素的横线</span>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 休眠10s</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="4、使用turtle模块-for循环绘制五角星"><a href="#4、使用turtle模块-for循环绘制五角星" class="headerlink" title="4、使用turtle模块+for循环绘制五角星"></a>4、使用turtle模块+for循环绘制五角星</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 循环5次</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day02之Python运算符与if结构</title>
      <link href="/2022/03/03/017-python-ji-chu-02/"/>
      <url>/2022/03/03/017-python-ji-chu-02/</url>
      
        <content type="html"><![CDATA[<h1 id="一、昨日回顾"><a href="#一、昨日回顾" class="headerlink" title="一、昨日回顾"></a>一、昨日回顾</h1><h2 id="1、回顾昨天的课程内容"><a href="#1、回顾昨天的课程内容" class="headerlink" title="1、回顾昨天的课程内容"></a>1、回顾昨天的课程内容</h2><p>略</p><h2 id="2、回顾昨天的作业"><a href="#2、回顾昨天的作业" class="headerlink" title="2、回顾昨天的作业"></a>2、回顾昨天的作业</h2><p>定义变量，c1 = ‘可乐’，c2 = ‘牛奶’，通过Python代码把c1内容调整为牛奶，c2调整为可乐。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、定义两个变量</span>c1 <span class="token operator">=</span> <span class="token string">'可乐'</span>c2 <span class="token operator">=</span> <span class="token string">'牛奶'</span><span class="token comment" spellcheck="true"># 2、使用python将c1和c2的值进行交换（引入第三方变量，如temp）</span><span class="token comment" spellcheck="true"># 第一步：首先把c2杯中的牛奶放入临时temp杯子中</span>temp <span class="token operator">=</span> c2<span class="token comment" spellcheck="true"># 第二步：把c1中值赋值给c2这个变量（相当于把c1中的可乐倒入c2中）</span>c2 <span class="token operator">=</span> c1<span class="token comment" spellcheck="true"># 第三步：把temp杯子中的牛奶倒入c1种</span>c1 <span class="token operator">=</span> temp<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'1号杯中：{c1}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'2号杯中：{c2}'</span><span class="token punctuation">)</span></code></pre><h1 id="二、Python数据类型转换"><a href="#二、Python数据类型转换" class="headerlink" title="二、Python数据类型转换"></a>二、Python数据类型转换</h1><h2 id="1、使用Python实现超市的收银系统"><a href="#1、使用Python实现超市的收银系统" class="headerlink" title="1、使用Python实现超市的收银系统"></a>1、使用Python实现超市的收银系统</h2><p>Python：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您要购买商品名称：'</span><span class="token punctuation">)</span>id <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您要购买商品编号：'</span><span class="token punctuation">)</span>price <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您要购买的商品价格：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您购买了{name}，商品编号为{id}，商品价格为{price}，欢迎下次光临！'</span><span class="token punctuation">)</span></code></pre><p>以上程序虽然可以按照上图完成程序的正常输出，但是遗留了一个非常严重的问题：这个价格price变量无法参与数学运算（如买了两个奥利奥，应该是18.5 * 2），原因在于input()方法返回的所有的结果都是str字符串类型。</p><p>怎么解决以上问题呢？ 答：使用==数据类型转换==</p><h2 id="2、了解Python数据类型的转换方法"><a href="#2、了解Python数据类型的转换方法" class="headerlink" title="2、了解Python数据类型的转换方法"></a>2、了解Python数据类型的转换方法</h2><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>==int(x [,base ])==</td><td>将x转换为一个整数</td></tr><tr><td>==float(x)==</td><td>将x转换为一个浮点数</td></tr><tr><td>complex(real  [,imag  ])</td><td>创建一个复数，real为实部，imag为虚部</td></tr><tr><td>==str(x)==</td><td>将对象 x  转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象  x  转换为表达式字符串</td></tr><tr><td>==eval(str)==</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s  转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s  转换为一个列表</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的ASCII整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr><tr><td>bin(x)</td><td>将一个整数转换为一个二进制字符串</td></tr></tbody></table><p>案例1：把用户输入的幸运数字，转换为整型</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的幸运数字：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据类型转换，把str字符串类型转换为int类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>num <span class="token operator">=</span> int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>以上代码还可以简写为：</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的幸运数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例2：多种数据类型转换</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、整型转浮点类型 int => float</span>num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>float<span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、浮点类型转换为整型 float => int，浮点转整型，其小数点后的数据会丢失！！！</span>num2 <span class="token operator">=</span> <span class="token number">18.88</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、把字符串类型转换为整型或浮点类型</span>str1 <span class="token operator">=</span> <span class="token string">'20'</span>str2 <span class="token operator">=</span> <span class="token string">'10.88'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>int<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>float<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例3：eval()方法的使用，把字符串中的数字转换为原数据类型</p><pre class=" language-python"><code class="language-python">price <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您购买商品的价格：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>eval<span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>str1 = ‘10’   经过eval(str1)   转换为int类型</p><p>str2 = ‘10.88’  经过eval(str1)  转换为float类型</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>数据类型转换方法一共学了4个方法：</p><p>int() ：转整型</p><p>float() ：转浮点类型</p><p>str() ：转字符串类型</p><p>eval() ：把字符串转换为原数据类型</p><p>但是要特别注意：当float浮点类型转换为int整型时，其小数点后面的数据会丢失，一定要记住这个特性。</p><h1 id="三、Python运算符"><a href="#三、Python运算符" class="headerlink" title="三、Python运算符"></a>三、Python运算符</h1><h2 id="1、运算案例"><a href="#1、运算案例" class="headerlink" title="1、运算案例"></a>1、运算案例</h2><p>需求：用户手工输入梯形的上底、下底以及高，能直接通过Python打印出梯形的面积为多少。</p><h2 id="2、算术运算符"><a href="#2、算术运算符" class="headerlink" title="2、算术运算符"></a>2、算术运算符</h2><p>所谓的算数运算符就是我们日常生活中的加减乘除等待。</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>+</td><td>加</td><td>1 +  1 输出结果为  2</td></tr><tr><td>-</td><td>减</td><td>1 -  1 输出结果为  0</td></tr><tr><td>*</td><td>乘</td><td>2 *  2 输出结果为  4</td></tr><tr><td>/</td><td>除</td><td>10  / 2 输出结果为  5</td></tr><tr><td>//</td><td>整除</td><td>9  // 4 输出结果为 2</td></tr><tr><td>%</td><td>取余（取模）</td><td>9 %  4 输出结果为  1</td></tr><tr><td>**</td><td>幂指数</td><td>2  ** 4 输出结果为  16，即2的4次方，2  * 2 * 2 * 2</td></tr><tr><td>()</td><td>小括号</td><td>小括号用来提高运算优先级，即  (1  + 2) * 3 输出结果为  9</td></tr></tbody></table><p>案例1：了解一下算术运算符</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 四则运算 + - * /</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'加：{num1 + num2}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'减：{num1 - num2}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'乘：{num1 * num2}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'除：{num1 / num2}'</span><span class="token punctuation">)</span></code></pre><p> 案例2：和其他编程语言不太相同的几个算术运算符</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">20</span>num2 <span class="token operator">=</span> <span class="token number">6</span>num3 <span class="token operator">=</span> <span class="token number">5</span><span class="token comment" spellcheck="true"># 1、整除</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'整除：{num1 // num2}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、求余数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'余数：{num1 % num2}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、幂指数</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'幂指数：{num2 ** 3}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、圆括号</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'优先级：{(num1 + num2) * num3}'</span><span class="token punctuation">)</span></code></pre><h2 id="3、算术运算符案例：求梯形的面积"><a href="#3、算术运算符案例：求梯形的面积" class="headerlink" title="3、算术运算符案例：求梯形的面积"></a>3、算术运算符案例：求梯形的面积</h2><p>知识点：用户输入、数据类型转换以及算术运算符</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入上底：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入下底：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入高：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'梯形的面积：{s}'</span><span class="token punctuation">)</span></code></pre><h2 id="4、赋值运算符"><a href="#4、赋值运算符" class="headerlink" title="4、赋值运算符"></a>4、赋值运算符</h2><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>将=右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><p>案例1：把某个值赋值给某个变量</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>案例2：多个变量同时进行赋值操作</p><pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span>f <span class="token operator">=</span> <span class="token number">10.88</span>s <span class="token operator">=</span> <span class="token string">'hello world'</span></code></pre><p>简写为：</p><pre class=" language-python"><code class="language-python">n<span class="token punctuation">,</span> f<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10.88</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>案例3：多个变量赋予相同的值</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>简写为：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">10</span></code></pre><h2 id="5、复合赋值运算符"><a href="#5、复合赋值运算符" class="headerlink" title="5、复合赋值运算符"></a>5、复合赋值运算符</h2><p>复合赋值运算符 = 算术运算符 结合 赋值运算符</p><blockquote><p>复合赋值运算符的计算顺序 = 先执行算术运算符，执行完毕后，把结果在赋值给左边的变量。</p></blockquote><p>案例：综合案例</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 相加并赋值，先加1，然后把结果赋值给左边的变量</span>i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'更新后，i的值为：{i}'</span><span class="token punctuation">)</span>num1 <span class="token operator">=</span> <span class="token number">9</span><span class="token comment" spellcheck="true"># 取模并赋值，先求余数，然后在把结果赋值给左边的变量</span>num1 <span class="token operator">%=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'更新后，num1的值为：{num1}'</span><span class="token punctuation">)</span>num2 <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 幂指数并赋值，先求幂指数，然后把结果赋值给左边的变量</span>num2 <span class="token operator">**=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'更新后，num2的值为：{num2}'</span><span class="token punctuation">)</span></code></pre><h2 id="6、比较运算符"><a href="#6、比较运算符" class="headerlink" title="6、比较运算符"></a>6、比较运算符</h2><blockquote><p>特别注意：当我们使用比较运算符对两个变量进行比较时，其返回一个布尔类型的值。</p></blockquote><p>案例：两个数大小的比较</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">>=</span> num2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">&lt;=</span> num2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">==</span> num2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">!=</span> num2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h2 id="7、练习题"><a href="#7、练习题" class="headerlink" title="7、练习题"></a>7、练习题</h2><p>练习题1：提示用户输入圆的半径，根据公式S = πr2求圆的面积 </p><pre class=" language-python"><code class="language-python">r <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要计算圆的半径：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PI <span class="token operator">=</span> <span class="token number">3.14</span>s <span class="token operator">=</span> PI <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'圆的面积为：{s}'</span><span class="token punctuation">)</span></code></pre><p>练习题2：赋值运算 =&gt; 输入身高，体重，求BMI = 体重(kg)/身高(m)的平方。</p><pre class=" language-python"><code class="language-python">height <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的身高（m）：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>weight <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的体重（kg）：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bmi <span class="token operator">=</span> weight <span class="token operator">/</span> height <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的BMI值为{bmi}'</span><span class="token punctuation">)</span></code></pre><h2 id="8、逻辑运算符（与或非）"><a href="#8、逻辑运算符（与或非）" class="headerlink" title="8、逻辑运算符（与或非）"></a>8、逻辑运算符（与或非）</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012102034.png" alt="image-20210307144233542"></p><blockquote><p>not就是取反，只有一个表达式<code>not 表达式</code>，如果表达式为True，则not以后就返回False。反之，则返回True。</p></blockquote><p>讲个非诚勿扰的小故事：</p><p>① 女孩子要求比较高，要求男孩子必须要有房且有车</p><pre class=" language-python"><code class="language-python">表达式<span class="token number">1</span> <span class="token operator">and</span> 表达式<span class="token number">2</span>当表达式<span class="token number">1</span>为<span class="token boolean">True</span>且表达式<span class="token number">2</span>为<span class="token boolean">True</span>时，则整个表达式返回结果为<span class="token boolean">True</span>当表达式<span class="token number">1</span>或表达式<span class="token number">2</span>中有一个表达式为假，则整个表达式返回结果为<span class="token boolean">False</span>有房 <span class="token operator">and</span> 有车  则  牵手成功有房 <span class="token operator">and</span> 没车  则  牵手失败没房 <span class="token operator">and</span> 有车  则  牵手失败</code></pre><p>② 女孩子要求一般，要求男孩子有房或者有车即可</p><pre class=" language-python"><code class="language-python">表达式<span class="token number">1</span> <span class="token operator">or</span> 表达式<span class="token number">2</span>当表达式<span class="token number">1</span>为<span class="token boolean">True</span>或表达式<span class="token number">2</span>为<span class="token boolean">True</span>时，则整个表达式返回结果为<span class="token boolean">True</span>当表达式<span class="token number">1</span>与表达式<span class="token number">2</span>都为<span class="token boolean">False</span>时，则整个表达式才会返回<span class="token boolean">False</span>有房 <span class="token operator">or</span> 有车  则  牵手成功有房 <span class="token operator">or</span> 没车  则  牵手成功没房 <span class="token operator">or</span> 有车  则  牵手成功没房 <span class="token operator">or</span> 没车  则  牵手失败</code></pre><p>案例：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># True</span></code></pre><h2 id="9、扩展：短路运算"><a href="#9、扩展：短路运算" class="headerlink" title="9、扩展：短路运算"></a>9、扩展：短路运算</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">4</span> <span class="token operator">and</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">and</span> <span class="token number">6</span> <span class="token operator">or</span> <span class="token number">7</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 6</span><span class="token number">4</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出hello world</span></code></pre><p>在逻辑运算中，不一定逻辑运算符的两边都是纯表达式。也可以是数值类型的数据。</p><p>==Python把0、空字符串和None看成 False，其他数值和非空字符串都看成 True==，所以：</p><p>① 在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span></code></pre><p>② 在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。 所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">or</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">and</span> <span class="token number">7</span> <span class="token operator">or</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span></code></pre><h2 id="10、运算符的优先级"><a href="#10、运算符的优先级" class="headerlink" title="10、运算符的优先级"></a>10、运算符的优先级</h2><p>什么是运算符的优先级？其实我们小学就已经接触过了，就是在一个表达式中，我们先算谁的问题。</p><blockquote><p>先算乘除，后算加减，有括号的先算括号里面的。</p></blockquote><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012102905.png" alt="image-20210307153001187"></p><p>个人建议：</p><blockquote><p>① 不要把一个表达式写得过于复杂，如果一个表达式过于复杂，尝试把它拆分来书写</p></blockquote><blockquote><p>② 不要过于依赖运算符的优先级来控制表达式的执行顺序，这样可读性太差，应尽量使用( )来控制表达式的执行顺序</p></blockquote><h1 id="四、if选择判断结构"><a href="#四、if选择判断结构" class="headerlink" title="四、if选择判断结构"></a>四、if选择判断结构</h1><h2 id="1、if选择判断结构作用"><a href="#1、if选择判断结构作用" class="headerlink" title="1、if选择判断结构作用"></a>1、if选择判断结构作用</h2><p>在日常开发中，只要有需要进行条件判断的语句基本上都是选择判断结构。</p><p>应用场景：</p><p>如果年龄大于等于18岁，则可以正常上网。</p><p>如果升级考试成绩大于60分，则可以顺利升级就业班。</p><h2 id="2、if选择判断结构的基本语法"><a href="#2、if选择判断结构的基本语法" class="headerlink" title="2、if选择判断结构的基本语法"></a>2、if选择判断结构的基本语法</h2><p>Java：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件判断<span class="token punctuation">)</span> <span class="token punctuation">{</span>    则执行某段代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>但是Python中，不需要使用这么多复杂的符号，直接可以编写条件判断及执行某段代码</p><p>Python：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件判断<span class="token punctuation">:</span>    则执行某段代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>案例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'条件成立执行的代码1'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'条件成立执行的代码2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下方的代码没有缩进到if语句块，所以和if条件无关</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是无论条件是否成立都要执行的代码'</span><span class="token punctuation">)</span></code></pre><h2 id="3、if选择结构案例"><a href="#3、if选择结构案例" class="headerlink" title="3、if选择结构案例"></a>3、if选择结构案例</h2><p>需求：定义一个变量age = 18，判断这个变量是否大于等于18岁，如果满足条件，则可以上网。</p><p>案例1：直接定义判断，进行条件判断</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'满足18岁要求，可以正常上网'</span><span class="token punctuation">)</span></code></pre><p>案例2：上网吧案例升级版</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'满足18岁要求，可以正常上网'</span><span class="token punctuation">)</span></code></pre><p>if选择原理图：学编程除了会写代码还不行，还要回画图（流程图）</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012102767.png" alt="image-20210307161204181"></p><h2 id="4、if…else…结构"><a href="#4、if…else…结构" class="headerlink" title="4、if…else…结构"></a>4、if…else…结构</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件判断<span class="token punctuation">:</span>    当条件判断为<span class="token boolean">True</span>时，则执行这个语句段<span class="token keyword">else</span><span class="token punctuation">:</span>    当条件判断为<span class="token boolean">False</span>时，则执行这个语句段</code></pre><p>案例3：上网吧案例升级升级版，引入else</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'满足18岁要求，可以正常上网'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不满足18岁要求，回家好好学习，天天向上'</span><span class="token punctuation">)</span></code></pre><p>if…else…结构原理图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012102641.png" alt="image-20210307162555060"></p><h2 id="5、if…elif…else多条件判断结构"><a href="#5、if…elif…else多条件判断结构" class="headerlink" title="5、if…elif…else多条件判断结构"></a>5、if…elif…else多条件判断结构</h2><p>如果条件1成立，则执行语句段1</p><p>如果条件2成立，则执行语句段2</p><p>…</p><p>当所有条件都不成立时，则执行else语句段中的内容</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件判断<span class="token number">1</span><span class="token punctuation">:</span>    如果此条件为<span class="token boolean">True</span>，则执行这个语句段<span class="token keyword">elif</span> 条件判断<span class="token number">2</span><span class="token punctuation">:</span>    如果此条件为<span class="token boolean">True</span>，则执行这个语句段<span class="token keyword">elif</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    如果以上所有条件判断都不满足时，则执行这个语句段</code></pre><p>案例：</p><p>① 中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；</p><p>② 如果年龄在18-60岁之间为合法工龄；</p><p>③ 大于60岁为法定退休年龄。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个变量，接收用户输入的年龄</span>age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你还是一个童工，回去好好学习'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span><span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'合法工龄，可以正常工作'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您已经达到了退休年龄，回家好好休息'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'信息输入有误，请重新输入'</span><span class="token punctuation">)</span></code></pre><p>简写形式：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个变量，接收用户输入的年龄</span>age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你还是一个童工，回去好好学习'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">18</span> <span class="token operator">&lt;=</span> age <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'合法工龄，可以正常工作'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您已经达到了退休年龄，回家好好休息'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'信息输入有误，请重新输入'</span><span class="token punctuation">)</span></code></pre><p>if多重条件判断原理图：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012102466.png" alt="image-20210307165907589"></p><h2 id="6、if嵌套结构"><a href="#6、if嵌套结构" class="headerlink" title="6、if嵌套结构"></a>6、if嵌套结构</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 外层条件判断<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果条件为True，则执行以下语句段</span>    <span class="token keyword">if</span> 内层条件判断<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果内层条件为True，则执行以下语句段</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果条件为False，则执行以下语句段</span></code></pre><p>嵌套结构看起来异常复杂，但是我们在编写时要遵循一个原则：==先编写外层判断，所有语句编写完成后，在编写内层条件判断结构。==</p><p>案例：外层条件①，是否有钱，有钱可以上车。内层条件 ② 判断是否有空座位，如果有，则可以坐下。 </p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""根据条件（是否有钱）判断是否可以上车money = 0 没钱money = 1 有钱"""</span>money <span class="token operator">=</span> <span class="token number">1</span>seat <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> money <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 有钱，可以上车</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有钱，可以上车'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># if嵌套（seat = 1代表有空座，seat = 0代表没有空座）</span>    <span class="token keyword">if</span> seat <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 有座位，可以坐下</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有座位，可以坐下'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 没有座位，只能站着回家了</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有座位，只能站着回家了'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 没钱，只能走路回家了</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没钱，只能走路回家了'</span><span class="token punctuation">)</span></code></pre><h1 id="五、综合案例：石头剪刀布"><a href="#五、综合案例：石头剪刀布" class="headerlink" title="五、综合案例：石头剪刀布"></a>五、综合案例：石头剪刀布</h1><h2 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h2><p>参与游戏的角色有两个（玩家 与 电脑），玩家手工出拳，电脑随机出拳，根据石头剪刀布判断输赢。</p><p>玩家：player（玩家手工输入石头、剪刀、布）</p><p>电脑：computer（随机出拳）</p><p>输赢结果很重要，有三种情况：</p><p>① 玩家赢</p><p>☆ player：石头  赢 computer：剪刀</p><p>☆ palyer：剪刀  赢 computer：布</p><p>☆ player：布      赢 computer：石头</p><p>② 平局</p><p>只要player 与 computer出拳相等，就代表平局</p><p>③ 电脑赢</p><p>如果不满足以上两个条件，则电脑获胜！</p><blockquote><p>未知知识点：如何让计算机随机出拳 =&gt; 随机</p></blockquote><h2 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h2><p>确认：if…elif…else多条件分支结构</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：提示输入输入石头剪刀布，0-代表石头，1代表剪刀，2代表布</span>player <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的出拳0-代表石头，1代表剪刀，2代表布：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二步：电脑随机出拳(后续解决)</span>computer <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 第三步：根据用户以及计算机的出拳判断输赢</span><span class="token comment" spellcheck="true"># 什么情况，玩家会赢</span><span class="token comment" spellcheck="true"># player==0且computer==1 或 palyer==1且computer==2 或 player==2且computer==0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'玩家获胜'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> player <span class="token operator">==</span> computer<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'平局'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电脑获胜'</span><span class="token punctuation">)</span></code></pre><p>遗留问题：计算机没办法随机出拳</p><h2 id="3、随机出拳"><a href="#3、随机出拳" class="headerlink" title="3、随机出拳"></a>3、随机出拳</h2><p>Python语言非常的强大，强大之处就在于其拥有很多模块（module），这些模块中拥有很多别人已经开发好的代码，我们可以直接导入到我们的程序中即可使用。</p><p>==① import导入模块==</p><p>==② 通过模块.方法()调用相关功能==</p><p>随机出拳其实就是随机从0,1,2中选出一个数字</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 调用内部封装的方法</span>computer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>改进猜拳代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 第一步：提示输入输入石头剪刀布，0-代表石头，1代表剪刀，2代表布</span>player <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的出拳0-代表石头，1代表剪刀，2代表布：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二步：电脑随机出拳(后续解决)</span>computer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>computer<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第三步：根据用户以及计算机的出拳判断输赢</span><span class="token comment" spellcheck="true"># 什么情况，玩家会赢</span><span class="token comment" spellcheck="true"># player==0且computer==1 或 palyer==1且computer==2 或 player==2且computer==0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'玩家获胜'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> player <span class="token operator">==</span> computer<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'平局'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电脑获胜'</span><span class="token punctuation">)</span></code></pre><h1 id="六、三目运算符"><a href="#六、三目运算符" class="headerlink" title="六、三目运算符"></a>六、三目运算符</h1><h2 id="1、什么是三目运算符"><a href="#1、什么是三目运算符" class="headerlink" title="1、什么是三目运算符"></a>1、什么是三目运算符</h2><p>在Python中三目运算符也叫三元运算符，其主要作用：就是用于简化if…else…语句。</p><h2 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件判断<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 语句段1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 语句段2</span></code></pre><p>转换为三目运算符：</p><pre class=" language-python"><code class="language-python">语句段<span class="token number">1</span> <span class="token keyword">if</span> 条件判断 <span class="token keyword">else</span> 语句段<span class="token number">2</span></code></pre><h2 id="3、三目运算符案例"><a href="#3、三目运算符案例" class="headerlink" title="3、三目运算符案例"></a>3、三目运算符案例</h2><p>需求：输入两个数值，返回最大值</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> num1 <span class="token operator">></span> num2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'最大值为{num1}'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'最大值为{num2}'</span><span class="token punctuation">)</span></code></pre><p>简化：三目运算符</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token number">20</span>max <span class="token operator">=</span> num1 <span class="token keyword">if</span> num1 <span class="token operator">></span> num2 <span class="token keyword">else</span> num2<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'最大值为{max}'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day01之Python环境搭建与输入输出</title>
      <link href="/2022/03/03/016-python-ji-chu-01/"/>
      <url>/2022/03/03/016-python-ji-chu-01/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python概述"><a href="#一、Python概述" class="headerlink" title="一、Python概述"></a>一、Python概述</h1><h2 id="1、计算机资源"><a href="#1、计算机资源" class="headerlink" title="1、计算机资源"></a>1、计算机资源</h2><p>在开发领域，计算机资源可以分为两部分：软件资源 + 硬件资源</p><p>==软件资源：看得见，摸不着==</p><p>==硬件资源：看得见，摸得着==</p><p>硬件资源（CPU、内存、硬盘、风扇、电源、键盘、鼠标…）</p><p>软件资源（Office办公软件、网易云音乐、各种各样的计算机游戏）</p><p>思考：我们发现，软硬件之间其实是可以交互的，这是什么原理呢？</p><p>答：使用操作系统，==操作系统==是计算机软硬件之间的桥梁</p><h2 id="2、操作系统分类"><a href="#2、操作系统分类" class="headerlink" title="2、操作系统分类"></a>2、操作系统分类</h2><p>在日常的应用中，操作系统大概可以分为三大类：</p><p>① Windows操作系统 </p><p>② MacOS操作系统 </p><p>③ Linux操作系统（服务器端使用量最大的操作系统）</p><h2 id="3、为什么要学习Python"><a href="#3、为什么要学习Python" class="headerlink" title="3、为什么要学习Python"></a>3、为什么要学习Python</h2><p><strong>① 技术趋势</strong></p><p>Python自带明星属性，热度稳居编程语言界前三</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058045.png" alt="image-20210306090039676"></p><p><strong>② 简单易学</strong></p><p>开发代码少，精确表达需求逻辑；==33个关键字，7种基本数据类型==；语法规则简单，接近自然语。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058414.png" alt="image-20210306090337310"></p><p><strong>③ 应用广泛</strong></p><p>Python语言涉及IT行业70%以上的技术领域</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058251.png" alt="image-20210306090727147"></p><h2 id="4、Python语言的缺点"><a href="#4、Python语言的缺点" class="headerlink" title="4、Python语言的缺点"></a>4、Python语言的缺点</h2><p>① Python其运行速度相对于C/C++/Java要略慢一些</p><p>② Python由于语言的特性，无法对代码进行加密</p><p>③ Python的版本之间，兼容性不太理想（Python2和Python3）</p><h2 id="5、Python语言介绍"><a href="#5、Python语言介绍" class="headerlink" title="5、Python语言介绍"></a>5、Python语言介绍</h2><p>Python是一种==跨平台==的计算机程序设计语⾔。 是一个高层次的结合了==解释性、编译性、互动性和面向对象==的脚本语⾔。最初被设计用于编写自动化脚本Shell（适用于Linux操作系统），随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。</p><p>其实目前很多知名的机器学习、⼈⼯智能以及深度学习框架也都是基于Python语⾔进⾏开发的：</p><p>Google开源机器学习框架：TensorFlow</p><p>开源社区主推学习框架：Scikit-learn</p><p>百度开源深度学习框架：Paddle</p><h2 id="6、Python2-x和Python3-x版本的区别"><a href="#6、Python2-x和Python3-x版本的区别" class="headerlink" title="6、Python2.x和Python3.x版本的区别"></a>6、Python2.x和Python3.x版本的区别</h2><p>在目前的Python领域，其主要应用版本有两个：Python2和Python3</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058826.png" alt="image-20210306091509401"></p><p>主要区别可以理解为：==输入、输出以及编码格式的不同==</p><p>Python2.x</p><p>Python3.x</p><p>​     Python3.6、==Python3.7==、Python3.8、Python3.9…</p><p>在生产环境中，我们⼀般不会选择最新版本的Python，因为可能会存在未知Bug，所以⼀般强烈建议大家在选择软件版本时，向前推1 ~ 2个版本。所以咱们课程主要讲解Python3.7版本。</p><h1 id="二、Python解析器"><a href="#二、Python解析器" class="headerlink" title="二、Python解析器"></a>二、Python解析器</h1><h2 id="1、Python解析器的作用"><a href="#1、Python解析器的作用" class="headerlink" title="1、Python解析器的作用"></a>1、Python解析器的作用</h2><p>demo.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></code></pre><p>由于Python属于高级语言，其并不能直接在计算机中运行，因为缺少Python语言的运行环境：Python解析器</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058573.png" alt="image-20210306092814499"></p><p>Python解析器的作用：==就是把Python代码转换为计算机底层可以识别的机器语言==，如0101…</p><h2 id="2、Python解析器的种类"><a href="#2、Python解析器的种类" class="headerlink" title="2、Python解析器的种类"></a>2、Python解析器的种类</h2><p>==① CPython，C语言开发的解释器[官方]，应⽤广泛的解释器。==</p><p>② IPython，基于CPython的一种交互式解释器。</p><p>③ 其他解释器</p><p>PyPy，基于Python语言开发的解释器。</p><p>JPython，运⾏在Java平台的解释器，直接把Python代码编译成Java字节码执⾏。</p><p>IronPython，运⾏在微软.Net平台上的Python解释器，可直接把Python代码编译成.Net的字节码。</p><h2 id="3、下载Python解析器"><a href="#3、下载Python解析器" class="headerlink" title="3、下载Python解析器"></a>3、下载Python解析器</h2><p>下载地址：<a href="https://www.python.org/downloads/release/python-379/">https://www.python.org/downloads/release/python-379/</a></p><p>[单击上述链接] – 查找目标文件：Windows x86-64 executable installer – 单</p><p>击即可下载。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058188.png" alt="image-20210306093337458"></p><h2 id="4、Python解析器的安装"><a href="#4、Python解析器的安装" class="headerlink" title="4、Python解析器的安装"></a>4、Python解析器的安装</h2><p>第一步：双击运行Python的解析器，选择==自定义安装==以及==添加Python到环境变量==</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058656.png" alt="image-20210306095227329"></p><p>第二步：选择所有要安装的功能菜单，默认全部勾选</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058337.png" alt="image-20210306095439595"></p><blockquote><p>pip：Python的包管理工具，可以用来安装未来我们项目中需要使用的各种模块</p></blockquote><p>第三步：设置Python解析器的安装路径，强烈建议安装在除C盘以外的盘符</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058350.png" alt="image-20210306095909408"></p><p>第四步：测试Python解析器是否可以使用</p><p>按Windows + R，输入cmd字符，打开Windows的DOS窗口，输入python（全部小写），如下图所示：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058644.png" alt="image-20210306100236471"></p><p>出现了以上界面，就代表Python3.7的解析器已经安装成功了。如何从这个窗口中退出到DOS模式呢？</p><p>答：使用exit()方法</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> exit<span class="token punctuation">(</span><span class="token punctuation">)</span> 回车</code></pre><h1 id="三、Python开发工具PyCharm"><a href="#三、Python开发工具PyCharm" class="headerlink" title="三、Python开发工具PyCharm"></a>三、Python开发工具PyCharm</h1><h2 id="1、为什么要安装PyCharm"><a href="#1、为什么要安装PyCharm" class="headerlink" title="1、为什么要安装PyCharm"></a>1、为什么要安装PyCharm</h2><p>工欲善其事必先利其器</p><p>在Python的开发领域，其开发工具非常非常多，EditPlus、Notepad++、Sublime Text3、Visual Studio Code、PyCharm（目前功能最强大的IDE）</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058354.png" alt="image-20210306102520443"></p><h2 id="2、PyCharm的主要作用"><a href="#2、PyCharm的主要作用" class="headerlink" title="2、PyCharm的主要作用"></a>2、PyCharm的主要作用</h2><p>PyCharm是⼀种Python IDE （集成开发环境），带有一整套可以帮助用户在使用Python语言开发时提高其效率的⼯具，内部集成的功能如下：</p><p>Project管理</p><p>智能提示</p><p>语法高亮</p><p>代码跳转</p><p>调试代码</p><p>解释代码(解释器)</p><p>框架和库</p><p>……</p><h2 id="3、PyCharm的分类"><a href="#3、PyCharm的分类" class="headerlink" title="3、PyCharm的分类"></a>3、PyCharm的分类</h2><p>PyCharm一共有两个版本：专业版（收费） 与 社区版（免费、开源）</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012058549.png" alt="image-20210306102803654"></p><p>在基础班，PyCharm社区版足够我们使用，绰绰有余。</p><h2 id="4、下载PyCharm"><a href="#4、下载PyCharm" class="headerlink" title="4、下载PyCharm"></a>4、下载PyCharm</h2><p>下载地址：<strong><a href="https://www.jetbrains.com/pycharm/download/#section=windows">https://www.jetbrains.com/pycharm/download/#section=windows</a></strong></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059321.png" alt="image-20210306103210207"></p><h2 id="5、PyCharm安装"><a href="#5、PyCharm安装" class="headerlink" title="5、PyCharm安装"></a>5、PyCharm安装</h2><p>第一步：双击PyCharm软件安装包，进行软件安装</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059439.png" alt="image-20210306104505660"></p><p>第二步：设置软件的安装路径，理论上没有任何要求，但是建议放在除C盘以外的盘符</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059478.png" alt="image-20210306105046370"></p><p>第三步：PyCharm基本设置，创建桌面图标与.py文件关联</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059817.png" alt="image-20210306105223088"></p><h2 id="6、PyCharm软件的使用"><a href="#6、PyCharm软件的使用" class="headerlink" title="6、PyCharm软件的使用"></a>6、PyCharm软件的使用</h2><h3 id="☆-创建Python项目"><a href="#☆-创建Python项目" class="headerlink" title="☆ 创建Python项目"></a>☆ 创建Python项目</h3><p>什么是项目？其实我们在实际开发中，每次参与一个工作的开发都是一个项目的开发过程。所以使用PyCharm的第一件事就是学习Python项目的创建过程。</p><p>第一步：创建项目</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059246.png" alt="image-20210306110324245"></p><p>第二步：设置项目路径，必须放在C盘以外的盘符（非常重要！！！）</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059680.png" alt="image-20210306110916916"></p><p>配置完成后，单机Create创建Python项目。</p><h3 id="☆-新建文件与代码书写"><a href="#☆-新建文件与代码书写" class="headerlink" title="☆ 新建文件与代码书写"></a>☆ 新建文件与代码书写</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100952.png" alt="image-20210306111656942"></p><blockquote><p>如果将来要上传到服务器的文件，那么文件名切记不能使用中文。</p></blockquote><p> 编写Hello World</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-运行代码"><a href="#☆-运行代码" class="headerlink" title="☆ 运行代码"></a>☆ 运行代码</h3><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100161.png" alt="image-20210306112159796"></p><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100485.png" alt="image-20210306112245497"></p><h3 id="☆-设置或更换Python解析器"><a href="#☆-设置或更换Python解析器" class="headerlink" title="☆ 设置或更换Python解析器"></a>☆ 设置或更换Python解析器</h3><p>打开File文件，找到Settings设置，如下图所示：更换Python解析器</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100661.png" alt="image-20210306113159846"></p><h3 id="☆-PyCharm软件本身设置"><a href="#☆-PyCharm软件本身设置" class="headerlink" title="☆ PyCharm软件本身设置"></a>☆ PyCharm软件本身设置</h3><p>① 软件主题（软件未来的样式）</p><p>② 编码字体的设置</p><p>③ 代码字号的设置（文字大小）</p><p>打开File文件 =&gt; Settings设置，找到界面设置：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100194.png" alt="image-20210306115108007"></p><p>主题设置：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100587.png" alt="image-20210306115322452"></p><p>字体与字号设置：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100207.png" alt="image-20210306115516870"></p><p>字体设置：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100616.png" alt="image-20210306115611339"></p><p>字号设置：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012100262.png" alt="image-20210306115735435"></p><h3 id="☆-打开项目与关闭项目"><a href="#☆-打开项目与关闭项目" class="headerlink" title="☆ 打开项目与关闭项目"></a>☆ 打开项目与关闭项目</h3><p>打开项目：本身项目已经存在了，我们直接打开。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059098.png" alt="image-20210306120615122"></p><p>选择项目目录（文件夹）即可，如下图所示：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059903.png" alt="image-20210306120712306"></p><p>① This Window =&gt; 覆盖当前项⽬，从⽽打开目标项目</p><p>② New Window =&gt; 在新窗⼝打开，则打开两次PyCharm，每个PyCharm负责一个项⽬</p><p>③ Attach =&gt; 把两个项目合并在一起，放在同一个窗口中</p><p>关闭项目：对已经运行项目进行关闭操作。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059087.png" alt="image-20210306120425927"></p><h1 id="四、Python注释"><a href="#四、Python注释" class="headerlink" title="四、Python注释"></a>四、Python注释</h1><h2 id="1、注释的作用"><a href="#1、注释的作用" class="headerlink" title="1、注释的作用"></a>1、注释的作用</h2><p>首先强调一件事：Python代码 =&gt; Python解析器 =&gt; 机器语言，但是注释经过了Python的解释器并不会解析与执行。因为其主要就是进行代码的注释。</p><p>注释作用：==提高代码的阅读性==</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059923.png" alt="image-20210306143714495"></p><p>在我们编写Python程序时，为了了提高程序的可读性，强烈建议大家为核心代码添加注释信息。</p><h2 id="2、Python注释的基本语法"><a href="#2、Python注释的基本语法" class="headerlink" title="2、Python注释的基本语法"></a>2、Python注释的基本语法</h2><h3 id="☆-单行注释"><a href="#☆-单行注释" class="headerlink" title="☆ 单行注释"></a>☆ 单行注释</h3><p>单行注释，以”#”(Shift + 3)号开头，只能注释一行内容</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注释内容</span></code></pre><p>示例代码：</p><p>第一种：代码行的上面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输出Hello World字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></code></pre><p>第二种：放在代码的后面(代码后面保留2个空格)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出Hello World字符串</span></code></pre><h3 id="☆-多行注释"><a href="#☆-多行注释" class="headerlink" title="☆ 多行注释"></a>☆ 多行注释</h3><p>多行注释：可以同时注释多行代码或程序，常用于代码块的注释</p><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""注释内容第一行第二行第三行"""</span></code></pre><p>或</p><pre><code>'''注释内容第一行第二行第三行'''</code></pre><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""Hi, 大家好我是黑马程序员的小伙伴从今天开始，我们将一起学习Python这门语言"""</span><span class="token triple-quoted-string string">'''Hi, 大家好我是黑马程序员的小伙伴从今天开始，我们将一起学习Python这门语言'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, 大家好'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是黑马程序员的小伙伴'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'从今天开始，我们将一起学习Python这门语言'</span><span class="token punctuation">)</span></code></pre><h3 id="☆-PyCharm注释小技巧（快捷键）"><a href="#☆-PyCharm注释小技巧（快捷键）" class="headerlink" title="☆ PyCharm注释小技巧（快捷键）"></a>☆ PyCharm注释小技巧（快捷键）</h3><p>在PyCharm中，我们可以使用<code>Ctrl + /斜杠</code>来对代码或程序进行快速注释。</p><h1 id="五、PyCharm常用快捷键"><a href="#五、PyCharm常用快捷键" class="headerlink" title="五、PyCharm常用快捷键"></a>五、PyCharm常用快捷键</h1><h2 id="1、代码提示"><a href="#1、代码提示" class="headerlink" title="1、代码提示"></a>1、代码提示</h2><p>在PyCharm中，当我们输入Python关键字中的前2~3个字符，其会自动进行代码提示。这个时候，我们只需要按回车即可以快速的输入某个内容。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059447.png" alt="image-20210306150352389"></p><h2 id="2、代码保存"><a href="#2、代码保存" class="headerlink" title="2、代码保存"></a>2、代码保存</h2><p>编写代码时，一定要养成一个好的习惯，使用<code>Ctrl + S</code>快速对代码进行保存操作。</p><p>个人建议，当写完一行代码时，就按一次。</p><h2 id="3、撤销与恢复"><a href="#3、撤销与恢复" class="headerlink" title="3、撤销与恢复"></a>3、撤销与恢复</h2><p>如果不小心删除了某行代码，这个时候我们可以快速按<code>Ctrl + Z</code>就可以快速进行恢复。每按一次就撤销一次，如果撤销多了，怎么办？</p><p>答：还可以通过<code>Ctrl + Y</code>进行恢复操作</p><h1 id="六、Python中的变量（重点）"><a href="#六、Python中的变量（重点）" class="headerlink" title="六、Python中的变量（重点）"></a>六、Python中的变量（重点）</h1><h2 id="1、变量的学习目标（案例）"><a href="#1、变量的学习目标（案例）" class="headerlink" title="1、变量的学习目标（案例）"></a>1、变量的学习目标（案例）</h2><p>案例：实现两个变量的交换</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059634.png" alt="image-20210306152222362"></p><p>1号杯：可乐</p><p>2号杯：牛奶</p><p>经过一系列Python操作以后</p><p>1号杯：牛奶</p><p>2号杯：可乐</p><h2 id="2、引入变量的概念"><a href="#2、引入变量的概念" class="headerlink" title="2、引入变量的概念"></a>2、引入变量的概念</h2><p>什么是量：量是程序中的最小单元。</p><p>那什么是变量呢？</p><p>==① 变量是存储数据的容器==</p><p>==② 变量在程序运行过程中是可以发生改变的量== </p><p>==③ 变量存储的数据是临时的==</p><h2 id="3、变量的作用（举个栗子）"><a href="#3、变量的作用（举个栗子）" class="headerlink" title="3、变量的作用（举个栗子）"></a>3、变量的作用（举个栗子）</h2><p>淘宝注册案例：</p><p>① 写入用户名、密码</p><p>==② Python程序要接收用户名和密码（临时存储）==</p><p>③ 把刚才接收的用户名和密码永久的存储起来（数据库）</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059133.png" alt="image-20210306153106909"></p><p>为了解决以上问题，Python开发了变量这样一个概念，可以把用户输入的一些信息，临时的保存起来，保存的这个容器就是Python变量。</p><h2 id="4、变量的定义"><a href="#4、变量的定义" class="headerlink" title="4、变量的定义"></a>4、变量的定义</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python">变量名称 <span class="token operator">=</span> 变量的值注：等号的两边都要保留一个空格，其实Python中建议符号的两边尽量都要保留一个空格</code></pre><blockquote><p>说明：在Python程序中，这个等号和日常生活中的等号不太一样，其有一个专业名词：赋值运算符，其读法：要从右向左读，把变量的值通过 = 赋值给左边的变量。</p></blockquote><h2 id="5、变量的命令规则"><a href="#5、变量的命令规则" class="headerlink" title="5、变量的命令规则"></a>5、变量的命令规则</h2><p>标识符命名规则是Python中定义变量名称时一种命名规范，具体如下：</p><p>==① 由数字、字母、下划线(_)组成==</p><p>==② 不能数字开头==</p><p>==③ 严格区分⼤小写==</p><p>==④ 不能使⽤内置关键字作为变量名称==</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059367.png" alt="image-20210306155908564"></p><blockquote><p>下划线 =&gt; Shift + -减号</p></blockquote><p>举个栗子：</p><p>① abc、abc123、_abc、hello（合理）</p><p>② 123abc、@abc、abc-123（不合理）</p><p>③ _（下划线） =&gt; 请问这可以是一个变量名称么？答：可以</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>④ 变量abc和变量ABC是同一个变量么？答：不一样，这是两个完全不同的变量</p><p>⑤ 记不住33个关键字怎么办？答：借助于help()方法</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span><span class="token string">'keywords'</span><span class="token punctuation">)</span></code></pre><h2 id="6、推荐变量的命名规则"><a href="#6、推荐变量的命名规则" class="headerlink" title="6、推荐变量的命名规则"></a>6、推荐变量的命名规则</h2><p>① 变量命名一定要做到见名知义。</p><p>② 大驼峰：即每个单词首字母都大写，例如： MyName 。</p><p>③ 小驼峰：第二个（含）以后的单词首字母大写，例例如： myName 。</p><p>④ 下划线：例如： my_name 。</p><h2 id="7、变量的定义与调用"><a href="#7、变量的定义与调用" class="headerlink" title="7、变量的定义与调用"></a>7、变量的定义与调用</h2><p>在Python中，记住：变量一定要先定义，后使用，否则会报错。</p><p>定义：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'itheima'</span>address <span class="token operator">=</span> <span class="token string">'北京市顺义区京顺路99号'</span></code></pre><p>调用：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>或<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> address<span class="token punctuation">)</span></code></pre><h2 id="8、变量的定义与使用常见问题"><a href="#8、变量的定义与使用常见问题" class="headerlink" title="8、变量的定义与使用常见问题"></a>8、变量的定义与使用常见问题</h2><p>① 变量与字符串如何区别：</p><p>==在Python中，如果要赋值的内容添加了单引号或者双引号，其就是Python中的一种数据类型：叫做字符串（日常生活中的文本信息）==</p><p>② print打印变量时，喜欢为其添加引号</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出变量name对应的值</span>与<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出'name'这个字符串</span></code></pre><h1 id="七、Python中变量的数据类型"><a href="#七、Python中变量的数据类型" class="headerlink" title="七、Python中变量的数据类型"></a>七、Python中变量的数据类型</h1><h2 id="1、为什么要学习数据类型"><a href="#1、为什么要学习数据类型" class="headerlink" title="1、为什么要学习数据类型"></a>1、为什么要学习数据类型</h2><p>变量的定义非常的简单，但是很多小伙伴可能会想：变量除了存储这种字符类型的数据以外，还能存储其他类型的数据么？其实，在 Python中，我们为了应对不同的业务需求，也会把数据分为不同的类型，如下图所示：</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059600.png" alt="image-20210306162601034"></p><p>面试题：请手写出Python中的7种数据类型？</p><p>答：数值类型、布尔类型、字符串类型、列表类型、元组类型、集合类型、字典类型</p><p>今天我们只需要了解前3种即可。</p><p>问题：如何判断一个变量到底是什么类型？</p><p>答：① 使用type(变量名称)方法，返回变量的数据类型 ② isinstance(变量名称,数据类型)，只能返回True或False（真的还是假的）</p><h2 id="2、数值类型"><a href="#2、数值类型" class="headerlink" title="2、数值类型"></a>2、数值类型</h2><p>数值类型就是我们日常生活中的数字，数字又分为两种形式：整数 与 小数（带小数点）</p><p>整数类型：int类型</p><p>小数类型：float类型</p><p>案例1：定义一个人的信息，姓名：Tom、年龄18岁</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Tom'</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例2：定义一个超市收银系统，写入一个名称：大白菜，价格：3.5</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'大白菜'</span>price <span class="token operator">=</span> <span class="token number">3.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3、布尔类型"><a href="#3、布尔类型" class="headerlink" title="3、布尔类型"></a>3、布尔类型</h2><p>布尔类型是与逻辑相关一种数据类型，只有两个值：True（真）与False（假）</p><p>案例1：手工定义一个flag变量，其值为True</p><pre class=" language-python"><code class="language-python">flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>其实在Python中，很多程序的返回结果也可以是True或False，比如isinstance()</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>num<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>num<span class="token punctuation">,</span> bool<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><h2 id="4、字符串类型"><a href="#4、字符串类型" class="headerlink" title="4、字符串类型"></a>4、字符串类型</h2><p>在Python变量定义中，如果其赋值的内容是通过单引号或双引号引起来的内容就是字符串str类型。</p><pre class=" language-python"><code class="language-python">msg <span class="token operator">=</span> <span class="token string">'这家伙很懒，什么都没有留下...'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="5、其他类型-了解"><a href="#5、其他类型-了解" class="headerlink" title="5、其他类型(了解)"></a>5、其他类型(了解)</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、list列表类型</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、tuple元组类型</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、set集合类型：去重</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、dict字典类型：查询、搜索</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'itheima'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="八、了解Python中的Bug"><a href="#八、了解Python中的Bug" class="headerlink" title="八、了解Python中的Bug"></a>八、了解Python中的Bug</h1><h2 id="1、认识一下bug"><a href="#1、认识一下bug" class="headerlink" title="1、认识一下bug"></a>1、认识一下bug</h2><p>所谓bug，就是程序中的错误。如果程序有错误，就需要咱们程序员来进行问题排查，及时纠正错误。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059067.png" alt="image-20210306171244287"></p><h2 id="2、解决bug三步走"><a href="#2、解决bug三步走" class="headerlink" title="2、解决bug三步走"></a>2、解决bug三步走</h2><p>第一步：查看错误页面</p><p>第二步：看错误的行号</p><p>第三步：根据具体的错误，具体分析</p><h2 id="3、PyCharm代码调试（重点）"><a href="#3、PyCharm代码调试（重点）" class="headerlink" title="3、PyCharm代码调试（重点）"></a>3、PyCharm代码调试（重点）</h2><p>Debug工具是PyCharm IDE中集成的专门用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程，以方便我们快速找出程序的Bug！</p><p>Debug工具使⽤二步走：==① 打断点 ② Debug调试==</p><h2 id="4、下断点"><a href="#4、下断点" class="headerlink" title="4、下断点"></a>4、下断点</h2><p>断点应该放在哪个位置：答：代码可能出错的代码段的第一行</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059700.png" alt="image-20210306171719774"></p><h2 id="5、Debug调试"><a href="#5、Debug调试" class="headerlink" title="5、Debug调试"></a>5、Debug调试</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059900.png" alt="image-20210306171833494"></p><h2 id="6、单步调试"><a href="#6、单步调试" class="headerlink" title="6、单步调试"></a>6、单步调试</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059111.png" alt="image-20210306172007078"></p><p>遇到小闪电图标就代表这一行，可能出错了。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059951.png" alt="image-20210306172338345"></p><h1 id="九、Python中的格式化输出"><a href="#九、Python中的格式化输出" class="headerlink" title="九、Python中的格式化输出"></a>九、Python中的格式化输出</h1><h2 id="1、格式化输出"><a href="#1、格式化输出" class="headerlink" title="1、格式化输出"></a>1、格式化输出</h2><p>目前为止，我们所有的输出都是直接通过print(变量名称)形式直接打印的。但是实际工作中，我们可能需要对变量的输出进行格式化操作（按照一定格式进行输出）。</p><h2 id="2、百分号格式化输出"><a href="#2、百分号格式化输出" class="headerlink" title="2、百分号格式化输出"></a>2、百分号格式化输出</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>变量名称<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串%格式'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>变量名称<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串%格式 %格式 %格式'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>变量名称<span class="token number">1</span><span class="token punctuation">,</span> 变量名称<span class="token number">2</span><span class="token punctuation">,</span> 变量名称<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>%格式常见形式如下：</p><table><thead><tr><th><strong>格式符号</strong></th><th><strong>转换</strong></th></tr></thead><tbody><tr><td>==%s==</td><td>字符串</td></tr><tr><td>==%d==</td><td>有符号的十进制整数</td></tr><tr><td>==%f==</td><td>浮点数</td></tr><tr><td>%c</td><td>字符</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数（小写ox）</td></tr><tr><td>%X</td><td>十六进制整数（大写OX）</td></tr><tr><td>%e</td><td>科学计数法（小写’e’）</td></tr><tr><td>%E</td><td>科学计数法（大写’E’）</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f和%E的简写</td></tr></tbody></table><p>案例：定义两个变量name=’itheima’, age=18，按照如下格式进行输出：我的名字是itheima，今年18岁了。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059179.png" alt="image-20210306175326815"></p><p>案例：定义两个变量title=’大白菜’，price=3.5，按照如下格式进行输出：今天蔬菜特价了，大白菜只要3.5元/斤。</p><pre class=" language-python"><code class="language-python">title <span class="token operator">=</span> <span class="token string">'大白菜'</span>price <span class="token operator">=</span> <span class="token number">3.5</span><span class="token comment" spellcheck="true"># 格式化输出“今天蔬菜特价了，大白菜只要3.5元/斤。"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"今天蔬菜特价了，%s只要%.2f元/斤。"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>其实除了%f可以设置小数点位数以外，%d也可以填充序号。</p><p>案例：定义两个变量id=1，name=’itheima’，按照如下格式进行输出：姓名itheima，学号000001</p><pre class=" language-python"><code class="language-python">id <span class="token operator">=</span> <span class="token number">1</span>name <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名%s，学号%06d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3、format方法格式化输出"><a href="#3、format方法格式化输出" class="headerlink" title="3、format方法格式化输出"></a>3、format方法格式化输出</h2><p>基本语法：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>变量名称<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}字符串{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>变量名称<span class="token number">1</span><span class="token punctuation">,</span> 变量名称<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>案例：定义两个变量，name=’孙悟空’，mobile=’18878569090’，按照以下格式进行输出”姓名：孙悟空，联系方式：18878569090”</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'孙悟空'</span>mobile <span class="token operator">=</span> <span class="token string">'18878569090'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名：{}，联系方式：{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> mobile<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="4、format方法简写形式格式化输出（推荐）"><a href="#4、format方法简写形式格式化输出（推荐）" class="headerlink" title="4、format方法简写形式格式化输出（推荐）"></a>4、format方法简写形式格式化输出（推荐）</h2><p>在Python3.6以后版本，为了简化format输出操作，引入了一个简写形式：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'孙悟空'</span>mobile <span class="token operator">=</span> <span class="token string">'18878569090'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'姓名：{name}，联系方式：{mobile}'</span><span class="token punctuation">)</span></code></pre><h2 id="5、格式化输出中的转义符号"><a href="#5、格式化输出中的转义符号" class="headerlink" title="5、格式化输出中的转义符号"></a>5、格式化输出中的转义符号</h2><p>在字符串中，如果出现了\t和\n，其代表的含义就是两个转义字符</p><pre class=" language-python"><code class="language-python">\t ：制表符，一个tab键（<span class="token number">4</span>个空格）的距离\n ：换行符</code></pre><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*\t*\t*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello\nworld'</span><span class="token punctuation">)</span></code></pre><p>特别说明：==默认情况下，每个print()方法执行完毕后，都会输出一个\n换行符。如果不想让print()方法换行，可以添加一个end参数==</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><h1 id="十、Python中的标准输入"><a href="#十、Python中的标准输入" class="headerlink" title="十、Python中的标准输入"></a>十、Python中的标准输入</h1><h2 id="1、为什么需要输入"><a href="#1、为什么需要输入" class="headerlink" title="1、为什么需要输入"></a>1、为什么需要输入</h2><p>到目前为止，我们所有的程序都只能把数据输出给用户。但是实际工作中，我们经常输入获取用户的输入信息，如银行系统中的密码输入、淘宝中的用户登录验证。</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012059278.png" alt="image-20210306182224429"></p><h2 id="2、input-输入方法"><a href="#2、input-输入方法" class="headerlink" title="2、input()输入方法"></a>2、input()输入方法</h2><p>在Python中，如果想让Python程序接受用户的输入信息，可以使用input()方法</p><p>基本语法：</p><pre class=" language-python"><code class="language-python">input<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但是往往只有input()方法，其意义不大，我们还应该使用一个变量来临时接受用户的输入，已方便后期的操作。</p><pre class=" language-python"><code class="language-python">变量名称 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'提示信息：'</span><span class="token punctuation">)</span></code></pre><p>案例：银行系统中的，输入密码的过程</p><pre class=" language-python"><code class="language-python">password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的银行卡密码：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您输入的银行卡密码为：{password}'</span><span class="token punctuation">)</span></code></pre><h2 id="3、input-方法重要事项"><a href="#3、input-方法重要事项" class="headerlink" title="3、input()方法重要事项"></a>3、input()方法重要事项</h2><p>记住：所有由input()方法获取的数据都是==“字符串”==类型</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的姓名：'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'str'></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python3.7和Django1.11不兼容报错</title>
      <link href="/2022/03/03/029-python3.7-he-django1.11-bu-jian-rong-bao-cuo/"/>
      <url>/2022/03/03/029-python3.7-he-django1.11-bu-jian-rong-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>本人先是上网搜索了解决方法，说是python3.7和Django1.11不兼容。但本机环境为python3.8+Django1.11.6。</p><p>执行python manage.py runserver报错：</p><pre class=" language-python"><code class="language-python">Exception ignored <span class="token keyword">in</span> thread started by<span class="token punctuation">:</span> <span class="token operator">&lt;</span>function check_errors<span class="token punctuation">.</span><span class="token operator">&lt;</span>locals<span class="token operator">></span><span class="token punctuation">.</span>wrapper at <span class="token number">0x7fe60db17280</span><span class="token operator">></span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/utils/autoreload.py"</span><span class="token punctuation">,</span> line <span class="token number">228</span><span class="token punctuation">,</span> <span class="token keyword">in</span> wrapper    fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/core/management/commands/runserver.py"</span><span class="token punctuation">,</span> line <span class="token number">116</span><span class="token punctuation">,</span> <span class="token keyword">in</span> inner_run    autoreload<span class="token punctuation">.</span>raise_last_exception<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/utils/autoreload.py"</span><span class="token punctuation">,</span> line <span class="token number">251</span><span class="token punctuation">,</span> <span class="token keyword">in</span> raise_last_exception    six<span class="token punctuation">.</span>reraise<span class="token punctuation">(</span><span class="token operator">*</span>_exception<span class="token punctuation">)</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/utils/six.py"</span><span class="token punctuation">,</span> line <span class="token number">685</span><span class="token punctuation">,</span> <span class="token keyword">in</span> reraise    <span class="token keyword">raise</span> value<span class="token punctuation">.</span>with_traceback<span class="token punctuation">(</span>tb<span class="token punctuation">)</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/utils/autoreload.py"</span><span class="token punctuation">,</span> line <span class="token number">228</span><span class="token punctuation">,</span> <span class="token keyword">in</span> wrapper    fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">27</span><span class="token punctuation">,</span> <span class="token keyword">in</span> setup    apps<span class="token punctuation">.</span>populate<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>INSTALLED_APPS<span class="token punctuation">)</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/apps/registry.py"</span><span class="token punctuation">,</span> line <span class="token number">85</span><span class="token punctuation">,</span> <span class="token keyword">in</span> populate    app_config <span class="token operator">=</span> AppConfig<span class="token punctuation">.</span>create<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/apps/config.py"</span><span class="token punctuation">,</span> line <span class="token number">94</span><span class="token punctuation">,</span> <span class="token keyword">in</span> create    module <span class="token operator">=</span> import_module<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python3.8/importlib/__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">127</span><span class="token punctuation">,</span> <span class="token keyword">in</span> import_module    <span class="token keyword">return</span> _bootstrap<span class="token punctuation">.</span>_gcd_import<span class="token punctuation">(</span>name<span class="token punctuation">[</span>level<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> package<span class="token punctuation">,</span> level<span class="token punctuation">)</span>  File <span class="token string">"&lt;frozen importlib._bootstrap>"</span><span class="token punctuation">,</span> line <span class="token number">1014</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _gcd_import  File <span class="token string">"&lt;frozen importlib._bootstrap>"</span><span class="token punctuation">,</span> line <span class="token number">991</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _find_and_load  File <span class="token string">"&lt;frozen importlib._bootstrap>"</span><span class="token punctuation">,</span> line <span class="token number">975</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _find_and_load_unlocked  File <span class="token string">"&lt;frozen importlib._bootstrap>"</span><span class="token punctuation">,</span> line <span class="token number">671</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _load_unlocked  File <span class="token string">"&lt;frozen importlib._bootstrap_external>"</span><span class="token punctuation">,</span> line <span class="token number">848</span><span class="token punctuation">,</span> <span class="token keyword">in</span> exec_module  File <span class="token string">"&lt;frozen importlib._bootstrap>"</span><span class="token punctuation">,</span> line <span class="token number">219</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _call_with_frames_removed  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/contrib/admin/__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>filters <span class="token keyword">import</span> <span class="token punctuation">(</span>  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/contrib/admin/filters.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>options <span class="token keyword">import</span> IncorrectLookupParameters  File <span class="token string">"/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/contrib/admin/options.py"</span><span class="token punctuation">,</span> line <span class="token number">12</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>admin <span class="token keyword">import</span> helpers<span class="token punctuation">,</span> widgetsSyntaxError<span class="token punctuation">:</span> Generator expression must be parenthesized <span class="token punctuation">(</span>widgets<span class="token punctuation">.</span>py<span class="token punctuation">,</span> line <span class="token number">152</span><span class="token punctuation">)</span></code></pre><p> File “/Users/localadmin/opt/anaconda3/envs/202011py38/lib/python3.8/site-packages/<a href="https://so.csdn.net/so/search?q=django&amp;spm=1001.2101.3001.7020">django</a>/contrib/admin/options.py”, line 12, in <module><br>  from django.contrib.admin import helpers, widgets<br>SyntaxError: Generator expression must be parenthesized (widgets.py, line 151)<br>Performing system checks…</module></p><p>System check identified no issues (0 silenced).<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204152108130.png" alt="img"></p><p>然后打开了widgets.py所在位置，大概为：/home/i80980/.virtualenvs/py3_django/lib/python3.8/site-packages/django/contrib/admin/widgets.py</p><p>将151行末尾的逗号删掉即可</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204152108179.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>混沌</title>
      <link href="/2021/11/24/015-hun-dun/"/>
      <url>/2021/11/24/015-hun-dun/</url>
      
        <content type="html"><![CDATA[<p>总感觉一天天浑浑噩噩的，心知肚明大一是最闲的时候，正好碰上疫情，一两个月待在寝室了，自己学业反倒照顾不到，反而欠一大屁股帐，尚不且说你超前学习，成效数一数二，你连基本的跟上老师的步伐都做不到……在这疫情两个月，难道你唯一说得出口的是带舍友入坑原神，还让舍友充了两三百了吗？<br>读书不要畏畏缩缩，寝室有好的榜样在，其实高中期间寝室里都有好的榜样在，而且关系还挺好，为什么不学学呢？<br>别把最好的时机错过了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>观《再见爱人》有感</title>
      <link href="/2021/11/20/014-zai-jian-ai-ren-you-gan/"/>
      <url>/2021/11/20/014-zai-jian-ai-ren-you-gan/</url>
      
        <content type="html"><![CDATA[<p>节目看完了，最不舍的是王秋雨和郭柯宇。</p><p>可以说，kk那对是来寻找一个答案，最后找到了，为他们开心；</p><p>而对王秋雨来说，他确实有缺点，而且这么坦率地暴露在全国观众中，不知道能否再续新婚，年龄大了，离婚也只是妥协，他内心是不愿意的，只为成全他爱的那个人……</p><p>郭柯宇，这一对很迷，我是看到网上热骂才去补番外篇的，可能携带有色眼镜，就没有看出章贺的反差，罢了，即使我也略微看出章贺有些“演”，不愿去面对，但是这人品问题我也不愿去探究，搁置他罢了，不愿提及。郭柯宇，为十年婚姻放弃了自己喜爱的演艺事业，却仍要陪这前夫来节目“演”，她是善良的，一女人，十年困惑在这很迷的婚姻中，叹息与不值。最后郭柯宇看都没有看一眼，毅然决然的下车，她不顾形象与结果，她是想和他和好的，而在番外篇，他……害</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈今后</title>
      <link href="/2021/11/20/013-jin-tian-bu-zhi-zha-hui-shi-hen-duo-gan-xiang-xie-xie-ba/"/>
      <url>/2021/11/20/013-jin-tian-bu-zhi-zha-hui-shi-hen-duo-gan-xiang-xie-xie-ba/</url>
      
        <content type="html"><![CDATA[<p>今天不知咋回事，很多感想，写写吧。</p><p>我坚持写博客，是因为这完全符合我对程序员的设想，而且这肯定有利于我的</p><p>我不想想普通大学生一样普普通通过完四年，仅仅完成学业，我想出色，像新闻报道中的那样，有成长，有成就。</p><p>对我未来的设想哈</p><p>我想改变一下我的外观，其实现在这也挺好，但是我更想要章贺那种类型（有些人设问题不再考虑），不需要装帅，有胸肌，有肌肉，胖一点，不要瘦瘦弱弱的</p><p>我想改变一下我的性格，遇事不要畏惧，勇于于他人交流，尝试主动去交流，不要被动，无需过滤太多</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逝者安息，生者自强</title>
      <link href="/2021/10/23/012-shi-zhe-an-xi-sheng-zhe-zi-qiang/"/>
      <url>/2021/10/23/012-shi-zhe-an-xi-sheng-zhe-zi-qiang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一人</title>
      <link href="/2021/10/04/011-yi-ren/"/>
      <url>/2021/10/04/011-yi-ren/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012115154.jpeg" alt="微信图片_20211004205908"></p><p>用电脑到天黑，</p><p>寝室里又只有我一人，</p><p>起身吃饭去</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Autodesk系列软件因C++安装错误而安装失败分析及解决办法</title>
      <link href="/2021/10/04/041.autodesk-yin-c-an-zhuang-shi-bai/"/>
      <url>/2021/10/04/041.autodesk-yin-c-an-zhuang-shi-bai/</url>
      
        <content type="html"><![CDATA[<p>当Autodesk系列软件报错 因微软运行库安装失败 </p><p>这次找到对应的是Microsoft Visual C++ 2008 安装失败</p><p>单独运行该安装程序 提示错误 如下图所示</p><p><img src="C:\Users\i80980\Desktop\Snipaste_2022-08-27_16-40-29.png" alt="Snipaste_2022-08-27_16-40-29"></p><p>观察发现 Microsoft Visual C++ 2008 的x86 的安装程序 安装能够正常安装</p><p>将x86的复制替换原来x64的安装文件即可 注意更改成 相同的文件名</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>天水国庆游记</title>
      <link href="/2021/10/02/010-tian-shui-guo-qing-you-ji/"/>
      <url>/2021/10/02/010-tian-shui-guo-qing-you-ji/</url>
      
        <content type="html"><![CDATA[<p>刚来天水，到处工地的敲打声，还以为这是个还在建设中的城市。</p><p>近日深入探索，才发现这是具有文化底蕴的城市。</p><h2 id="伏羲庙"><a href="#伏羲庙" class="headerlink" title="伏羲庙"></a>伏羲庙</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012117524.jpeg" alt="伏羲庙"></p><p>伏羲庙确实有许多文化底蕴，值得探索学习，值得一提的是6月份还有一次公祭值得去看看。</p><h2 id="天水市博物馆"><a href="#天水市博物馆" class="headerlink" title="天水市博物馆"></a>天水市博物馆</h2><p>里面有许多文物藏品，</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012118717.jpeg" alt="IMG_20211001_114730"></p><p>这铜镜虽没看到镜面，但是这么小巧精美，真的想要一个，哈哈</p><p>话说以后是不是可以直接从博物馆绕到伏羲庙来逃门票呢，嘻嘻</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo备份恢复</title>
      <link href="/2021/09/26/009-hexo-bei-fen-hui-fu/"/>
      <url>/2021/09/26/009-hexo-bei-fen-hui-fu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/u011377996/article/details/79433279">参考教程</a></p></blockquote><h3 id="源文件恢复"><a href="#源文件恢复" class="headerlink" title="源文件恢复"></a>源文件恢复</h3><p>备份可将原Hexo源文件进行压缩备份，再解压到新位置。</p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>在新设备中将Git、node和hexo重新安装一遍</p><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>没有配置 name 和 email 的话，git 是无法正常工作的。所以首先得重新配置name跟email。<br>在git bash里面分别输入</p><pre><code>git config --global user.name "你的名字"git config --global user.email "你的邮箱"</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012002701.png" alt="image-20220401200027363"></h3><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>重新生成私匙并添加至git后测连接。<br>生成私钥：</p><pre><code>ssh-keygen -t rsa -C "你的邮箱"</code></pre><p>接着按3个回车就好，中间你也可以输入密码，随意，回车可以跳过。</p><p>一般都在C盘你自己的所在用户目录下的./ssh文件夹中下得到两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012002510.png" alt="image-20220401200102573"></p><h3 id="新建SHH"><a href="#新建SHH" class="headerlink" title="新建SHH"></a>新建SHH</h3><p>把<code>id_rsa.pub</code>里面的内容放到一个新的ssh的内容里面，标题自定义，以前的不要的ssh你也可以delete</p><p>过程：<br>先在你的GitHub右上角你的用户那里找的Setting</p><p>在左边找到SSH的这个东西</p><p>最后new一个ssh，记得把id_rsa.pub里面的全部内容放到里面，标题自定义</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012002653.png" alt="image-20220401200219435"></p><p>然后重新在git bash 下输入命令检测是否成功</p><pre><code>ssh -T git@github.com</code></pre><pre><code>The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?  # 直接输入yesHi cnfeat! You've successfully authenticated, but GitHub does not provide shell access</code></pre><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012018078.png" alt="image-20220401201852888"></p><p>哈哈，然后又可以像以前一样开心的使用<code>hexo g -d</code>了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言作业汇总</title>
      <link href="/2021/09/20/008-c-yu-yan-zuo-ye/"/>
      <url>/2021/09/20/008-c-yu-yan-zuo-ye/</url>
      
        <content type="html"><![CDATA[<h3 id="2021年9月20日"><a href="#2021年9月20日" class="headerlink" title="2021年9月20日"></a>2021年9月20日</h3><p>求三位数中的最大值</p><pre class=" language-C"><code class="language-C"># include "stdio.h"int main(){    int a,b,c,max;    scanf("%d%d%d",&a,&b,&c);        if(a>b) max=a;    else max=b;    if(c>max) max=c;    else max=max;    printf("max=%d\n",max);}</code></pre><p>数的阶乘</p><pre class=" language-C"><code class="language-C"># include <stdio.h>int main(void){    int a = 1;    int i = 1;    int n;    scanf("%d",&n);    while(i < n)    {        i = i+1;        a = a * i;    }    printf("结果为%d\n",a);    return 0;}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Magisk模块备份</title>
      <link href="/2021/09/04/006-magisk-mo-kuai-bei-fen/"/>
      <url>/2021/09/04/006-magisk-mo-kuai-bei-fen/</url>
      
        <content type="html"><![CDATA[<blockquote><p>若没有刷入Magisk，请参考我<a href="https://i80980.github.io/2021/08/14/xiu-bu-boot-fang-fa-huo-qu-root-shua-ru-magisk-jiao-cheng/">另一篇教程</a></p></blockquote><h3 id="A-智能步数管理"><a href="#A-智能步数管理" class="headerlink" title="A-智能步数管理"></a><a href="https://i80980.lanzoui.com/iA4rqtkzkxc">A-智能步数管理</a></h3><blockquote><p><a href="https://www.coolapk.com/feed/25617103?shareKey=MzExZTI0ZjRlZjEyNjEzMmRmZmY~&amp;shareUid=9808311&amp;shareFrom=com.coolapk.market_11.3">原帖</a><br>【 智能步数管理-Magisk版本】v3.2</p></blockquote><p>应该是最后一个版本了，一些小bug都测试处理完了，剩下的等你们使用过程中如果有遇到问题反馈我再进行排查吧（正常来说是没有[doge原谅ta]）</p><p>Download： <a href="https://wwa.lanzous.com/iaRdsn1stri">https://wwa.lanzous.com/iaRdsn1stri</a> </p><p>再次说明：<br>冻结了电量与性能会使模块失效。<br>设备时间和网络时间不匹配也会使模块失效。<br>安卓9有些机型能用有些不能，安卓9以下直接qs。<br>cpu占用高就是你设置的间隔时间太短了。<br>第三方运动步数异常请自检是不是自己设置的有点过分了嗷[挨打]</p><p>请悉知：<br>安装后步数为0或者十几万以上步数导致模块运行不了的，原因是你之前可能安装运行过其他步数修改的应用导致数据残留。<br>请清除电量和性能缓存，或者手动打开路径/data/user/0/com.miui.powerkeeper/databases/ 删除包含Steps.db所有字眼的文件（应该是有两个），然后重启即可。<br>使用这个模块不能冻结电量与性能，因为主要是通过修改系统步数数据库，而数据库和电量与性能相关。</p><h3 id="HttpCanaryCA-for-Android-11"><a href="#HttpCanaryCA-for-Android-11" class="headerlink" title="HttpCanaryCA for Android 11"></a><a href="https://i80980.lanzoui.com/i2MFGtkzqte">HttpCanaryCA for Android 11</a></h3><blockquote><p><a href="https://www.coolapk.com/feed/29428752?shareKey=NGQxMzkzYzE2YWQ2NjEzMmUzYzE~&amp;shareUid=9808311&amp;shareFrom=com.coolapk.market_11.3">原帖</a></p></blockquote><h3 id="QSC定量停充"><a href="#QSC定量停充" class="headerlink" title="QSC定量停充"></a>QSC定量停充</h3><p>QSC定量停充magisk模块</p><p>用于指定电量、指定温度自动进行充电保护、涓流充电(电池闲置模式)、停止供电、恢复供电，游戏模式下自定义充电电流，配置文件路径：/data/adb/modules/QuantitativeStopCharging/config.conf，日志文件log.log。</p><p>支持功能：<br>1.自定义关机电量。<br>2.自定义电量停止充电、恢复充电。<br>3.自定义电量涓流充电（电池闲置模式）。<br>4.游戏模式：指定APP自定义充电电流。<br>5.开关温控模式：指定温度停止充电、恢复充电。<br>6.电流温控模式：指定温度限制充电电流为零。<br>7.自定义开关路径、电流文件路径、或其它文件参数。<br>8.自定义温度传感器路径：获取温度传感器路径脚本 <a href="https://topdalao.lanzoui.com/iV5kfqr998j">https://topdalao.lanzoui.com/iV5kfqr998j</a> ，模块默认使用cpu温度，脚本可获取其它温度传感器的路径，其中名称battery为电池温度，获取到路径填入配置文件即可（不填则默认使用cpu温度）。</p><p>模块蓝奏云地址：<br><a href="https://topdalao.lanzoui.com/b02c5tv7c">https://topdalao.lanzoui.com/b02c5tv7c</a><br>密码:1111</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HttpCanary小黄鸟安卓11安装证书教程</title>
      <link href="/2021/09/04/007-httpcanary-xiao-huang-niao/"/>
      <url>/2021/09/04/007-httpcanary-xiao-huang-niao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考教程：<br><a href="https://www.coolapk.com/feed/29428752?shareKey=MzJjZTExZWNiN2I0NjEzMmRhNjI~&amp;shareUid=9808311&amp;shareFrom=com.coolapk.market_11.3">酷安@夏雨_SummerRain</a></p></blockquote><p><a href="https://b23.tv/846vYq">B站@凌风依熙</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修补boot获取root刷入magisk教程</title>
      <link href="/2021/08/14/005-xiu-bu-boot-fang-fa-huo-qu-root-shua-ru-magisk-jiao-cheng/"/>
      <url>/2021/08/14/005-xiu-bu-boot-fang-fa-huo-qu-root-shua-ru-magisk-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博主手机：Redmi K40 Pro<br>MIUI版本：开发版公测21.8.11</p></blockquote><blockquote><p>参考教程:<br><a href="https://www.coolapk.com/feed/28783968?shareKey=M2VmOGQ2NTk0YTY1NjExNzM4NTc~&amp;shareUid=9808311&amp;shareFrom=com.coolapk.market_11.3">酷安@纱雾XBDJ</a><br><a href="https://www.bilibili.com/video/BV1po4y1m7gF?p=7&amp;share_medium=android&amp;share_plat=android&amp;share_source=WEIXIN&amp;share_tag=s_i&amp;timestamp=1628911972&amp;unique_k=bFZHvs">B站@Distress</a></p></blockquote><h3 id="解锁BL"><a href="#解锁BL" class="headerlink" title="解锁BL"></a>解锁BL</h3><p>在<a href="http://www.miui.com/unlock/index.html">小米官网</a>下载解锁工具解锁即可，<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012056096.jpeg"><br>在这提醒两点：</p><ol><li>小米新款手机需等待7天解锁Bl，请提前做好准备。</li><li>解锁BL将会清除数据，务必备份数据：<strong>数据无价！！！</strong></li></ol><h3 id="解密卡刷包获取Boot文件"><a href="#解密卡刷包获取Boot文件" class="headerlink" title="解密卡刷包获取Boot文件"></a>解密卡刷包获取Boot文件</h3><blockquote><p>准备：系统版本包 解密工具  </p><blockquote><ol><li><strong>系统版本包</strong>：大佬整理的，<a href="https://github.com/mooseIre/update_miui_ota">版本包自取</a><br>若没有，可自行抓包，请查看我的另一篇教程</li><li><strong>解密工具</strong>：<a href="https://i80980.lanzoui.com/i4dMksmfuch">自行下载</a></li></ol></blockquote></blockquote><p>先将两个压缩包解压，其中卡刷包分为三个文件，只需要bin结尾文件。<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012056458.jpeg"><br>将卡刷包里面的bin结尾文件复制到<strong>payload_input</strong>内。<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012056238.jpeg"><br>这里需要Python环境，可以运行我事先准备的<strong>python环境.exe</strong>,注意勾选<strong>Add Python 3.9 to PATH</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012056348.jpeg"><br>完成后再运行<strong>payload_dumper.exe</strong>，等待命令提示符里面出现boot就可以关闭了，解包出的<strong>boot文件</strong>会在<strong>payload_output目录</strong>里面出现。<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012056385.jpeg"><br>手机连接电脑之后选择传输文件选项，安装相应驱动，<br>把解包出的boot文件移动到手机根目录，不管用什么方法移动都行。</p><h3 id="通过Magisk修补Boot文件"><a href="#通过Magisk修补Boot文件" class="headerlink" title="通过Magisk修补Boot文件"></a>通过Magisk修补Boot文件</h3><p>在手机安装<a href="https://github.com/topjohnwu/Magisk">面具APP</a><br>在面具里面点击安装&gt;选择并修补一个文件&gt;找到根目录的Boot文件，等待面具运行完成，完成之后会出现一个路径，在该路径能找到一个修补之后的镜像文件。<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204012056357.jpeg"></p><h3 id="刷入Boot"><a href="#刷入Boot" class="headerlink" title="刷入Boot"></a>刷入Boot</h3><p>下载<a href="https://i80980.lanzoui.com/ilPFEsmixvc">adb.win</a>这个工具，解压到电脑里方便找到的地方，将修补之后的boot文件改个简单的名字（例：0）移动到adb的根目录，手机关机进入fastboot模式，电脑运行adb输入<strong>fastboot boot 0.img</strong><br>等待手机关机自重启，<br>重启之后打开面具选择直接安装，<br>安装重启后你的爱机就获得了root。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章加密教程</title>
      <link href="/2021/08/12/004-hexo-wen-zhang-jia-mi/"/>
      <url>/2021/08/12/004-hexo-wen-zhang-jia-mi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c4d16fe454bb328b37dd6d06d2ca0316709decd9fe2988528d4da452708fe816">2be1217d69b2aade0e101f763646e2866a58c72449163d57ced755d94162aa2e15199009b6facd9c03c2a9523ac3ce18482cb36c270033eef669dc1e4e1cbad6be512d76900fc9c011ac134aa7a6d781f667be74da9f8eb817ec5b8a31f35d311809d916c375b050efd8b7a2dd20c2448b3f9d4701b8a8a3bfe5b9514b458ac9d6af0302aa3cea0b4349d2a3e06fc15b281f2d8442931a4dad91b1c3a9d5c9af9966014819ce7fda895b0e155bfe6b13d00bc101b1e1a61b8131aa8267b3fac4388e315833b10c55f8f56f1a960b60f9047eea405ef4bfb517464c3806ba4d7f50cdf17633ae2c06a59bf573672e3a9ef5dff2650cd0e8f6de32df6a3cc752729fcfef84565dff3b62b96afd43ad3abc8247cf8cc52a8aeb278d0b8585480b6348ed80ea94d82e2ac334362969f18459441521ac30f7be16a6b6df0b66662c8c75f2ec27ff70f20affb3e91ac732c5d571c34a26aa0bdabcc619afb5ae2d602cc20e0cf61d3c8e9d6f207f0a0b0ac7e9a80d97fc6c5c1ff06bd944c2e753248c757f0ba02c1efb2d4aa75939cfe45cf8ea5230a2ce74f2aa670d8eb8ba63082f578e318592991c9bdb3fd45d3a14b414ce4e39943d7b51bee3ceda0799dc9188e0266ce9cc26abc202005fcb7cc1b7907278fb1df214e0c7d09acd2bbfab113c2f613cbf37e287da7f259339ebe362f6eeb690eb9a48494b0d725664ba892ebd5ad1488f709e7aab85c3104f3a2295f66427a5dc1d6249abe29ac84db918116dfce7e0afc1ef0497083947c13419f6e592d6dbacdafb34794d10df7606e33244eb1cbc5ca6c00f3facaeb30e74599f4ba72086076a781b0df9546aadc8845274e3862a8cd5626f4c949d63818aa380391add1e004fd106899f4609b86f7c09d6649d875662422521ca78c97fba9badb8c058fcdef1b572c240970072801f033ba591e50781dad1f72511e7202c2d0d98a33cf5adf47130edc1ca1cabf626cf6372d74afa07dc9d750a2a6207678b25f07f3d974b72bd4b503402963e01fc0c7fc33b2bc01bc198c874af7de869524c3124f135659db43fa53761f0feecc5b3b04e00b3b693c642ef26c5ba69fa1335950cc4267473bc4c5713d1a4d0bb21d365a381de2274771b3ef51f08e009d3f4c6c794fbfc31326bb9d9da49bd2cb6731fe8cb5cf0d37d4a3ad7e17b1149f70abc96bd4a7199c78e63bdf43f35bfcdde6ffdfe8e03b0c30989c51318224ecb7d595f1054b97f8f2c280b9bb0cf94c49a970ad7702ff0af0c31e384bd305a38006638faeb38f230c843ee110c82673a69c8c57fecbff2d96fe196be89386a3fb8931e2aaa13b611151ae6c178cbc0b6dc5c227a425dab123b3bba50ff34d93c2216431045bcb644946562f69237d5b2349993d4ce337436d3b133435e9c2e70c6a0f8dfca041b54c2e6d0fd5e1218e6e7e22620ea9f7373b3ff10f53f861a9e0e1ec7c9f2ebb60ad6a0d6fbe006692e88408fab5bfa34bd4378e57554dc9879c2f1005dc254d6ce23b178735e7c5c603f14c4c3d653f14153ebf0e5ddcfd0d4dc42bc144d83bd71d76261762d2c7e4e2377e99204beee604d6fabf03ee4bcf33a57317c1a9915c4facd2be84b6a6c94ef3236d29e09f814b14f6d387585b59d862d259707d7e9f2563135d29376f4250475c8a4ec00a5be2f104652f961bb63387837696df6a71d01471b559a65fb95b7e1a5943ec86ca3ddd4adffaa72ffc94fa0a1ff603661bf500c798692a65584f8d7f4c29f82c313c36dc24099bc34331f5aa116c918ef02c6e01a5725329911bb7756090e802e7b09e33afbc846d849e5109455022606def209d9f41189d1b8919783e04f4c323199d8efa1acaaffd259b15d6d7ffded417c8c2d48b628f92f022182385cf00725d888361e4178efac144a3ad8badcb5f34daa8b399d85a41ad58ff3f9d6fb1feb8280c27855853ce37f0055fcd95473e5293026ccee9bfb40aee8bd8f7f99ba3c8909633afa3637fac74008404c360f4419bd1aacedbb4682722cd14f5aeaf0bba145a4648494f6fed1245c15c4b9c879ec815ce936df1298428dc283954582ca7d20e6b83f4647a5d88a0b1cd57a400c1f192458c8c5b602bc6197c157831ac454b60c44a13fd9e060fc1c6844e64ba9f132cc6535a969292a3f2fc2ef02f7b19f26858e1cd68ca9434381f0bf6c8ff1a1b9c4a8a7c972a66aacd1adc335d7edde390d322c35f437c2912d4565ca14ff5270a9ec72991a33a8baf3ff5a4cfd62e44d9d3e7273e4aeef25607c2eccb544f826255159284ffe0177d942c2aa22cecb2705dd21629c20d7e422157b056f45fa4c368769ea65d09562b3d4d54a2fb4ab13913fbb0abab45cf1ff338794f54451aaf0d489b29d12c04ade74f9c47c098e90b7c8a672a879e5af2df463d351389849b07d4669cd9f5efdfbbbbd7937c0a325f7ba67ca964af35e1111b32c6730aa73995fcf50a033fd4a71a10186f904fc5b8dea3b2e166fff7b6b63a1539ccc106ff4dddc6d6d889a497006c7301e148894317d484920529ab07d640fa547f97960a9788b83841c9f0895d486acb76272bfdf37c247c63a83131d22643329072154bc8ec4f4d64069f0915a10c2785ed5d13fe0d3339a396ca2967d76c4f244b138025322a2b16c4d6912df700790798ab31a7e3020394e6ecedf10a535924a5c02a9ab2488d7b68d5b8d5c56dca8488246a378c44bbb97bffbfbfdb8a97034a0a3345577003e83ac3a3f318b87104a737042352b830723ffb7b3dce117a67955c94d3d2f2e481448dd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码（密码：i80980）</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高考假期所感</title>
      <link href="/2021/08/12/003-suo-gan/"/>
      <url>/2021/08/12/003-suo-gan/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4291abb34ee5bdc41500b5b989bae22a89f09d9d9348018a97ffc9baeca6dd4a">1e0e1ebab769c7194ead593a567d45c95919fe4949e01b60dcf2a01cf991e076a0605e6933aca0fcbaa0f6aa55da7a04e05aa0e0b6bdd4bdad9a65d4565476627012c7f2383edd27cc1f217c5ea398a9c36a2ee80d6303ebb3d5aa0b039bd0392bd1330371fa3e2a66170a56ed746b2e0e2e6c9e1d2ab264664fa119cee6c71bdce7ed7f8d73a02ee46f5be88145849427b84689abdd29e8e201383c41ecf740338223421fab8fbd3987ba762a77e3f3a95c8d3d26071dc38173d7a94472f7eb9d84d450db590cffef9e4dafc9cf5ee0a79141881e297c17f76abd078cc05fee476ecf69e2926c42f50904a70bf5cb3fb20652a92174f062c305fb6f30c9700b8e9c67a9f730a738b0b0893b298a98170b7d8cf91c59a400aa22b4ad4dc6b4e1fc2308037730cacadd300ab06fe1864c449f7cc39779a4546f43639c1c000f55d41b53a811732a6c445d3ab71da6e61f9ee297687591829713e4b82a8036c40ab5c809e8dc590436c62bd69af30a6b9d301a66f866e7c58cbcea327d4344a670bc7655c801ed5eec0602b163492d3eab8986d2fa53986b904becfaaa6762300e3f66abf615874c93c1e9a5d92e6915160e24697c0cfd5bc11d481d9836be7678c3bb598124b4807b6625e5d00c54e07eceae390c504e8d1d8a055c7c6355acd8bd6585d152af1d20be6f8781cb007544f6273231044fb633befeac644113b838768caf5b655fe20183bb2e13cfe1278326c61e4bbfd43030a6cfd3610db3a88de35217cdb0106925a361dd37abdf98ce601b5c19b890f9976902851b94df40aed3fe68383c7d2b6e050fecf0be832efdf820accc00c7064ff6dfc89596da9a4bab7761cde179cedc320f75247bacb3c54c608c0df1d35a08a2dd0c6dad251a4185d4415c1a8be54be8c65a44f5f3b5e291bfcbe212c7f0b017efeaf28270370f78fb981c9b350fa6604a27f45e491311c30142283cdc4c5af2cb6b9945f9c360760a0714067157d0a921a932bb4bb8b788965268b7e12a555968044bcd6a2eb61cde130bf84a8768047d576cf5605c543240183473b972141cf499400f9cc4658d6a4591965d1c912f2e3b6248db6529db5590f7e3f033c95bbaaf0096c4f3d126bf3b532076054a9294d69cd01a219dcd7e182f68d0b83a3965da3c7dd02a3e59c7de22cc038123502c75152fefe40b4f23a9140e71fb426a1bf7f376761153bda91b1ea95e36aa5b0d46a51f01231e403a4c323bde65356293e28534653168617c24bbc65538a0f904b40b8a99a49f434321e1307a159876ce723bff516d912b0186df45cbae2a1822900ac616afbb46d6bd3c7914a0e95e67a812428c9f98914f46a95bf004cb9b04326ced80fdeb16bd6485e44eb018e018eaab66aaa7896ce8ea1b78f8d8f49e328f38f9a0c527a9852ddb524058f8e2bfa52be372ebcc941088f7b2a30db9a7999a0cbe61f04012914a3d21856d927f986b2e90dc89b74989375667aa3332736eff91a37028b9c4060ea9913a3705de88a8a97bc733cbfac58695ea1935781edff43c7ac3929fe0aa0b789edb3fb4e7db85be026d5c0a288d3ada81bbe045cae9481958402e326699909e44660e5bd88a659fb75fb6cd4bb0254487b3808258d653f79271834212d6ccaa297b8b0116b8db519d311a2c1342c2b001706873e2b0d9755d567f6c2a3aab9b11d410ba9f6d92b814f6195668cd02d6699dec6aff95d52d0b037a0cd6df19898bd187a74499742adbfd5105ce8f3a3e4b65e363348d1aad7ea8aaa745bf8d1d7dc65b4b867415146df6026e8ea152ce658fd41e04d8cb459f90c4c4bf4a7e3f2fe9cd6212f38f4c18e2bb2bd567c2cbb5adc7f20640b8a41b2ebffdc72427fd0bda77a67ddd25fb627a625905db05d7a5c9cffad4265d641325fca3821636293ba82729097a0a5c39798e92d8a05dad4285964cc35a6276e9b024a63ce4f8373a60bc1b55df44941fcaa68a16be2b1c39fd76e05248b2f14f1979be1c27025afe948465058954829fb3ec1b2b46eb891ee0ed8c4d08bad14be95db21c08929436d4df483e2220daed26acbe3a460206a1441550147b9753b52359079b6252d59ef4d936a78fc3e62f388cbc6989b51cb9c913b1305db115b5e56794b71990e8a9a21c34efbc48fdab4cb0c5f43be1ac11a496143f80e32f3d1c1d625d74c826c7157c18ca68fbab0fcfd97f71449469eccc7ff48d55d3e9e7682b22d0c9502a253cb80ef9fea2f36c5f8b853289f7ad892cdb67d2957f11edd091fbf9e09867d2616b33bcf40ee4afb130464df98b8d7af3f0b7ca81d1be23b575f9106ae56ab65d65e8ee7ace7f9a5f8294755f39cbc0fe286972d995ca75254311825519b88eeffe9df431a5576f6e044ea3fe145464d5f4da15f82e52859be326cb924b2ade11c2983a70aa8b77f4ef26dc9d62b196c559de4616c781ba9e4e0df339fd99aabb6b9317bd093be5b89f6ec11988c0109c426752730f529337fcf4b089fea3ee9f453c89d54378f2503274821218a89352152dc9e0683faac6659a62b813af6bbc1dcc84e5dd7a54b1634184413ccae5e5adf3906d975b7bfb5a3cfbdc8832ab416125908a817f6885f95e68b7e6e22132e7a74342fefb6e6b2c02e746c26fbde48fb521af51454209fd6f967b1ffd29435435889daf7945682b07073fd32f0e0cd92b54862996463e11eb9f7b43f5ac586c34ae22bbde52b8160d6d2557f1f82f9bb8181a611e9fd6ce03da05ad3afc5e8d9a519232d7ac21a3ecccbc3c80e9158dfa2088571764e93d3e11e8fd681f90aff0b85062e5266d3b97c327986c87f223aed42cf802227d1ed4912b3197f1e1e5ffa982c2cb384befd2150fae7ba43019014800d5954b1d8dc58409033c27e310cedf378091231df907762bb2db4185f91ad8f5b4a75f70414d933b7d8be5a34a2410d155e970edef195f841e41d8e853a354dd817967ddada2679f5387900453e7d51baf21bcdb17b08b5189411a32b04ab0affe602580a244ca466bac6b0c15eb21fe8dd74a259d4c36c632c07e071eb094741979e8d4c250e31ecd0419b173b8c5009f2c032f3a7b0001ec712ed3f05df1f42c580758e6ae969dc8a01bd145077850467c636e2c0b064ea9bfe4d162fc45ad934d4948e71a97cd66e5e7c6f3fef2e69a638487febc852fe235956ceafef16575337d735b3d8ce78e3ef5f930a90ec71fdb0a4165173fdbd84b2ee0452b4f6aa6c3caebe9d5a2f9fce5a0a90ee4602c796423dcbe55bd471882ce86fa20f3ffdba1e112d41bd5eb3c4c7134d140358d141c63130af52a43f2bef1d92c56dc562ebef6bd6f2c7b517d22c4bc8eea2ca42fb5cb5a13b70ca21209f9e95c9bf72bfd85eab8d46cb78422dbc312469b8b96010fe367e327639a12d30c4c992ef8e1d18c4039b5da91abdb204112194a2d6408a5b124a49dc3a903eac2de496e91a65ed7198ce85a7a3821cfceefbe04c1d7f76464560da63f6da86ca602fea327d7af42b5a6ffb3aa169fed32c40f27618769340ee4490a8992038c03e4ae90ce8ae238b75870d765ee6e5dee9c0b6326835c3a1c56cfd67db4858143bdfc4a22bec6a81ca160918f031aa4e9228015b3ba1e25ce4dbdaf45030b5d61ea0bdd4f2d73d29fa85d9aa7bb125fda1d311e593138024603293c4d9d97a0a6b303a02a442f15355de02b976738b88b0f453da93e75baebc586d2f9da1a5b894882fc62ad1ff0f1f59969801281eee1498b477e93fa4632be5bc740f3a370c2758f91c4ae4666881e01de6e89e0bc57ac2c76e8c56c54ab24e1c010dc6ea98b0365cc0257b680c64a1e4d8cbb5d03aeb1bdce384a56c0c93f01db7b1b063f0219afe7a5a03de1013eefe25eae38b2c9c522a6fa205eac5c13f876a92e7668a9e4c0ffa31e6eee323bb7cf2d1c16fab9ba51c6e4ebb5a7f43e7c0e558d74623e1aff373082133fb1e49f8d2466a0640d531f2e3bcb2892e85bb125f3f0c9fe8d239941204defc2252b906bc48ddec806b4999d66b588f1c5403f931eb4663e06a83079ab8a877cc48c73bf7f68e892f225cfdbf362bf065fa225b80df0068cb1dfda62a17109f082ac6def6b821046a0f72dd3ae66f6d82d62d65f57e3f407fd30b96c7672fd0beb78347fbacfd947c0898ca6fc254e2f4a893fb7e1aada1b03042d2646485016c69cd98867a7d653b0c83d6de4f5684b41d103c8627a730dd1eef841d870f12143ca851d3914a770fa37a5009686ef8da1d7ad2c288e673d818139f6bfce8f6cfbcac013dd24b1b4b55a84fa80b2aea735ab9e4f363ac7ecb83ad14298ab8364ccbffd86</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建教程</title>
      <link href="/2021/08/11/002-hexo-da-jian-jiao-cheng/"/>
      <url>/2021/08/11/002-hexo-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="在Github创建仓库"><a href="#在Github创建仓库" class="headerlink" title="在Github创建仓库"></a>在Github创建仓库</h3><p>登录GitHub，<br>点击GitHub中的右上角的 + 创建新仓库（new repository），仓库名应该为：<strong>yourname.github.io</strong><br>这里的<strong>yourname</strong>使用你的GitHub帐号名称代替，这是固定写法，文章接下来出现的<strong>yourname</strong>皆为你的GitHub账号名称</p><h3 id="安装所需软件并连接GitHub"><a href="#安装所需软件并连接GitHub" class="headerlink" title="安装所需软件并连接GitHub"></a>安装所需软件并连接GitHub</h3><ol><li><p>安装Git<br>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>在官网下载安装，安装时一路继续就好了。<br>安装完成后在命令行内输入 git 查看是否成功。<br>若提示 <strong>“‘git’是内部或外部命令，也不是可运行的程序或批处理文件。”</strong> 就说明失败了。</p></li><li><p>安装Node.js<br>Hexo基于Node.js，Node在官网下载安装包，注意安装Node.js会包含环境变量及npm的安装。<br>安装后检测Node.js和npm是否安装成功，在命令行中分别输入 （显示版本号即安装成功）</p><pre class=" language-bash"><code class="language-bash">node -v <span class="token function">npm</span> -v</code></pre></li></ol><h3 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h3><p>成功安装后在桌面右键点击 <strong>Git Bash Here</strong><br>设置user.name和user.email配置信息，</p><p>在弹出界面中输入以下内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的GitHub用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的GitHub注册邮箱"</span></code></pre><h3 id="创建-SSH"><a href="#创建-SSH" class="headerlink" title="创建 SSH"></a>创建 SSH</h3><p>输入以下内容</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的GitHub注册邮箱"</span></code></pre><p>直接三个回车即可，即不设置密码<br>在 <strong>C:\Users\Username.ssh</strong> 路径下找到名为 <strong>id_rsa.pub</strong> 的文件，就是你刚刚创建的密钥，右键用记事本打开然后复制全部内容<br>然后进入GitHub添加密钥<br>将复制的内容粘贴至Key中，title随便填然后点击 <strong>Add SSH key</strong></p><p>在Git Bash中检测GitHub公钥设置是否成功<br>bash中输入下面这一行内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>当出现<br><strong>“Hi,yourname! You’ve successfully……”</strong><br>则已经成功。</p><p>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了 省去每次输入密码的步骤 ，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo就是我们的个人博客网站的框架，我们需要在电脑里创建一个文件夹（称之为博客根目录），用来存放Hexo的相关文件以及博客文章，文件夹名字随意（建议不要出现中文），我文件夹名字为 Hexo-Blog 。创建好后，进入文件夹中，右键进入 <strong>Git Bash Here</strong><br>（注意，之后有关操作都需要在博客根目录进入 Git Bash Here ）<br>输入以下内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><h3 id="初始化博客："><a href="#初始化博客：" class="headerlink" title="初始化博客："></a>初始化博客：</h3><p>输入以下内容</p><pre class=" language-bash"><code class="language-bash">hexo init</code></pre><p>文件夹中大致如下</p><ol><li><strong>node_modules</strong> 是 node.js 各种库的目录，</li><li><strong>public</strong> 是生成的网页文件目录（一开始可能没有）</li><li><strong>scaffolds</strong> 里面就三个文件，存储着新文章和新页面的初始设置</li><li><strong>source</strong> 是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li><strong>themes</strong> 存放着主题文件</li><li><strong>_config.yml</strong> 站点配置文件</li></ol><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>按顺序输入以下两条命令：</p><pre class=" language-bash"><code class="language-bash">hexo generatehexo server</code></pre><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>我们需要将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，<br>打开站点配置文件 <strong>_config.yml</strong>（博客根目录中），<br>划到最后,将deploy中的内容修改成下面的样子（yourname改成你GitHub的用户名）</p><pre class=" language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repository: https://github.com/yourname/yourname.github.io.gitbranch: master（repository冒号后面只有一个空格哦）</code></pre><p>然后我们还需要安装部署所需插件 deploy-git<br>在bash中输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>然后按顺序输入以下三条命令</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy</code></pre><p>全部完成后，恭喜，你的博客已经搭建完成，当然，只是一个雏形。</p><h3 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h3><p>下面会介绍常用的Hexo命令（若有 ==&gt; 则右边为简写）</p><pre class=" language-bash"><code class="language-bash">1. <span class="token function">npm</span> <span class="token function">install</span> hexo -g <span class="token comment" spellcheck="true">#安装Hexo</span>2. <span class="token function">npm</span> update hexo -g <span class="token comment" spellcheck="true">#升级</span>3. hexo init <span class="token comment" spellcheck="true">#初始化博客</span>4. hexo new <span class="token string">"mypost"</span> <span class="token operator">==</span><span class="token operator">></span> hexo n <span class="token string">"mypost"</span> <span class="token comment" spellcheck="true">#新建文章（在 /source/_posts 文件夹中创建 mypost.md 文件）</span>5. hexo generate <span class="token operator">==</span><span class="token operator">></span> hexo g <span class="token comment" spellcheck="true">#生成页面(页面在public文件夹中)</span>6. hexo server <span class="token operator">==</span><span class="token operator">></span> hexo s <span class="token comment" spellcheck="true">#本地预览</span>7. hexo deploy <span class="token operator">==</span><span class="token operator">></span> hexo d <span class="token comment" spellcheck="true">#部署</span>8. hexo clean <span class="token comment" spellcheck="true">#清除缓存</span>9. hexo server <span class="token comment" spellcheck="true">#Hexo会监视文件变动并自动更新，无须重启服务器</span>10. hexo server -s <span class="token comment" spellcheck="true">#静态模式</span>11. hexo server -p 5000 <span class="token comment" spellcheck="true">#更改端口</span>12. hexo server -i 192.168.1.1 <span class="token comment" spellcheck="true">#自定义 IP</span></code></pre><p>配置修改后需<strong>hexo g</strong>重新生成界面， <strong>hexo s</strong>本地预览过程中若对某些配置文件（好像主题配置文件可以）修改，可直接刷新本地预览页面，按Ctrl+C可停止本地预览</p><p>命令之间可用 <strong>&amp;&amp;</strong> 相连接<br>如 <strong>hexo g &amp;&amp; hexo s</strong> 和 <strong>hexo g &amp;&amp; hexo d</strong> 等等<br>当然 对于上面两种常用的命令，hexo提供了简写 <strong>hexo s -g</strong> （生成界面并本地预览） 和<strong>hexo g -d</strong> （生成界面并部署）</p><p>对博客修改之后只有进行了部署才会发布到网上</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MARKDOWN学习</title>
      <link href="/2021/08/11/001-md-xue-xi/"/>
      <url>/2021/08/11/001-md-xue-xi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-Yml"><code class="language-Yml">---title:date:updated:tags:categories:keywords:description:top_img:comments:cover:toc:toc_number:copyright:copyright_author:copyright_author_href:copyright_url:copyright_info:mathjax:katex:aplayer:highlight_shrink:aside:---</code></pre><p>写法    解释</p><ol><li>title<ul><li>【必需】文章标题</li></ul></li><li>date    <ul><li>【必需】文章创建日期</li></ul></li><li>updated<ul><li>【可选】文章更新日期</li></ul></li><li>tags    <ul><li>【可选】文章标籤</li></ul></li><li>categories    <ul><li>【可选】文章分类</li></ul></li><li>keywords    <ul><li>【可选】文章关键字</li></ul></li><li>description    <ul><li>【可选】文章描述</li></ul></li><li>top_img    <ul><li>【可选】文章顶部图片</li></ul></li><li>cover    <ul><li>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</li></ul></li><li>comments    <ul><li>【可选】显示文章评论模块(默认 true)</li></ul></li><li>toc    <ul><li>【可选】显示文章TOC(默认为设置中toc的enable配置)</li></ul></li><li>toc_number    <ul><li>【可选】显示toc_number(默认为设置中toc的number配置)</li></ul></li><li>copyright    <ul><li>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</li></ul></li><li>copyright_author    <ul><li>【可选】文章版权模块的文章作者</li></ul></li><li>copyright_author_href    <ul><li>【可选】文章版权模块的文章作者链接</li></ul></li><li>copyright_url<ul><li>【可选】文章版权模块的文章连结链接</li></ul></li><li>copyright_info    <ul><li>【可选】文章版权模块的版权声明文字</li></ul></li><li>mathjax<ul><li>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</li></ul></li><li>katex    <ul><li>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</li></ul></li><li>aplayer    <ul><li>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</li></ul></li><li>highlight_shrink    <ul><li>【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink的配置)</li></ul></li><li>aside    <ul><li>【可选】显示侧边栏 (默认 true)</li></ul></li></ol><p>转自butter主题官方文章:<a href="https://butterfly.js.org/posts/dc584b87/#Post-Front-matter">Butterfly 安装文档(二) 主题页</a></p><p> Front-matter 置顶参数index 数字越大越靠前展示。</p><pre><code>swiper_index: 1swiper_desc: 简单好用的 hexo 博客文章置顶插件！swiper_cover: /images/letter/p.png</code></pre><h4 id="MAKEDOWN基础"><a href="#MAKEDOWN基础" class="headerlink" title="MAKEDOWN基础"></a><strong>MAKEDOWN基础</strong></h4><pre class=" language-MAKEDOWN"><code class="language-MAKEDOWN">文字链接 [链接名称](http://链接网址)网址链接 <http://链接网址></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AMD芯片安装mac虚拟机</title>
      <link href="/2021/08/11/027-an-zhuang-hei-mac/"/>
      <url>/2021/08/11/027-an-zhuang-hei-mac/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装VMware"><a href="#一、安装VMware" class="headerlink" title="一、安装VMware"></a>一、安装<a href="https://so.csdn.net/so/search?q=VMware&amp;spm=1001.2101.3001.7020">VMware</a></h1><blockquote><p><strong><code>注意：AMD处理器不要使用VMware Workstation 15.5 Pro 进行安装macOS，不然后面macOS启动虚拟机失败！！！</code></strong><br><strong>AMD处理器打开虚拟机报错直接跳到 五、附录 看</strong></p></blockquote><ul><li><p><strong>安装VMware Workstation 16 Pro</strong><br>官网下载：<a href="https://customerconnect.vmware.com/en/downloads/info/slug/desktop_end_user_computing/vmware_workstation_pro/16_0">https://customerconnect.vmware.com/en/downloads/info/slug/desktop_end_user_computing/vmware_workstation_pro/16_0</a></p></li><li><p>VMware16的密钥：</p><p>ZF3R0-FHED2-M80TY-8QYGC-NPKYF<br>YF390-0HF8P-M81RQ-2DXQE-M2UT6<br>ZF71R-DMX85-08DQY-8YMNC-PPHV8</p></li><li><p><strong>安装完成</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011828319.png" alt="img"></p></li></ul><h1 id="二、安装Unlocker解锁工具"><a href="#二、安装Unlocker解锁工具" class="headerlink" title="二、安装Unlocker解锁工具"></a>二、安装Unlocker解锁工具</h1><blockquote><p>安装完VMware Workstation后，我们还需要一个工具unlocker对VMware Workstation进行解锁。解锁有两个目的：<br>目的一是<code>让VMware Workstation支持macOS</code>（不然后面步骤中新建<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&amp;spm=1001.2101.3001.7020">虚拟机</a>是看不到“Apple Mac OS X”选项的）；<br>目的二是下载更新最新的darwin.iso（如果这个不是最新的，安装后的macOS无法全屏）。</p></blockquote><ul><li><strong>下载Unlocker V3.0</strong><br>Github下载：<a href="https://github.com/DrDonk/unlocker">https://github.com/DrDonk/unlocker</a></li><li><strong>解压Unlocker V3.0</strong><br>解压到VMware目录下，<code>所含路径不能有中文</code></li><li><strong>关闭VMware服务和进程</strong><br>在这之前关闭VMware软件。<br>打开<code>任务管理器</code>，选择<code>服务</code>，右键停止VMware相关服务<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011829681.png" alt="img"><br>打开<code>任务管理器</code>，选择<code>进行</code>，右键停止VMware相关进程<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011829535.png" alt="img"></li><li><strong>执行win-install.cmd</strong><br>右键<code>以管理员身份运行</code>执行Unlocker.exe安装程序</li><li><strong>直到出现drawin.iso解锁完成</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011829082.png" alt="img"></li></ul><h1 id="三、安装macOS"><a href="#三、安装macOS" class="headerlink" title="三、安装macOS"></a>三、安装macOS</h1><h2 id="3-1-下载macOS映像文件"><a href="#3-1-下载macOS映像文件" class="headerlink" title="3.1 下载macOS映像文件"></a>3.1 下载macOS映像文件</h2><p>这里提供了macOS 10.13<br>百度网盘：<a href="https://pan.baidu.com/s/1VsOFgbWrfw5TOZ8IYBn8fg">https://pan.baidu.com/s/1VsOFgbWrfw5TOZ8IYBn8fg</a> 提取码：ca4l</p><h2 id="3-2-创建macOS虚拟机"><a href="#3-2-创建macOS虚拟机" class="headerlink" title="3.2 创建macOS虚拟机"></a>3.2 创建macOS虚拟机</h2><ul><li><strong>点击 <code>创建新的虚拟机</code></strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011830950.png" alt="img"></li><li><strong>选择 <code>典型</code></strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011829050.png" alt="img"></li><li><strong>安装刚刚的macOS映像文件</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011830747.png" alt="img"></li><li><strong>选择 <code>Apple Mac OS X(M)</code>，版本 <code>macOS 10.14</code></strong></li><li>**默认磁盘大小 <code>40GB</code>**，建议改为<code>90G</code><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011830071.png" alt="img"></li><li><strong>完成配置</strong></li></ul><blockquote><p><strong><code>注意：完成后，先不要急着开启虚拟机！！！</code></strong></p></blockquote><h2 id="3-3-编辑虚拟机设置"><a href="#3-3-编辑虚拟机设置" class="headerlink" title="3.3 编辑虚拟机设置"></a>3.3 编辑虚拟机设置</h2><p>内存改为<code>6144</code></p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011830297.png" alt="image-20220401173454934"></p><p>勾选虚拟化</p><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011830904.png" alt="image-20220401173602485"></p><p>USB要设置为2.0，其他不兼容<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011830888.png" alt="img"><br>不然等下进去会鼠标动不了<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831306.png" alt="img"></p><h2 id="3-4-【AMD处理器专属】修改-vmx文件（Intel处理器可跳过）"><a href="#3-4-【AMD处理器专属】修改-vmx文件（Intel处理器可跳过）" class="headerlink" title="3.4 【AMD处理器专属】修改.vmx文件（Intel处理器可跳过）"></a>3.4 【AMD处理器专属】修改.vmx文件（Intel处理器可跳过）</h2><p>找到给macOS虚拟机分配的路径下 <code>.vmx</code> 文件，右键进行编辑<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011832957.png" alt="img"><br>在文件最后加入以下代码：</p><pre class=" language-cpp"><code class="language-cpp">cpuid<span class="token number">.0</span><span class="token punctuation">.</span>eax <span class="token operator">=</span> <span class="token string">"0000:0000:0000:0000:0000:0000:0000:1011"</span>cpuid<span class="token number">.0</span><span class="token punctuation">.</span>ebx <span class="token operator">=</span> <span class="token string">"0111:0101:0110:1110:0110:0101:0100:0111"</span>cpuid<span class="token number">.0</span><span class="token punctuation">.</span>ecx <span class="token operator">=</span> <span class="token string">"0110:1100:0110:0101:0111:0100:0110:1110"</span>cpuid<span class="token number">.0</span><span class="token punctuation">.</span>edx <span class="token operator">=</span> <span class="token string">"0100:1001:0110:0101:0110:1110:0110:1001"</span>cpuid<span class="token number">.1</span><span class="token punctuation">.</span>eax <span class="token operator">=</span> <span class="token string">"0000:0000:0000:0001:0000:0110:0111:0001"</span>cpuid<span class="token number">.1</span><span class="token punctuation">.</span>ebx <span class="token operator">=</span> <span class="token string">"0000:0010:0000:0001:0000:1000:0000:0000"</span>cpuid<span class="token number">.1</span><span class="token punctuation">.</span>ecx <span class="token operator">=</span> <span class="token string">"1000:0010:1001:1000:0010:0010:0000:0011"</span>cpuid<span class="token number">.1</span><span class="token punctuation">.</span>edx <span class="token operator">=</span> <span class="token string">"0000:0111:1000:1011:1111:1011:1111:1111"</span>smbios<span class="token punctuation">.</span>reflectHost <span class="token operator">=</span> <span class="token string">"TRUE"</span>hw<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token string">"MacBookPro14,3"</span>board<span class="token operator">-</span>id <span class="token operator">=</span> <span class="token string">"Mac-551B86E5744E2388"</span>keyboard<span class="token punctuation">.</span>vusb<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token string">"TRUE"</span>mouse<span class="token punctuation">.</span>vusb<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token string">"TRUE"</span></code></pre><p>将 <code>virtualHW.version = "19"</code> 改为 <code>10</code><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011832705.png" alt="img"></p><h2 id="3-5-开启虚拟机进行macOS引导安装"><a href="#3-5-开启虚拟机进行macOS引导安装" class="headerlink" title="3.5 开启虚拟机进行macOS引导安装"></a>3.5 开启虚拟机进行macOS引导安装</h2><p><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011832927.png" alt="img"><br>经过语言选择后，来到这里进行磁盘分配：</p><ul><li><strong>左上角点击 <code>实用工具</code>，选择 <code>磁盘工具</code></strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011832632.png" alt="img"></li><li><strong>选择 <code>VMware Virtual SATA Hard Drive Media</code>，点击 <code>抹掉</code></strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011832870.png" alt="img"></li><li><strong>输入名称，名称随意，完成后关掉这个页面</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011833466.png" alt="img"></li><li>**重新来到这个页面，选择 <code>继续</code></li><li><strong>注意</strong>：如果进不了这个界面，点击实用工具，打开终端，断网进行修改时间：输入指令<code>date 062614102014.30</code>,就可以进入了<br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011832489.png" alt="img"></li><li><strong>选择刚刚的磁盘</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011833524.png" alt="img"><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011833838.png" alt="img"></li><li><strong>这时我们先打开任务管理器，重启刚刚停止的VMware服务，不然等下选网络方式连接不上网络</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831145.png" alt="img"></li><li><strong>完成安装引导</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831281.png" alt="img"></li></ul><h1 id="四、安装VMware-Tools"><a href="#四、安装VMware-Tools" class="headerlink" title="四、安装VMware Tools"></a>四、安装VMware Tools</h1><ul><li><strong>右键打开右上角光盘</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831848.png" alt="img"></li><li><strong>VMware菜单栏选择 <code>虚拟机</code>，点击 <code>安装VMware Tools</code></strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831948.png" alt="img"></li><li><strong>双击VMware Tools，然后选择</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831677.png" alt="img"><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831155.png" alt="img"></li><li><strong>安装完成</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831227.png" alt="img"></li><li><strong>点击这个图标，选择<code>保持纵横比拉伸</code>，现在就可以全屏适配了</strong><br><img src="https://raw.githubusercontent.com/i80980/tuchuang_1/main/202204011831741.png" alt="img"></li></ul><h1 id="五、附录：AMD启用虚拟化"><a href="#五、附录：AMD启用虚拟化" class="headerlink" title="五、附录：AMD启用虚拟化"></a>五、附录：AMD启用虚拟化</h1><p>由于我电脑已经虚拟化过，这里就只能查看其他教程：<br><a href="https://blog.csdn.net/qq_36664495/article/details/104266994">AMD启用虚拟化（AMD-V）</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
